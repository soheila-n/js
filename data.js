let data = [
  {
    "title": "Ace",
    "repo": "botanicus/ace",
    "homepage": "https://github.com/botanicus/ace",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Haml"],
    "description": "Ace is a static page generator.",
    "bodyContent": "Ace is a static page generator like [Nanoc](http://nanoc.stoneship.org), [Jekyll](https://github.com/mojombo/jekyll) or [Webby](http://webby.rubyforge.org/tutorial). How is it different? Well, it's better :) ! If you need to generate a lot of pages on the fly, Nanoc is a hassle. It provides helpers, but helpers are – let's face it – programming style we used to use years back when we yet believed that PHP is actually a really nice language.\n\nAlso, last but not least, Ace has a real template inheritance. Layouts are for kids, real men use template inheritance! What's the advantage? It's incredibly flexible.\n\nCheck [Ace: Static Sites Generator](http://blog.101ideas.cz/posts/ace-static-site-generator.html) for more information or you can take a look at the [source](https://github.com/botanicus/blog.101ideas.cz) of [the Ace authors blog](http://blog.101ideas.cz) to have something to play with!",
    "bodyHtml": "<p>Ace is a static page generator like <a href=\"http://nanoc.stoneship.org\">Nanoc</a>, <a href=\"https://github.com/mojombo/jekyll\">Jekyll</a> or <a href=\"http://webby.rubyforge.org/tutorial\">Webby</a>. How is it different? Well, it's better :) ! If you need to generate a lot of pages on the fly, Nanoc is a hassle. It provides helpers, but helpers are – let's face it – programming style we used to use years back when we yet believed that PHP is actually a really nice language.</p>\n<p>Also, last but not least, Ace has a real template inheritance. Layouts are for kids, real men use template inheritance! What's the advantage? It's incredibly flexible.</p>\n<p>Check <a href=\"http://blog.101ideas.cz/posts/ace-static-site-generator.html\">Ace: Static Sites Generator</a> for more information or you can take a look at the <a href=\"https://github.com/botanicus/blog.101ideas.cz\">source</a> of <a href=\"http://blog.101ideas.cz\">the Ace authors blog</a> to have something to play with!</p>\n"
  },
  {
    "title": "Acrylamid",
    "repo": "posativ/acrylamid",
    "homepage": "http://posativ.org/acrylamid/",
    "language": ["Python"],
    "license": ["BSD 2-Clause"],
    "templates": ["Jinja", "Mako"],
    "description": "Static blog or site generator",
    "bodyContent": "### Why use acrylamid?\n\n1. it is really fast due incremental builds\n1.  support for Jinja2 and Mako templates\n1.  many Markdown extensions and custom reStructuredText directives\n1.  MathML, enhanced typography and hyphenation using soft-hyphens\n\nOh, and it can also generate a static blog with articles, static pages, tags, RSS/Atom feeds (also per tag), article listing and a sitemap.\n\n### Overview\n\nWith Acrylamid you can write your weblog entries with your editor of choice in Markdown, reStructuredText or textile. With several content filters you can pimp your HTML (typography, math, hyphenation). Acrylamid provides a very sophisticated CLI and integrates perfectly with any DVCes. It generates completely static HTML you can host everywhere.\n\n### Why the name “Acrylamid”?\n\nI'm studying bioinformatics and I was experimenting with Acrylamide at this time. I'm really bad at naming. If you have a better name, please tell me! Two requirements: reasonably speakable and tab-completion after 3 characters.",
    "bodyHtml": "<h3>Why use acrylamid?</h3>\n<ol>\n<li>it is really fast due incremental builds</li>\n<li>support for Jinja2 and Mako templates</li>\n<li>many Markdown extensions and custom reStructuredText directives</li>\n<li>MathML, enhanced typography and hyphenation using soft-hyphens</li>\n</ol>\n<p>Oh, and it can also generate a static blog with articles, static pages, tags, RSS/Atom feeds (also per tag), article listing and a sitemap.</p>\n<h3>Overview</h3>\n<p>With Acrylamid you can write your weblog entries with your editor of choice in Markdown, reStructuredText or textile. With several content filters you can pimp your HTML (typography, math, hyphenation). Acrylamid provides a very sophisticated CLI and integrates perfectly with any DVCes. It generates completely static HTML you can host everywhere.</p>\n<h3>Why the name “Acrylamid”?</h3>\n<p>I'm studying bioinformatics and I was experimenting with Acrylamide at this time. I'm really bad at naming. If you have a better name, please tell me! Two requirements: reasonably speakable and tab-completion after 3 characters.</p>\n"
  },
  {
    "title": "adm-dev-kit",
    "repo": "iamfrntdv/adm-dev-kit",
    "homepage": "https://github.com/iamfrntdv/adm-dev-kit",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Pug"],
    "description": "ADM-DEV-KIT is static web server and build tool built with plugins and tools like Node.js, JSPM, Express.js, Browser-Sync, Gulp.js, PostHTML, PostCSS and others.",
    "bodyContent": "## Features\n**Main features are:**\n- component driven development;\n- not a SPA (single page application);\n- no extra configuration required, works out of box;\n- js and css per page, no global files for entire project; \n- server and build environment.\n\n**Development features:**\n- server;\n- basic routes;\n- pug as template engine, markdown also supported;\n- posthtml for validating html;\n- jspm as third party js package manager, also gives ability to use es6;\n- postcss as css pre/post-processor;\n- browser-sync for browser reloading;\n- my-ip-ui for quick access to project on other devices;\n- linters for js and css, there is also pre-commit hook for linting.\n\n**Build features:**\n- automated gulp tasks, no need to configure. gulp tasks help to make project production ready; \n- lint tasks\n- every project’s page has it’s own html, js and css files.",
    "bodyHtml": "<h2>Features</h2>\n<p><strong>Main features are:</strong></p>\n<ul>\n<li>component driven development;</li>\n<li>not a SPA (single page application);</li>\n<li>no extra configuration required, works out of box;</li>\n<li>js and css per page, no global files for entire project;</li>\n<li>server and build environment.</li>\n</ul>\n<p><strong>Development features:</strong></p>\n<ul>\n<li>server;</li>\n<li>basic routes;</li>\n<li>pug as template engine, markdown also supported;</li>\n<li>posthtml for validating html;</li>\n<li>jspm as third party js package manager, also gives ability to use es6;</li>\n<li>postcss as css pre/post-processor;</li>\n<li>browser-sync for browser reloading;</li>\n<li>my-ip-ui for quick access to project on other devices;</li>\n<li>linters for js and css, there is also pre-commit hook for linting.</li>\n</ul>\n<p><strong>Build features:</strong></p>\n<ul>\n<li>automated gulp tasks, no need to configure. gulp tasks help to make project production ready;</li>\n<li>lint tasks</li>\n<li>every project’s page has it’s own html, js and css files.</li>\n</ul>\n"
  },
  {
    "title": "Almace Scaffolding",
    "repo": "sparanoid/almace-scaffolding",
    "homepage": "https://sparanoid.com/lab/amsf/",
    "language": ["Ruby", "JavaScript"],
    "license": ["MIT"],
    "templates": ["Liquid"],
    "description": "Super-fast Jekyll framework.",
    "bodyContent": "AMSF, a.k.a. Almace Scaffolding, is a super-fast Jekyll framework, supports Service Worker, live reloading (Browsersync), Less, HTML minification, inlined stylesheets and more.\n\n### Features\n\n- Theme switching, you can switch themes with just one command\n- A basic, fully configured Jekyll setup with well-defined Atom feed and sitemap\n- Almace Scaffolding ships a sleek responsive theme Curtana, a variant of sparanoid.com, looking great on any modern browsers\n- Every minified page generates only one HTTP request\n- Tons of configurable settings for your posts and site customization\n- Service Worker support for lightning fast experience\n- Built with Grunt.js for easy development\n- Travis support",
    "bodyHtml": "<p>AMSF, a.k.a. Almace Scaffolding, is a super-fast Jekyll framework, supports Service Worker, live reloading (Browsersync), Less, HTML minification, inlined stylesheets and more.</p>\n<h3>Features</h3>\n<ul>\n<li>Theme switching, you can switch themes with just one command</li>\n<li>A basic, fully configured Jekyll setup with well-defined Atom feed and sitemap</li>\n<li>Almace Scaffolding ships a sleek responsive theme Curtana, a variant of sparanoid.com, looking great on any modern browsers</li>\n<li>Every minified page generates only one HTTP request</li>\n<li>Tons of configurable settings for your posts and site customization</li>\n<li>Service Worker support for lightning fast experience</li>\n<li>Built with Grunt.js for easy development</li>\n<li>Travis support</li>\n</ul>\n"
  },
  {
    "title": "Anodize",
    "repo": "sidmani/anodize",
    "homepage": "https://github.com/sidmani/anodize",
    "language": ["JavaScript"],
    "license": ["GNU AGPL v3.0"],
    "templates": ["Liquid"],
    "description": "Generate modern pages from minimal source files.",
    "bodyContent": "Anodize exists because I was too lazy to learn how to use Jekyll. Its continuing mission: to boldly generate functional, SE-optimized websites from as little source data as possible.\n\nAnodize currently powers Sid Mani's blog at https://www.sidmani.com.\n\nYou can get anodize as a command-line tool on [npm](https://www.npmjs.com/package/anodize):  \n`$ npm install -g anodize`  \n`$ anodize init`",
    "bodyHtml": "<p>Anodize exists because I was too lazy to learn how to use Jekyll. Its continuing mission: to boldly generate functional, SE-optimized websites from as little source data as possible.</p>\n<p>Anodize currently powers Sid Mani's blog at https://www.sidmani.com.</p>\n<p>You can get anodize as a command-line tool on <a href=\"https://www.npmjs.com/package/anodize\">npm</a>:<br>\n<code>$ npm install -g anodize</code><br>\n<code>$ anodize init</code></p>\n"
  },
  {
    "title": "Antwar",
    "repo": "antwarjs/antwar",
    "homepage": "https://antwar.js.org/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["React"],
    "description": "A static site generator using React and webpack.",
    "bodyContent": "#### What?\n\nAntwar is a blog aware static site engine built with React and Webpack. It's fast, extensible and friendly.\n\n#### Why?\n\nThe world needed a site engine that was easy to extend and a pleasure to work with.",
    "bodyHtml": "<h4>What?</h4>\n<p>Antwar is a blog aware static site engine built with React and Webpack. It's fast, extensible and friendly.</p>\n<h4>Why?</h4>\n<p>The world needed a site engine that was easy to extend and a pleasure to work with.</p>\n"
  },
  {
    "title": "Asimov",
    "repo": "adamrenklint/asimov-static",
    "homepage": "http://www.asimovjs.org/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "Static site generator, powered by asimov.js and asimov-server.",
    "bodyContent": "Static site generator for asimov.js and asimov-server\n\nasimov.js is at its core only two simple things: a command line interface that loads and executes command scripts in your project and node_modules folder, and a plugin interface for adding initializers and extend the app lifecycle.\n\nOn it's own, asimov.js doesn't really do much - it leaves all the heavy lifting to plugins. The two most basic ones are asimov-server and asimov-static. Together you get an awesome static site generator with extendable, chained processing and a high-performance clustered server, with express-compatible middleware.\n\nOr you roll your own plugin in a just a few seconds.",
    "bodyHtml": "<p>Static site generator for asimov.js and asimov-server</p>\n<p>asimov.js is at its core only two simple things: a command line interface that loads and executes command scripts in your project and node_modules folder, and a plugin interface for adding initializers and extend the app lifecycle.</p>\n<p>On it's own, asimov.js doesn't really do much - it leaves all the heavy lifting to plugins. The two most basic ones are asimov-server and asimov-static. Together you get an awesome static site generator with extendable, chained processing and a high-performance clustered server, with express-compatible middleware.</p>\n<p>Or you roll your own plugin in a just a few seconds.</p>\n"
  },
  {
    "title": "Assemble",
    "repo": "assemble/assemble",
    "homepage": "http://assemble.io/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "Static site generator for Grunt.js, Yeoman and Node.js",
    "bodyContent": "Static site generator for Grunt.js, Yeoman and Node.js. Used by Zurb Foundation, Zurb Ink, H5BP/Effeckt, Less.js / lesscss.org, Topcoat, Web Experience Toolkit, and hundreds of other projects to build sites, themes, components, documentation, blogs and gh-pages.\n\n### Why use Assemble?\n\n1. Most popular site generator for Grunt.js and Yeoman. Assemble is used to build hundreds of web projects, ranging in size from a single page to 14,000 pages (that we're aware of!). [Let us know if you use Assemble](https://github.com/assemble/assemble/issues/300).\n1. Allows you to carve your HTML up into reusable fragments: partials, includes, sections, snippets... Whatever you prefer to call them, Assemble does that.\n1. Optionally use `layouts` to wrap your pages with commonly used elements and content.\n1. \"Pages\" can either be defined as HTML/templates, JSON or YAML, or directly inside the Gruntfile.\n1. It's awesome. Lol just kidding. But seriously, Assemble... is... awesome! and it's fun to use.\n\n...and of course, we use Assemble to build the project's own documentation [http://assemble.io](http://assemble.io):\n\n**For more:** hear Jon Schlinkert and Brian Woodward discuss Assemble on **Episode 98 of the [Javascript Jabber Podcast](http://javascriptjabber.com/098-jsj-assemble-io-with-brian-woodward-and-jon-schlinkert/)**.\n\n![image](https://f.cloud.github.com/assets/383994/1463257/f031bcfe-4525-11e3-9a03-89a17eee7518.png)",
    "bodyHtml": "<p>Static site generator for Grunt.js, Yeoman and Node.js. Used by Zurb Foundation, Zurb Ink, H5BP/Effeckt, Less.js / lesscss.org, Topcoat, Web Experience Toolkit, and hundreds of other projects to build sites, themes, components, documentation, blogs and gh-pages.</p>\n<h3>Why use Assemble?</h3>\n<ol>\n<li>Most popular site generator for Grunt.js and Yeoman. Assemble is used to build hundreds of web projects, ranging in size from a single page to 14,000 pages (that we're aware of!). <a href=\"https://github.com/assemble/assemble/issues/300\">Let us know if you use Assemble</a>.</li>\n<li>Allows you to carve your HTML up into reusable fragments: partials, includes, sections, snippets... Whatever you prefer to call them, Assemble does that.</li>\n<li>Optionally use <code>layouts</code> to wrap your pages with commonly used elements and content.</li>\n<li>&quot;Pages&quot; can either be defined as HTML/templates, JSON or YAML, or directly inside the Gruntfile.</li>\n<li>It's awesome. Lol just kidding. But seriously, Assemble... is... awesome! and it's fun to use.</li>\n</ol>\n<p>...and of course, we use Assemble to build the project's own documentation <a href=\"http://assemble.io\">http://assemble.io</a>:</p>\n<p><strong>For more:</strong> hear Jon Schlinkert and Brian Woodward discuss Assemble on <strong>Episode 98 of the <a href=\"http://javascriptjabber.com/098-jsj-assemble-io-with-brian-woodward-and-jon-schlinkert/\">Javascript Jabber Podcast</a></strong>.</p>\n<p><img src=\"https://f.cloud.github.com/assets/383994/1463257/f031bcfe-4525-11e3-9a03-89a17eee7518.png\" alt=\"image\"></p>\n"
  },
  {
    "title": "Awestruct",
    "repo": "awestruct/awestruct",
    "homepage": "http://awestruct.org/",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Haml"],
    "description": "A static site-baking tool",
    "bodyContent": "Awestruct is a framework for creating static HTML sites, inspired by the Jekyll utility in the same genre.\n\nAwestruct makes it trivially easy to create non-trivial static websites using tools like Compass, Markdown, and Haml, as well as common frameworks like Twitter Bootstrap and Blueprint.\n\nThe core concept of Awestruct is that of structures, specifically Ruby `OpenStruct` structures. The struct aspect allows arbitrary, schema-less data to be associated with a specific page or the entire site.\n\nSite-specific data is automatically loaded from simple YAML files, while data can be provided on pages using a front-matter prolog.",
    "bodyHtml": "<p>Awestruct is a framework for creating static HTML sites, inspired by the Jekyll utility in the same genre.</p>\n<p>Awestruct makes it trivially easy to create non-trivial static websites using tools like Compass, Markdown, and Haml, as well as common frameworks like Twitter Bootstrap and Blueprint.</p>\n<p>The core concept of Awestruct is that of structures, specifically Ruby <code>OpenStruct</code> structures. The struct aspect allows arbitrary, schema-less data to be associated with a specific page or the entire site.</p>\n<p>Site-specific data is automatically loaded from simple YAML files, while data can be provided on pages using a front-matter prolog.</p>\n"
  },
  {
    "title": "Bake",
    "repo": "felipetavares/bake",
    "homepage": "http://ctrl-c.club/~philips/90s/",
    "language": ["C++"],
    "license": ["WTFPL"],
    "templates": ["HTML"],
    "description": "The blogging tool for minimalists & make lovers.",
    "bodyContent": "Bake is a tool for generating blogs as if you were using make.\nCreate a template, a bakefile and your markdown posts and you are ready to bake!\n\n### Philosophy\n\nTo be as simple as:\n\n\tvim post.markdown\n\tbake",
    "bodyHtml": "<p>Bake is a tool for generating blogs as if you were using make.\nCreate a template, a bakefile and your markdown posts and you are ready to bake!</p>\n<h3>Philosophy</h3>\n<p>To be as simple as:</p>\n<pre><code>vim post.markdown\nbake</code></pre>\n"
  },
  {
    "title": "BakeIt",
    "repo": "lumarama/bakeit",
    "homepage": "https://www.npmjs.com/package/bakeit",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars", "Mustache"],
    "description": "Static site generator with build-in store/business locator map template.",
    "bodyContent": "BakeIt allows you to generate website from Markdown (.md) source files. It uses {{ handlebars }} or {{ mustache }} as templating language.\nComes with template that allows to build sites with store/business locator map.",
    "bodyHtml": "<p>BakeIt allows you to generate website from Markdown (.md) source files. It uses {{ handlebars }} or {{ mustache }} as templating language.\nComes with template that allows to build sites with store/business locator map.</p>\n"
  },
  {
    "title": "Misakai Baker",
    "repo": "Kelindar/misakai-baker",
    "homepage": "http://baker.misakai.com",
    "language": [".Net"],
    "license": ["Apache 2.0"],
    "templates": ["Razor"],
    "description": "Slice and Optimize with Razor and Markdown",
    "bodyContent": "The aim of this project is to write a flexible and extensible static website generator for C# / .Net people. Misakai Baker uses a combination of Markdown and Yaml headers and Razor templates to produce clean code separation.\nCurrent binaries can be found here: [misakai-baker.zip](http://pub.misakai.com/Baker/bin/misakai-baker.zip)\n\n\nFeatures\n========\n* Combine Markdown + Razor view engine, layouts, sections and helpers\n* Jekyll-like headers for the model\n* Various optimizations: HTML minifier, CSS minifier, JavaScript minifier and PNG optimizer\n* Pipeline model for processors and various combinations\n* Yaml configuration file\n* Integrated web server for testing\n* File watcher and live reload for development cycle updates",
    "bodyHtml": "<p>The aim of this project is to write a flexible and extensible static website generator for C# / .Net people. Misakai Baker uses a combination of Markdown and Yaml headers and Razor templates to produce clean code separation.\nCurrent binaries can be found here: <a href=\"http://pub.misakai.com/Baker/bin/misakai-baker.zip\">misakai-baker.zip</a></p>\n<h1>Features</h1>\n<ul>\n<li>Combine Markdown + Razor view engine, layouts, sections and helpers</li>\n<li>Jekyll-like headers for the model</li>\n<li>Various optimizations: HTML minifier, CSS minifier, JavaScript minifier and PNG optimizer</li>\n<li>Pipeline model for processors and various combinations</li>\n<li>Yaml configuration file</li>\n<li>Integrated web server for testing</li>\n<li>File watcher and live reload for development cycle updates</li>\n</ul>\n"
  },
  {
    "title": "Bang",
    "repo": "squdle/Bang",
    "homepage": "https://github.com/squdle/Bang",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Custom"],
    "description": "Quirky text processor and static website generator.",
    "bodyContent": "!!Bang!! is a text processor and static website generator that lets you shoot holes through text files!\n\nBang comprises of an extremely minimalist markup language and a quirky scripting language that can be extended with Python.\nThe Bang processor itself is a short Python script that interprets Bang scripts and processes text files.\nThis allows for variables in text files, as well as encouraging very modular code.\nThe markup language allows you to shoot holes in text files with a double Bang enclosed keyword (eg: !!keyword!!).\nKeywords are then then filled with a word, line of text, text file, or Python function return value.\nBang scripts define the values of keywords, which files will be processed and the order they will be processed in.",
    "bodyHtml": "<p>!!Bang!! is a text processor and static website generator that lets you shoot holes through text files!</p>\n<p>Bang comprises of an extremely minimalist markup language and a quirky scripting language that can be extended with Python.\nThe Bang processor itself is a short Python script that interprets Bang scripts and processes text files.\nThis allows for variables in text files, as well as encouraging very modular code.\nThe markup language allows you to shoot holes in text files with a double Bang enclosed keyword (eg: !!keyword!!).\nKeywords are then then filled with a word, line of text, text file, or Python function return value.\nBang scripts define the values of keywords, which files will be processed and the order they will be processed in.</p>\n"
  },
  {
    "title": "bashblog",
    "repo": "cfenollosa/bashblog",
    "homepage": "https://github.com/cfenollosa/bashblog",
    "language": ["Bash"],
    "license": ["GNU GPL v3.0"],
    "templates": ["None"],
    "description": "A single Bash script to create blogs.",
    "bodyContent": "Bashblog was created out of the necessity of a very, very simple way to post\nentries to a blog by using a public folder [on my server], without any\nspecial requirements and dependencies. Works on GNU/Linux, OSX and BSD.\n\nHow simple? Just type './bb.sh post' and start writing your blogpost.\n\nFeatures:\n\n- Ultra simple usage: Just type a post with your favorite editor and the\n  script does the rest. No templating.\n- No installation required. Download bb.sh and start blogging.\n- Zero dependencies. It runs just on base utils (date, basename, grep, sed,\n  head, etc)\n- GNU/Linux, BSD and OSX compatible out of the box, no need for\n  GNU coreutils on a Mac. It does some magic to autodetect which command\n  switches it needs to run depending on your system.\n- All content is static. You only need shell access to a machine with a\n  public web folder. Tip: advanced users could mount a remote public folder\n  via ftpfs and run this script locally\n- Allows drafts, includes a simple but clean stylesheet, generates the RSS\n  file automatically.\n- Support for tags/categories\n- Support for Markdown, Disqus, Twitter, Feedburner, Google Analytics.\n- The project is still maintained as of 2016. Bugs are fixed, and new\n  features are considered (see \"Contributing\")\n- Everything stored in a single ~1k lines bash script, how cool is that?! ;)",
    "bodyHtml": "<p>Bashblog was created out of the necessity of a very, very simple way to post\nentries to a blog by using a public folder [on my server], without any\nspecial requirements and dependencies. Works on GNU/Linux, OSX and BSD.</p>\n<p>How simple? Just type './bb.sh post' and start writing your blogpost.</p>\n<p>Features:</p>\n<ul>\n<li>Ultra simple usage: Just type a post with your favorite editor and the\nscript does the rest. No templating.</li>\n<li>No installation required. Download bb.sh and start blogging.</li>\n<li>Zero dependencies. It runs just on base utils (date, basename, grep, sed,\nhead, etc)</li>\n<li>GNU/Linux, BSD and OSX compatible out of the box, no need for\nGNU coreutils on a Mac. It does some magic to autodetect which command\nswitches it needs to run depending on your system.</li>\n<li>All content is static. You only need shell access to a machine with a\npublic web folder. Tip: advanced users could mount a remote public folder\nvia ftpfs and run this script locally</li>\n<li>Allows drafts, includes a simple but clean stylesheet, generates the RSS\nfile automatically.</li>\n<li>Support for tags/categories</li>\n<li>Support for Markdown, Disqus, Twitter, Feedburner, Google Analytics.</li>\n<li>The project is still maintained as of 2016. Bugs are fixed, and new\nfeatures are considered (see &quot;Contributing&quot;)</li>\n<li>Everything stored in a single ~1k lines bash script, how cool is that?! ;)</li>\n</ul>\n"
  },
  {
    "title": "Blackhole",
    "repo": "BarryMode/grav-plugin-blackhole",
    "homepage": "https://github.com/BarryMode/grav-plugin-blackhole",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig"],
    "description": "Static site generator for Grav CMS",
    "bodyContent": "Static site generator for Grav CMS.\n\n### Why use Blackhole?\n\n1. Blackhole is incredibly powerful because you can use Grav as a backend and blackhole to deploy the generated pages routinely.\n1. Benefit from Grav (a dynamic flat-file cms) and the speed and security of a static site, without the manual-ness of a traditional SSG.\n1. Blackhole overcomes the perceived performance limitations of a scaled up live Grav implementation. Tested on sites with more than 20,000 pages.",
    "bodyHtml": "<p>Static site generator for Grav CMS.</p>\n<h3>Why use Blackhole?</h3>\n<ol>\n<li>Blackhole is incredibly powerful because you can use Grav as a backend and blackhole to deploy the generated pages routinely.</li>\n<li>Benefit from Grav (a dynamic flat-file cms) and the speed and security of a static site, without the manual-ness of a traditional SSG.</li>\n<li>Blackhole overcomes the perceived performance limitations of a scaled up live Grav implementation. Tested on sites with more than 20,000 pages.</li>\n</ol>\n"
  },
  {
    "title": "Blacksmith",
    "repo": "flatiron/blacksmith",
    "homepage": "https://github.com/flatiron/blacksmith",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Plates"],
    "description": "A generic static site generator built using flatiron, plates, and marked.",
    "bodyContent": "A generic static site generator built using `flatiron`, `plates`, and `marked`.\n\nBlacksmith sites have a specific directory structure for storing the various parts of your site: settings, layout, partials, pages, and content. Content exists in two forms:\n\n* Markdown files that `blacksmith` will render.\n* Supporting content such as css and images.\n\nAll content will be rendered into `/public`. To render a blacksmith site:\n\n### Components\n\nEach `blacksmith` site defines a hierarchical set of components which can be composed **to create any type of site you want!** A couple of examples:\n\n* A Blog\n* A Documentation Site\n* A Custom Splash Page or Content Site",
    "bodyHtml": "<p>A generic static site generator built using <code>flatiron</code>, <code>plates</code>, and <code>marked</code>.</p>\n<p>Blacksmith sites have a specific directory structure for storing the various parts of your site: settings, layout, partials, pages, and content. Content exists in two forms:</p>\n<ul>\n<li>Markdown files that <code>blacksmith</code> will render.</li>\n<li>Supporting content such as css and images.</li>\n</ul>\n<p>All content will be rendered into <code>/public</code>. To render a blacksmith site:</p>\n<h3>Components</h3>\n<p>Each <code>blacksmith</code> site defines a hierarchical set of components which can be composed <strong>to create any type of site you want!</strong> A couple of examples:</p>\n<ul>\n<li>A Blog</li>\n<li>A Documentation Site</li>\n<li>A Custom Splash Page or Content Site</li>\n</ul>\n"
  },
  {
    "title": "Blended",
    "repo": "BlendedSiteGenerator/Blended",
    "homepage": "http://jmroper.com/blended/",
    "language": ["Python"],
    "license": ["GNU GPL v3.0"],
    "templates": ["HTML"],
    "description": "The Most Versatile Static HTML Site Generator",
    "bodyContent": "Blended is a fast, reliable, open-source static HTML site generator that strives to be easy to use, simple to build with, and beautiful to look at. Powered by Python 2 or 3, it includes many tools that help even the newest users get started building a website quickly. On top of everything, Blended is released under the GPL 3.0 open-source license!\n\nBlended is the most versatile static site generator ever! It's multiple file format support (shown below), the fact that it exports human-readable files, and the ability to extend the system using Python plugins makes it the ideal system for creating all different kinds of sites.\n\nBlended's unique system allows you to write your content in eleven different markup formats at once! This allows you to use whatever markup you want to create work that looks just as good as if it were made in any other way. Blended supports building HTML, Markdown, Textile, reStructuredText, Jade, Docx, and Plain Text to HTML as well as Sass, Less, and Stylus to CSS and CoffeeScript to JavaScript.\n\nOnce you have created your website, Blended enables you to upload the entire thing to your server through FTP with a single command. Also, a tool is included to zip up the build folder so that it is ready to distribute. Sites built with Blended work beautifully with GitHub pages and other such hosting platforms.\n\nBlended supports the easy import of posts and website information from WordPress and Blogger. With one simple command, you can convert everything in less than a second.",
    "bodyHtml": "<p>Blended is a fast, reliable, open-source static HTML site generator that strives to be easy to use, simple to build with, and beautiful to look at. Powered by Python 2 or 3, it includes many tools that help even the newest users get started building a website quickly. On top of everything, Blended is released under the GPL 3.0 open-source license!</p>\n<p>Blended is the most versatile static site generator ever! It's multiple file format support (shown below), the fact that it exports human-readable files, and the ability to extend the system using Python plugins makes it the ideal system for creating all different kinds of sites.</p>\n<p>Blended's unique system allows you to write your content in eleven different markup formats at once! This allows you to use whatever markup you want to create work that looks just as good as if it were made in any other way. Blended supports building HTML, Markdown, Textile, reStructuredText, Jade, Docx, and Plain Text to HTML as well as Sass, Less, and Stylus to CSS and CoffeeScript to JavaScript.</p>\n<p>Once you have created your website, Blended enables you to upload the entire thing to your server through FTP with a single command. Also, a tool is included to zip up the build folder so that it is ready to distribute. Sites built with Blended work beautifully with GitHub pages and other such hosting platforms.</p>\n<p>Blended supports the easy import of posts and website information from WordPress and Blogger. With one simple command, you can convert everything in less than a second.</p>\n"
  },
  {
    "title": "Blo",
    "repo": "savuir/blo",
    "homepage": "https://github.com/savuir/blo",
    "language": ["Python"],
    "license": ["BSD 3-Clause"],
    "templates": ["Jinja2"],
    "description": "Static site generator for easy personal blogging",
    "bodyContent": "**Blo** (*blog + bro*) - yet another static site generator for personal blogs. The aim is to make a really easy tool for creating new notes and customizing your site. Do less actions and have much opportunity to make a unique site.\n\n### Features\n * Comfortable cli control.\n * Easy config edit in JSON files.\n * Drafts templates: default content for new notes, useful for planning new posts.\n * Page templates: easy HTML/Jinja2 customize and improve.\n * SEO friendly (as I could make it).\n * Microformats for better snippets in Google/Bing/etc.\n * Markdown with use of meta-tags to customize pages more with different data.\n * Code highlight with Pygments.\n * RSS feed generation",
    "bodyHtml": "<p><strong>Blo</strong> (<em>blog + bro</em>) - yet another static site generator for personal blogs. The aim is to make a really easy tool for creating new notes and customizing your site. Do less actions and have much opportunity to make a unique site.</p>\n<h3>Features</h3>\n<ul>\n<li>Comfortable cli control.</li>\n<li>Easy config edit in JSON files.</li>\n<li>Drafts templates: default content for new notes, useful for planning new posts.</li>\n<li>Page templates: easy HTML/Jinja2 customize and improve.</li>\n<li>SEO friendly (as I could make it).</li>\n<li>Microformats for better snippets in Google/Bing/etc.</li>\n<li>Markdown with use of meta-tags to customize pages more with different data.</li>\n<li>Code highlight with Pygments.</li>\n<li>RSS feed generation</li>\n</ul>\n"
  },
  {
    "title": "blog.sh",
    "repo": "thalios1973/blog.sh",
    "homepage": "https://github.com/thalios1973/blog.sh",
    "language": ["Bash"],
    "license": ["MIT"],
    "templates": ["Custom"],
    "description": "A simple static blog generation tool in bash that supports markdown.",
    "bodyContent": "blog.sh is a relatively simple static blog generation tool written in bash. It supports markdown (via pandoc, but other converters could be used) and a very basic templating system. It is designed for simplicity and easy of hacking.\n\n## Features\n\n- Create new\n- Save to draft\n- Edit existing or draft\n- Complete rebuild of site (good for updating template)\n- Basic templating\n- RSS 2.0\n\n## Planned (aka things I haven't found time for)\n\n- Default .config file\n- Default basic template (one doesn't exist)\n- Static page support\n- Document classes and ids available for CSS\n- Delete post\n\nblog.sh was heavily inspired by Carlos Fenollosa's [bashblog](https://github.com/cfenollosa/bashblog).",
    "bodyHtml": "<p>blog.sh is a relatively simple static blog generation tool written in bash. It supports markdown (via pandoc, but other converters could be used) and a very basic templating system. It is designed for simplicity and easy of hacking.</p>\n<h2>Features</h2>\n<ul>\n<li>Create new</li>\n<li>Save to draft</li>\n<li>Edit existing or draft</li>\n<li>Complete rebuild of site (good for updating template)</li>\n<li>Basic templating</li>\n<li>RSS 2.0</li>\n</ul>\n<h2>Planned (aka things I haven't found time for)</h2>\n<ul>\n<li>Default .config file</li>\n<li>Default basic template (one doesn't exist)</li>\n<li>Static page support</li>\n<li>Document classes and ids available for CSS</li>\n<li>Delete post</li>\n</ul>\n<p>blog.sh was heavily inspired by Carlos Fenollosa's <a href=\"https://github.com/cfenollosa/bashblog\">bashblog</a>.</p>\n"
  },
  {
    "title": "blogc",
    "repo": "blogc/blogc",
    "homepage": "https://blogc.rgm.io/",
    "language": ["C"],
    "license": ["BSD 3-Clause"],
    "templates": ["Custom"],
    "description": "A blog compiler.",
    "startertemplaterepo": "blogc/blogc-netlify",
    "bodyContent": "blogc is a blog compiler. It converts source files and templates into blog/website resources. It is designed to be used with ``make`` or any other similar build tool. It is also stateless and idempotent, no state is shared between blogc binary calls.",
    "bodyHtml": "<p>blogc is a blog compiler. It converts source files and templates into blog/website resources. It is designed to be used with <code>make</code> or any other similar build tool. It is also stateless and idempotent, no state is shared between blogc binary calls.</p>\n"
  },
  {
    "title": "blogdown",
    "repo": "codejamninja/blogdown",
    "homepage": "https://blogdown.info",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Pug"],
    "description": "A back-end agnostic, zero compilation, markdown blogging platform",
    "bodyContent": "### [Download](https://github.com/thingdown/blogdown/releases/download/v0.1.9/blogdown.zip)\n### [Demo](https://thingdown.github.io/blogdown)\n\n\n## Features\n\n![BlogDown Features](https://drive.google.com/uc?export=view&id=151E88i6kqKLijZd0zSTKbDC20WoQoV4DAA)\n\n\n## Installing\n\n1. Unzip the contents from [HERE](https://github.com/thingdown/blogdown/releases/download/v0.1.9/blogdown.zip) on your server\n\n2. There is no step two. That's how easy it is to install BlogDown.\n\n### Try locally\n\n```sh\nmkdir blogdown && cd blogdown\ncurl -OL https://github.com/thingdown/blogdown/releases/download/v0.1.9/blogdown.zip\nunzip blogdown.zip && rm blogdown.zip\npython -m SimpleHTTPServer\n```\n\nGo to [http://localhost:8000](http://localhost:8000)\n\n### Docker\n\n```sh\ndocker run --name some-blogdown -v /volumes/blogdown-content:/app/content -p 8081:8081 thingdown/blogdown:latest\n```\n\nGo to [http://localhost:8081](http://localhost:8081)\n\n### Build from source\n\n```sh\ngit clone https://github.com/thingdown/blogdown.git\nyarn install # or `npm intall`\nbower install\nyarn start\n```",
    "bodyHtml": "<h3><a href=\"https://github.com/thingdown/blogdown/releases/download/v0.1.9/blogdown.zip\">Download</a></h3>\n<h3><a href=\"https://thingdown.github.io/blogdown\">Demo</a></h3>\n<h2>Features</h2>\n<p><img src=\"https://drive.google.com/uc?export=view&amp;id=151E88i6kqKLijZd0zSTKbDC20WoQoV4DAA\" alt=\"BlogDown Features\"></p>\n<h2>Installing</h2>\n<ol>\n<li>\n<p>Unzip the contents from <a href=\"https://github.com/thingdown/blogdown/releases/download/v0.1.9/blogdown.zip\">HERE</a> on your server</p>\n</li>\n<li>\n<p>There is no step two. That's how easy it is to install BlogDown.</p>\n</li>\n</ol>\n<h3>Try locally</h3>\n<pre><code class=\"hljs\">mkdir blogdown &amp;&amp; <span class=\"hljs-built_in\">cd</span> blogdown\ncurl -OL https://github.com/thingdown/blogdown/releases/download/v0.1.9/blogdown.zip\nunzip blogdown.zip &amp;&amp; rm blogdown.zip\npython -m SimpleHTTPServer</code></pre><p>Go to <a href=\"http://localhost:8000\">http://localhost:8000</a></p>\n<h3>Docker</h3>\n<pre><code class=\"hljs\">docker run --name some-blogdown -v /volumes/blogdown-content:/app/content -p 8081:8081 thingdown/blogdown:latest</code></pre><p>Go to <a href=\"http://localhost:8081\">http://localhost:8081</a></p>\n<h3>Build from source</h3>\n<pre><code class=\"hljs\">git <span class=\"hljs-built_in\">clone</span> https://github.com/thingdown/blogdown.git\nyarn install <span class=\"hljs-comment\"># or `npm intall`</span>\nbower install\nyarn start</code></pre>"
  },
  {
    "title": "Blogo",
    "repo": "kevin14/blogo",
    "homepage": "https://github.com/kevin14/blogo",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Jade"],
    "description": "Blogo is a blog generator based on JS and Jade",
    "bodyContent": "Blogo is a blog generator based on JS and Jade.\n\nYou can develop your own theme.\n\nYou can easily push your blog to github.\n\nBlogo will scan your folder only once , then only the modified file will be scaned.\n\nYou can insert a html fragment into md file.\n\nDEMO : [http://kevin14.github.io](http://kevin14.github.io)",
    "bodyHtml": "<p>Blogo is a blog generator based on JS and Jade.</p>\n<p>You can develop your own theme.</p>\n<p>You can easily push your blog to github.</p>\n<p>Blogo will scan your folder only once , then only the modified file will be scaned.</p>\n<p>You can insert a html fragment into md file.</p>\n<p>DEMO : <a href=\"http://kevin14.github.io\">http://kevin14.github.io</a></p>\n"
  },
  {
    "title": "Blogofile",
    "repo": "enigmacurry/blogofile",
    "homepage": "http://blogofile.com",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Mako"],
    "description": "A static website compiler and blog engine, written and extended in Python",
    "bodyContent": "Blogofile is a static website compiler, primarily (though not\nexclusively) designed to be a simple blogging engine. It requires no\ndatabase and no special hosting environment. You customize a set of\ntemplates with Mako, create posts in a markup language of your choice\nand Blogofile renders your entire website as static HTML and Atom/RSS\nfeeds which you can then upload to any old web server you like.",
    "bodyHtml": "<p>Blogofile is a static website compiler, primarily (though not\nexclusively) designed to be a simple blogging engine. It requires no\ndatabase and no special hosting environment. You customize a set of\ntemplates with Mako, create posts in a markup language of your choice\nand Blogofile renders your entire website as static HTML and Atom/RSS\nfeeds which you can then upload to any old web server you like.</p>\n"
  },
  {
    "title": "Bolt",
    "repo": "argyleink/bolt",
    "homepage": "http://argyleink.github.io/Bolt",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Jade", "Any JS"],
    "description": "⚡ is a fast, organized, mobile first Grunt seed project for fast static apps.",
    "bodyContent": "### Why use Bolt?\n\n1. Dev builds are extremely legible, source mapped, and ready for debugging with your tools `grunt`\n1. Production builds squish the crap out [images,css,html,js,svg] `grunt --prod`\n1. Dev and Prod builds have their own output directory, they don't share a `dist/` folder\n1. Very fast, [concurrent Grunt builds](https://github.com/argyleink/Bolt/blob/master/tasks/concurrent.coffee), with jit a plugin for really fast watch task running\n1. Concise [Grunt main file](https://github.com/argyleink/Bolt/blob/master/gruntfile.coffee)\n1. [Grunt tasks](https://github.com/argyleink/Bolt/tree/master/tasks) are individual, short, easy as hell to read\n1. [Configuration file](https://github.com/argyleink/Bolt/blob/master/app.coffee) keeps project assets and plugins centralized\n1. Bower libs go straight into jade and stylus for you\n1. [BrowserSync](http://www.browsersync.io) dev server syncs all your clicks, scrolls, and more during development\n1. BrowserSync live reload and hot css pushes for really rad fast front end crafting\n1. BrowserSync Weinre remote inspect built in\n1. Externally accessible server\n1. Proper [Jade inheritance](https://github.com/paulyoung/jade-inheritance) compilation, so 1 file changed doesn't require the whole project to compile\n1. [Auto generated](https://github.com/argyleink/Bolt/blob/master/tasks/manifest.coffee) HTML5 appcache for production builds\n1. Autoprefixed stylus\n1. 2 powerful stylus mixin libraries [Nib](http://nibstyl.us) and [Axis](http://axis.netlify.com) (will never bloat your file with crap you aren't using)\n1. Git tagging and releasing `grunt bump`\n1. Easily create custom [build notifications](https://github.com/argyleink/Bolt/blob/master/tasks/notify.coffee)\n1. Customize your crunched files comment banner\n1. Ready to run custom [shell commands](https://github.com/argyleink/Bolt/blob/master/tasks/shell.coffee)\n1. Concurrent image crunching\n1. [Sublime project file](https://github.com/argyleink/Bolt/blob/master/app.sublime-project) for easy project editing and standards establishment\n1. Grunt [Heroku](https://github.com/argyleink/Bolt/wiki/Deployments) task for easy CI integration `grunt heroku`\n1. [CLI](https://github.com/argyleink/Bolt-cli) for easy setup of new projects `bolt new my_app`\n\n## Goal\nOffer a FAST, Grunt based, rather un-opinionated build system. Use it for whatever. The project seed I've made here is a cache heavy, smart loading, mobile first, front end static site project for ya. It comes with [Jade](http://jade-lang.com/) & [Stylus](http://learnboost.github.io/stylus/) as defaults, but swap it for whatever you want, easily. Or want more than 1 preprocessor, it's ready. At the end of the day, it's [Grunt](http://gruntjs.com/), do whatever you want.\n\nThis project's default setup is for creating static sites to be hosted somewhere on the web. This could be a webview hybrid app, single page app, marketing site, who cares. This tool comes with all the tips, tricks, meta data, and automated tasks that help you build quick and efficient front ends across browsers.",
    "bodyHtml": "<h3>Why use Bolt?</h3>\n<ol>\n<li>Dev builds are extremely legible, source mapped, and ready for debugging with your tools <code>grunt</code></li>\n<li>Production builds squish the crap out [images,css,html,js,svg] <code>grunt --prod</code></li>\n<li>Dev and Prod builds have their own output directory, they don't share a <code>dist/</code> folder</li>\n<li>Very fast, <a href=\"https://github.com/argyleink/Bolt/blob/master/tasks/concurrent.coffee\">concurrent Grunt builds</a>, with jit a plugin for really fast watch task running</li>\n<li>Concise <a href=\"https://github.com/argyleink/Bolt/blob/master/gruntfile.coffee\">Grunt main file</a></li>\n<li><a href=\"https://github.com/argyleink/Bolt/tree/master/tasks\">Grunt tasks</a> are individual, short, easy as hell to read</li>\n<li><a href=\"https://github.com/argyleink/Bolt/blob/master/app.coffee\">Configuration file</a> keeps project assets and plugins centralized</li>\n<li>Bower libs go straight into jade and stylus for you</li>\n<li><a href=\"http://www.browsersync.io\">BrowserSync</a> dev server syncs all your clicks, scrolls, and more during development</li>\n<li>BrowserSync live reload and hot css pushes for really rad fast front end crafting</li>\n<li>BrowserSync Weinre remote inspect built in</li>\n<li>Externally accessible server</li>\n<li>Proper <a href=\"https://github.com/paulyoung/jade-inheritance\">Jade inheritance</a> compilation, so 1 file changed doesn't require the whole project to compile</li>\n<li><a href=\"https://github.com/argyleink/Bolt/blob/master/tasks/manifest.coffee\">Auto generated</a> HTML5 appcache for production builds</li>\n<li>Autoprefixed stylus</li>\n<li>2 powerful stylus mixin libraries <a href=\"http://nibstyl.us\">Nib</a> and <a href=\"http://axis.netlify.com\">Axis</a> (will never bloat your file with crap you aren't using)</li>\n<li>Git tagging and releasing <code>grunt bump</code></li>\n<li>Easily create custom <a href=\"https://github.com/argyleink/Bolt/blob/master/tasks/notify.coffee\">build notifications</a></li>\n<li>Customize your crunched files comment banner</li>\n<li>Ready to run custom <a href=\"https://github.com/argyleink/Bolt/blob/master/tasks/shell.coffee\">shell commands</a></li>\n<li>Concurrent image crunching</li>\n<li><a href=\"https://github.com/argyleink/Bolt/blob/master/app.sublime-project\">Sublime project file</a> for easy project editing and standards establishment</li>\n<li>Grunt <a href=\"https://github.com/argyleink/Bolt/wiki/Deployments\">Heroku</a> task for easy CI integration <code>grunt heroku</code></li>\n<li><a href=\"https://github.com/argyleink/Bolt-cli\">CLI</a> for easy setup of new projects <code>bolt new my_app</code></li>\n</ol>\n<h2>Goal</h2>\n<p>Offer a FAST, Grunt based, rather un-opinionated build system. Use it for whatever. The project seed I've made here is a cache heavy, smart loading, mobile first, front end static site project for ya. It comes with <a href=\"http://jade-lang.com/\">Jade</a> &amp; <a href=\"http://learnboost.github.io/stylus/\">Stylus</a> as defaults, but swap it for whatever you want, easily. Or want more than 1 preprocessor, it's ready. At the end of the day, it's <a href=\"http://gruntjs.com/\">Grunt</a>, do whatever you want.</p>\n<p>This project's default setup is for creating static sites to be hosted somewhere on the web. This could be a webview hybrid app, single page app, marketing site, who cares. This tool comes with all the tips, tricks, meta data, and automated tasks that help you build quick and efficient front ends across browsers.</p>\n"
  },
  {
    "title": "Bookdown (PHP)",
    "repo": "bookdown/Bookdown.Bookdown",
    "homepage": "http://bookdown.io/",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Aura View"],
    "description": "Bookdown generates DocBook-like HTML output using CommonMark and JSON files.",
    "bodyContent": "Bookdown generates [DocBook](http://docbook.org)-like HTML output using [Markdown](http://daringfireball.net/projects/markdown/) and JSON files instead of XML.\n\nBookdown is especially well-suited for publishing project documentation to GitHub Pages.\n\nRead more about it at <http://bookdown.io>.",
    "bodyHtml": "<p>Bookdown generates <a href=\"http://docbook.org\">DocBook</a>-like HTML output using <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a> and JSON files instead of XML.</p>\n<p>Bookdown is especially well-suited for publishing project documentation to GitHub Pages.</p>\n<p>Read more about it at <a href=\"http://bookdown.io\">http://bookdown.io</a>.</p>\n"
  },
  {
    "title": "Bookdown (R)",
    "repo": "rstudio/bookdown",
    "homepage": "https://bookdown.org/",
    "language": ["R"],
    "license": ["GNU GPL v3.0"],
    "templates": ["R", "R Markdown"],
    "description": "An eBook authoring platform that generates GitBook-styled static sites",
    "bodyContent": "Bookdown is an eBook authoring platform for R programmers. It's based on two R packages - `knitr` and `rmarkdown` - along with Pandoc. It's usually invoked from the open-source RStudio IDE.\n\n### Features:\n* Creates a GitBook-like or Bootstrap-themed static website for an eBook\n* Can create PDF eBooks using the full power of LaTeX\n* Can create EPUB eBooks via Pandoc\n* Can insert output from code chunks into output website / eBooks\n\nSample Netlify site: https://www.masteringdfsanalytics.com/",
    "bodyHtml": "<p>Bookdown is an eBook authoring platform for R programmers. It's based on two R packages - <code>knitr</code> and <code>rmarkdown</code> - along with Pandoc. It's usually invoked from the open-source RStudio IDE.</p>\n<h3>Features:</h3>\n<ul>\n<li>Creates a GitBook-like or Bootstrap-themed static website for an eBook</li>\n<li>Can create PDF eBooks using the full power of LaTeX</li>\n<li>Can create EPUB eBooks via Pandoc</li>\n<li>Can insert output from code chunks into output website / eBooks</li>\n</ul>\n<p>Sample Netlify site: https://www.masteringdfsanalytics.com/</p>\n"
  },
  {
    "title": "BootDown",
    "repo": "interstar/bootdown",
    "homepage": "http://project.geekweaver.com/",
    "language": ["Python"],
    "license": ["AGPL v3.0"],
    "templates": ["Markdown"],
    "description": "Extremely simple static sites with Markdown and BootStrap.",
    "bodyContent": "Basically it's a Markdown to HTML processor, pre-packaged with BootStrap Bootswatches. And some extra tricks : \n\n  * A header section that lets you define a menu, footer, projectname, bootswatch, head_extra (extra code to put in page headers)\n  * A \"page-break\" option so that your single .md file becomes a number of HTML pages\n  * A very light-weight markup for defining divs with classes and ids using &lbrack;.CLASSNAME#ID and .&rbrack;\n  * A markup for including CSV files as tables.\n  \nUnlike most static site systems that are built around templating engines, with BootDown you write both your page content, and the structure in a single source file. Using &lbrack;. .&rbrack; for divs. This gives you all the flexibility you need to layout your pages any way you like, within the BootStrap grid.",
    "bodyHtml": "<p>Basically it's a Markdown to HTML processor, pre-packaged with BootStrap Bootswatches. And some extra tricks :</p>\n<ul>\n<li>A header section that lets you define a menu, footer, projectname, bootswatch, head_extra (extra code to put in page headers)</li>\n<li>A &quot;page-break&quot; option so that your single .md file becomes a number of HTML pages</li>\n<li>A very light-weight markup for defining divs with classes and ids using [.CLASSNAME#ID and .]</li>\n<li>A markup for including CSV files as tables.</li>\n</ul>\n<p>Unlike most static site systems that are built around templating engines, with BootDown you write both your page content, and the structure in a single source file. Using [. .] for divs. This gives you all the flexibility you need to layout your pages any way you like, within the BootStrap grid.</p>\n"
  },
  {
    "title": "Broccoli Taco",
    "repo": "moudy/broccoli-taco",
    "homepage": "http://broccoli-taco.com/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "A fast, simple, and flexible static site generator based on Broccoli.",
    "bodyContent": "Broccoli Taco is designed to create data-driven sites with no database. Pages can pull in data (synchronously or asynchronously via promises) at build time. Arrays of data will generate a page for each item, allowing you to generate an arbitrary number of pages.\n\nThanks to [Broccoli](https://github.com/broccolijs/broccoli), re-generating the site is super fast. This makes for a really nice development process, especially when paired with livereload.\n\nCheck out the docs at http://broccoli-taco.com/ for more details.",
    "bodyHtml": "<p>Broccoli Taco is designed to create data-driven sites with no database. Pages can pull in data (synchronously or asynchronously via promises) at build time. Arrays of data will generate a page for each item, allowing you to generate an arbitrary number of pages.</p>\n<p>Thanks to <a href=\"https://github.com/broccolijs/broccoli\">Broccoli</a>, re-generating the site is super fast. This makes for a really nice development process, especially when paired with livereload.</p>\n<p>Check out the docs at http://broccoli-taco.com/ for more details.</p>\n"
  },
  {
    "title": "Brunch",
    "repo": "brunch/brunch",
    "homepage": "http://brunch.io/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Any JS"],
    "description": "An ultra-fast HTML5 build tool. Capable of static site generation.",
    "twitter": "brunch",
    "bodyContent": "An ultra-fast HTML5 build tool. Capable of static site generation using whatever\ntemplating engine you choose.\n\n### Example\n\nStatic site using Nunjucks templating:\n[Brunch-Nunjucks-Static](https://github.com/gcallsen/brunch-nunjucks-static)",
    "bodyHtml": "<p>An ultra-fast HTML5 build tool. Capable of static site generation using whatever\ntemplating engine you choose.</p>\n<h3>Example</h3>\n<p>Static site using Nunjucks templating:\n<a href=\"https://github.com/gcallsen/brunch-nunjucks-static\">Brunch-Nunjucks-Static</a></p>\n"
  },
  {
    "title": "Cabin",
    "repo": "CabinJS/Cabin",
    "homepage": "http://www.cabinjs.com/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Jade", "EJS"],
    "description": "Simple and extensible static site generator powered by Grunt.",
    "bodyContent": "Cabin's goal is to be a static site generator that encourages designers and developers to make themes and share them with the open source community. We want to make it easy to create and install themes so that theme authors can focus on developing themes, and users can quickly get up and running with their static sites.\n\nCabin should be usable by everyone who knows how to edit markdown, templates, and css. At the same time, we want to provide support for Grunt power users and evolve with the Grunt ecosystem. As such, we plan on having a minimal default Gruntfile and providing options for power users to scaffold a more advanced Gruntfile.",
    "bodyHtml": "<p>Cabin's goal is to be a static site generator that encourages designers and developers to make themes and share them with the open source community. We want to make it easy to create and install themes so that theme authors can focus on developing themes, and users can quickly get up and running with their static sites.</p>\n<p>Cabin should be usable by everyone who knows how to edit markdown, templates, and css. At the same time, we want to provide support for Grunt power users and evolve with the Grunt ecosystem. As such, we plan on having a minimal default Gruntfile and providing options for power users to scaffold a more advanced Gruntfile.</p>\n"
  },
  {
    "title": "Cactus",
    "repo": "eudicots/Cactus",
    "homepage": "https://github.com/koenbok/Cactus/",
    "language": ["Python"],
    "license": ["BSD 3-Clause"],
    "templates": ["Django"],
    "description": "Static site generator for designers.",
    "startertemplaterepo": "netlify-templates/cactus-base",
    "bodyContent": "Cactus is a simple but powerful [static website generator](http://mickgardner.com/2011/04/27/An-Introduction-To-Static-Site-Generators.html) using Python and the [Django template system](http://docs.djangoproject.com/en/dev/topics/templates/). Cactus also makes it easy to develop locally and deploy your site to S3 directly. It works great for company, portfolio, personal, support websites and blogs.\n\nTo get a quick overview [watch this short video tutorial](https://vimeo.com/46999791).\n\nCactus is based on the idea that most dynamicness on websites these days can be done using Javascript while the actual site can stay static. Static websites are easy to host and typically very fast.\n\nI developed Cactus because I wanted a standard, easy system that designers at [Sofa](http://www.madebysofa.com) could use to build and deploy fast websites. So typical users would be designers that are tech-savvy, want to use templates, but don't like to mess with setting up django or S3.\n\nSince then it has evolved quite a bit with a plugin system that supports blogging, spriting, versioning and is extensible.\n\nYou can find more discussion about static site generators in this [Hacker News discussion](http://news.ycombinator.com/item?id=2233620).",
    "bodyHtml": "<p>Cactus is a simple but powerful <a href=\"http://mickgardner.com/2011/04/27/An-Introduction-To-Static-Site-Generators.html\">static website generator</a> using Python and the <a href=\"http://docs.djangoproject.com/en/dev/topics/templates/\">Django template system</a>. Cactus also makes it easy to develop locally and deploy your site to S3 directly. It works great for company, portfolio, personal, support websites and blogs.</p>\n<p>To get a quick overview <a href=\"https://vimeo.com/46999791\">watch this short video tutorial</a>.</p>\n<p>Cactus is based on the idea that most dynamicness on websites these days can be done using Javascript while the actual site can stay static. Static websites are easy to host and typically very fast.</p>\n<p>I developed Cactus because I wanted a standard, easy system that designers at <a href=\"http://www.madebysofa.com\">Sofa</a> could use to build and deploy fast websites. So typical users would be designers that are tech-savvy, want to use templates, but don't like to mess with setting up django or S3.</p>\n<p>Since then it has evolved quite a bit with a plugin system that supports blogging, spriting, versioning and is extensible.</p>\n<p>You can find more discussion about static site generators in this <a href=\"http://news.ycombinator.com/item?id=2233620\">Hacker News discussion</a>.</p>\n"
  },
  {
    "title": "Carew",
    "repo": "carew/carew",
    "homepage": "http://carew.github.io/",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig"],
    "description": "The tiny website generator",
    "bodyContent": "Carew is another static site / blog generator. Write some blog posts or pages in\nmarkdown, Carew will render them in html.\n\n### Features\n\n* Simple but extensible\n* Auto syntax highlighting\n* Auto generated navigation\n* Auto generated pagination\n* One theme base on Bootstrap\n* Shareable/Linkable SEO Friendly URLs\n* No need for php, ruby, python on the production server.\n* Git friendly\n\n### Why another one?#\n\nI used to use jekyll, but I was very unhappy with the templating engine. And then, I discovered balrog. It was very cool but igor took another direction. So I forked it, and carew was born.",
    "bodyHtml": "<p>Carew is another static site / blog generator. Write some blog posts or pages in\nmarkdown, Carew will render them in html.</p>\n<h3>Features</h3>\n<ul>\n<li>Simple but extensible</li>\n<li>Auto syntax highlighting</li>\n<li>Auto generated navigation</li>\n<li>Auto generated pagination</li>\n<li>One theme base on Bootstrap</li>\n<li>Shareable/Linkable SEO Friendly URLs</li>\n<li>No need for php, ruby, python on the production server.</li>\n<li>Git friendly</li>\n</ul>\n<h3>Why another one?#</h3>\n<p>I used to use jekyll, but I was very unhappy with the templating engine. And then, I discovered balrog. It was very cool but igor took another direction. So I forked it, and carew was born.</p>\n"
  },
  {
    "title": "CMintS",
    "repo": "Manvel/cmints",
    "homepage": "https://cmints.io/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["EJS"],
    "description": "CMS and Static Site Generator created with the internationalization in mind.",
    "startertemplaterepo": "Manvel/cmints-website",
    "bodyContent": "CMintS is a CMS and Static Site Generator that has been implemented with the\nInternationalization in mind. CMintS is quite easy to [install and use](https://cmints.io/documentation).\n\n# Features\n\n## i18n\n\nComprehensive internationalization out of the box for layouting and page content\ntranslation.\n\n## Theme\n\nGet JS bundling and LESS in addition to EJS templating engine for themes\ncreation.\n\n## Markdown\n\nGet CommonMark with i18n support out of the box to create translatable pages\nfaster.\n\n## TMS integration\n\nHandy API to integrate your project with the Crowdin and start translating the\nproject right away.",
    "bodyHtml": "<p>CMintS is a CMS and Static Site Generator that has been implemented with the\nInternationalization in mind. CMintS is quite easy to <a href=\"https://cmints.io/documentation\">install and use</a>.</p>\n<h1>Features</h1>\n<h2>i18n</h2>\n<p>Comprehensive internationalization out of the box for layouting and page content\ntranslation.</p>\n<h2>Theme</h2>\n<p>Get JS bundling and LESS in addition to EJS templating engine for themes\ncreation.</p>\n<h2>Markdown</h2>\n<p>Get CommonMark with i18n support out of the box to create translatable pages\nfaster.</p>\n<h2>TMS integration</h2>\n<p>Handy API to integrate your project with the Crowdin and start translating the\nproject right away.</p>\n"
  },
  {
    "title": "Cobalt",
    "repo": "cobalt-org/cobalt.rs",
    "homepage": "https://cobalt-org.github.io/",
    "language": ["Rust"],
    "license": ["MIT"],
    "templates": ["Liquid"],
    "description": "A static site generator written in Rust.",
    "bodyContent": "Cobalt is a static site generator written in Rust. It uses Liquid templates and markdown.",
    "bodyHtml": "<p>Cobalt is a static site generator written in Rust. It uses Liquid templates and markdown.</p>\n"
  },
  {
    "title": "Cogear.JS",
    "repo": "codemotion/cogear.js",
    "homepage": "https://cogearjs.org",
    "language": ["Node.JS"],
    "license": ["MIT"],
    "templates": ["EJS", "PUG", "HBS"],
    "description": "A modern static sites generator based on Webpack.",
    "bodyContent": "**Cogear.JS** is a static websites generator built with [Node.JS](https://nodejs.org) (9.x or higher) and based on [Webpack](https://webpack.js.org) (v4.6).\n\nProvides awesome hot reloading experience in `development` mode.\n\n## Features\n* 🖥  **Modern stack of technologies** <br>Build modern static websites with bundled scripts and styles.<br>Rapidly prototype and instantly deploy to the server.<br>\nUse **any modern frontend stack** (**webpack** bundled) – [Vue.JS](https://vuejs.org), [React](https://reactjs.org), [Angular](https://angular.io), [Ember](https://emberjs.org), etc.\n* 🚀  **Blazing fast and reliable**<br>\nPerforms nearly 1.000 pages per second (depends on the pages content and raw computer processor power).<br>\n Server can handle thousands requests per second to serve static files (even on tiny VPS).\n* 🚚  **Deploy built in**<br>\n[Create a preset](https://cogearjs.org/docs/deploy) and update your site to the server via FTP, SFTP or even `rsync`.",
    "bodyHtml": "<p><strong>Cogear.JS</strong> is a static websites generator built with <a href=\"https://nodejs.org\">Node.JS</a> (9.x or higher) and based on <a href=\"https://webpack.js.org\">Webpack</a> (v4.6).</p>\n<p>Provides awesome hot reloading experience in <code>development</code> mode.</p>\n<h2>Features</h2>\n<ul>\n<li>🖥  <strong>Modern stack of technologies</strong> &lt;br&gt;Build modern static websites with bundled scripts and styles.&lt;br&gt;Rapidly prototype and instantly deploy to the server.&lt;br&gt;\nUse <strong>any modern frontend stack</strong> (<strong>webpack</strong> bundled) – <a href=\"https://vuejs.org\">Vue.JS</a>, <a href=\"https://reactjs.org\">React</a>, <a href=\"https://angular.io\">Angular</a>, <a href=\"https://emberjs.org\">Ember</a>, etc.</li>\n<li>🚀  <strong>Blazing fast and reliable</strong>&lt;br&gt;\nPerforms nearly 1.000 pages per second (depends on the pages content and raw computer processor power).&lt;br&gt;\nServer can handle thousands requests per second to serve static files (even on tiny VPS).</li>\n<li>🚚  <strong>Deploy built in</strong>&lt;br&gt;\n<a href=\"https://cogearjs.org/docs/deploy\">Create a preset</a> and update your site to the server via FTP, SFTP or even <code>rsync</code>.</li>\n</ul>\n"
  },
  {
    "title": "Coil",
    "repo": "badosu/coil",
    "homepage": "https://github.com/badosu/coil",
    "language": ["Elixir"],
    "license": ["MIT"],
    "templates": ["EEx"],
    "description": "Coil is a minimalistic static content engine written in elixir",
    "bodyContent": "Coil is a minimalistic static content engine written in [Elixir Programming Language](http://elixir-lang.org).",
    "bodyHtml": "<p>Coil is a minimalistic static content engine written in <a href=\"http://elixir-lang.org\">Elixir Programming Language</a>.</p>\n"
  },
  {
    "title": "Coleslaw",
    "repo": "kingcons/coleslaw",
    "homepage": "https://github.com/kingcons/coleslaw",
    "language": ["Lisp"],
    "license": ["BSD 2-Clause"],
    "templates": ["Closure Templates"],
    "description": "Flexible Lisp Blogware.",
    "bodyContent": "Coleslaw aims to be flexible blog software suitable for replacing a single-user static site compiler such as Jekyll.\n\n### Features\n* Git for storage\n* RSS and Atom feeds!\n* Markdown Support with Code Highlighting provided by [colorize](http://www.cliki.net/colorize).\n  * Currently supports: Common Lisp, Emacs Lisp, Scheme, C, C++, Java, Python, Erlang, Haskell, Obj-C, Diff.\n* [Multi-site publishing](http://rmoritz.github.io/articles/coleslaw-multi-site/) support.\n\n* A [Plugin API](http://github.com/redline6561/coleslaw/blob/master/docs/plugin-api.md) and [**plugins**](http://github.com/redline6561/coleslaw/blob/master/docs/plugin-use.md) for...\n  * Comments via Disqus\n  * Analytics via Google\n  * Hosting via Github Pages\n  * Deploying to Amazon S3\n  * Using LaTeX (inside pairs of $$) via Mathjax\n  * Using ReStructured Text\n  * Sitemap generation\n  * Importing posts from wordpress\n\n* There is also a [Heroku buildpack](https://github.com/jsmpereira/coleslaw-heroku) maintained by Jose Pereira.\n* Example sites: [redlinernotes](http://redlinernotes.com/blog/), [kenan-bolukbasi.log](http://kenanb.com/), and [Nothing Really Matters](http://ironhead.xs4all.nl/).\n\n### Hacking\n\nA core goal of *coleslaw* is to be both pleasant to read and easy to hack on and extend. If you want to understand the internals and bend *coleslaw* to do new and interesting things, I strongly encourage you to read the [Hacker's Guide to Coleslaw](https://github.com/redline6561/coleslaw/blob/master/docs/hacking.md).\n\n### Theming\nTwo themes are provided: hyde and readable (based on [bootswatch readable](http://bootswatch.com/readable/)). Hyde is the default. A guide to creating themes for coleslaw lives [here](https://github.com/redline6561/coleslaw/blob/master/docs/themes.md).",
    "bodyHtml": "<p>Coleslaw aims to be flexible blog software suitable for replacing a single-user static site compiler such as Jekyll.</p>\n<h3>Features</h3>\n<ul>\n<li>\n<p>Git for storage</p>\n</li>\n<li>\n<p>RSS and Atom feeds!</p>\n</li>\n<li>\n<p>Markdown Support with Code Highlighting provided by <a href=\"http://www.cliki.net/colorize\">colorize</a>.</p>\n<ul>\n<li>Currently supports: Common Lisp, Emacs Lisp, Scheme, C, C++, Java, Python, Erlang, Haskell, Obj-C, Diff.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://rmoritz.github.io/articles/coleslaw-multi-site/\">Multi-site publishing</a> support.</p>\n</li>\n<li>\n<p>A <a href=\"http://github.com/redline6561/coleslaw/blob/master/docs/plugin-api.md\">Plugin API</a> and <a href=\"http://github.com/redline6561/coleslaw/blob/master/docs/plugin-use.md\"><strong>plugins</strong></a> for...</p>\n<ul>\n<li>Comments via Disqus</li>\n<li>Analytics via Google</li>\n<li>Hosting via Github Pages</li>\n<li>Deploying to Amazon S3</li>\n<li>Using LaTeX (inside pairs of $$) via Mathjax</li>\n<li>Using ReStructured Text</li>\n<li>Sitemap generation</li>\n<li>Importing posts from wordpress</li>\n</ul>\n</li>\n<li>\n<p>There is also a <a href=\"https://github.com/jsmpereira/coleslaw-heroku\">Heroku buildpack</a> maintained by Jose Pereira.</p>\n</li>\n<li>\n<p>Example sites: <a href=\"http://redlinernotes.com/blog/\">redlinernotes</a>, <a href=\"http://kenanb.com/\">kenan-bolukbasi.log</a>, and <a href=\"http://ironhead.xs4all.nl/\">Nothing Really Matters</a>.</p>\n</li>\n</ul>\n<h3>Hacking</h3>\n<p>A core goal of <em>coleslaw</em> is to be both pleasant to read and easy to hack on and extend. If you want to understand the internals and bend <em>coleslaw</em> to do new and interesting things, I strongly encourage you to read the <a href=\"https://github.com/redline6561/coleslaw/blob/master/docs/hacking.md\">Hacker's Guide to Coleslaw</a>.</p>\n<h3>Theming</h3>\n<p>Two themes are provided: hyde and readable (based on <a href=\"http://bootswatch.com/readable/\">bootswatch readable</a>). Hyde is the default. A guide to creating themes for coleslaw lives <a href=\"https://github.com/redline6561/coleslaw/blob/master/docs/themes.md\">here</a>.</p>\n"
  },
  {
    "title": "CopperSmith",
    "repo": "charlgottschalk/coppersmith",
    "homepage": "http://charlgottschalk.co.za/projects/coppersmith",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "CopperSmith is a very simple command powered static site generator that uses markdown files.",
    "bodyContent": "CopperSmith is a very simple static site builder that uses markdown files.\n\nUsing simple commands, you can quickly scaffold your site leaving you to simply edit the content of your pages.\n\nOnce built, the site can be hosted anywhere static HTML content is supported, like GitHub Pages and Netlify.\n\nCopperSmith also comes with a simple FTP publisher, allowing you to easily upload your generated site to your plain FTP server.\n\nTemplating is supported and allows you to easily change the layout and styling with your own custom layouts and partials using the [handlebars](http://handlebarsjs.com/) templating engine.\n\nRead the [templating docs](http://charlgottschalk.co.za/projects/coppersmith/docs/master/templates-setup) for more info.\n\nView the [project page](http://charlgottschalk.co.za/projects/coppersmith) for [documentation](http://charlgottschalk.co.za/projects/coppersmith/docs).",
    "bodyHtml": "<p>CopperSmith is a very simple static site builder that uses markdown files.</p>\n<p>Using simple commands, you can quickly scaffold your site leaving you to simply edit the content of your pages.</p>\n<p>Once built, the site can be hosted anywhere static HTML content is supported, like GitHub Pages and Netlify.</p>\n<p>CopperSmith also comes with a simple FTP publisher, allowing you to easily upload your generated site to your plain FTP server.</p>\n<p>Templating is supported and allows you to easily change the layout and styling with your own custom layouts and partials using the <a href=\"http://handlebarsjs.com/\">handlebars</a> templating engine.</p>\n<p>Read the <a href=\"http://charlgottschalk.co.za/projects/coppersmith/docs/master/templates-setup\">templating docs</a> for more info.</p>\n<p>View the <a href=\"http://charlgottschalk.co.za/projects/coppersmith\">project page</a> for <a href=\"http://charlgottschalk.co.za/projects/coppersmith/docs\">documentation</a>.</p>\n"
  },
  {
    "title": "Cory",
    "repo": "leo/cory",
    "homepage": "https://www.npmjs.com/package/cory",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "A static site generator for JavaScript lovers.",
    "bodyContent": "Ever wanted to create a static site while taking advantage of all the amazing things that are available within the JavaScript universe? Then you're at the right place! Cory combines clean, logic-less handlebars templates with a straightforward development workflow and allows you to set up a new site in a few seconds.",
    "bodyHtml": "<p>Ever wanted to create a static site while taking advantage of all the amazing things that are available within the JavaScript universe? Then you're at the right place! Cory combines clean, logic-less handlebars templates with a straightforward development workflow and allows you to set up a new site in a few seconds.</p>\n"
  },
  {
    "title": "Couscous",
    "repo": "CouscousPHP/Couscous",
    "homepage": "http://couscous.io/",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig"],
    "description": "Couscous turn Markdown documentation into beautiful websites.",
    "bodyContent": "### Step 1\n\nWrite your documentation in Markdown inside your repository, versioned with your code. Couscous will turn those Markdown files to HTML.\n\n### Step 2\n\n`couscous preview` will render the website on your machine. Tweak the default template, fix some typos and the changes will be reflected in real time.\n\n### Step 3\n\ncouscous deploy will publish your website on the gh-pages Git branch. GitHub will automatically put it online and host it for you.\n\n### Step 4\n\nYour website is online, just sit back and relax.",
    "bodyHtml": "<h3>Step 1</h3>\n<p>Write your documentation in Markdown inside your repository, versioned with your code. Couscous will turn those Markdown files to HTML.</p>\n<h3>Step 2</h3>\n<p><code>couscous preview</code> will render the website on your machine. Tweak the default template, fix some typos and the changes will be reflected in real time.</p>\n<h3>Step 3</h3>\n<p>couscous deploy will publish your website on the gh-pages Git branch. GitHub will automatically put it online and host it for you.</p>\n<h3>Step 4</h3>\n<p>Your website is online, just sit back and relax.</p>\n"
  },
  {
    "title": "Cryogen",
    "repo": "cryogen-project/cryogen",
    "homepage": "http://cryogenweb.org/",
    "language": ["Clojure"],
    "license": ["EPL 1.0"],
    "templates": ["Selmer"],
    "description": "A simple static site generator shipped on Leiningen",
    "bodyContent": "Cryogen is a simple static site generator built with Clojure.\nIt's shipped on Leiningen so setup is fuss free and there's no\nneed to mess with databases or other CMS systems.\n\nCryogen reads through a directory containing your Markdown content,\ncompiles it into HTML and injects the content into your templates\nwith the [Selmer](https://github.com/yogthos/selmer) templating system.\nIt then spits out a ready-to-publish website complete with a sitemap and RSS feed.\n\n### Features\n\n- Blog posts and pages with Markdown\n- Tags\n- Table of contents generation\n- Default Twitter Bootstrap theme\n- Plain HTML page templates\n- Code syntax highlighting\n- Disqus support\n- GitHub Gist integration\n- Sitemap\n- Sass/SCSS compilation\n- RSS\n\n### Samples\n\n- [Cryogen Documentation Site](http://cryogenweb.org/)\n- [Carmen LA Blog](http://carmenla.me/blog/index.html)\n- [(iterate think thoughts)](http://yogthos.net/)\n- [Clojure :in Tunisia](http://www.clojure.tn/)\n- [dl1ely.github.io](http://dl1ely.github.io/)\n- [nil/recur](http://jonase.github.io/nil-recur/)\n- [on the clojure move](http://tangrammer.github.io/)\n- [cognizance](http://blog.jethrokuan.com/)",
    "bodyHtml": "<p>Cryogen is a simple static site generator built with Clojure.\nIt's shipped on Leiningen so setup is fuss free and there's no\nneed to mess with databases or other CMS systems.</p>\n<p>Cryogen reads through a directory containing your Markdown content,\ncompiles it into HTML and injects the content into your templates\nwith the <a href=\"https://github.com/yogthos/selmer\">Selmer</a> templating system.\nIt then spits out a ready-to-publish website complete with a sitemap and RSS feed.</p>\n<h3>Features</h3>\n<ul>\n<li>Blog posts and pages with Markdown</li>\n<li>Tags</li>\n<li>Table of contents generation</li>\n<li>Default Twitter Bootstrap theme</li>\n<li>Plain HTML page templates</li>\n<li>Code syntax highlighting</li>\n<li>Disqus support</li>\n<li>GitHub Gist integration</li>\n<li>Sitemap</li>\n<li>Sass/SCSS compilation</li>\n<li>RSS</li>\n</ul>\n<h3>Samples</h3>\n<ul>\n<li><a href=\"http://cryogenweb.org/\">Cryogen Documentation Site</a></li>\n<li><a href=\"http://carmenla.me/blog/index.html\">Carmen LA Blog</a></li>\n<li><a href=\"http://yogthos.net/\">(iterate think thoughts)</a></li>\n<li><a href=\"http://www.clojure.tn/\">Clojure :in Tunisia</a></li>\n<li><a href=\"http://dl1ely.github.io/\">dl1ely.github.io</a></li>\n<li><a href=\"http://jonase.github.io/nil-recur/\">nil/recur</a></li>\n<li><a href=\"http://tangrammer.github.io/\">on the clojure move</a></li>\n<li><a href=\"http://blog.jethrokuan.com/\">cognizance</a></li>\n</ul>\n"
  },
  {
    "title": "Cuttlebelle",
    "repo": "cuttlebelle/cuttlebelle",
    "homepage": "https://cuttlebelle.com",
    "language": ["JavaScript"],
    "license": ["GNU GPL v3.0"],
    "templates": ["React"],
    "description": "The react static site generator that separates editing and code concerns",
    "startertemplaterepo": "cuttlebelle/website",
    "bodyContent": "> The react static site generator that separates editing and code concerns\n\n## What is Cuttlebelle?\n\nCuttlebelle is a static site generator that uses react for layouts, let’s you use one\nlayout per page-partial and cleanly separates content from code.\n\nYou can extend Cuttlebelle with react components that\ncan make use of the power of the npm ecosystem.\n\n## Modularize each page into partials\n\nEach section of your page becomes a markdown file with front-matter. The content can\nbe written in [YAML](http://yaml.org/) or [markdown](https://github.com/chjj/marked.\nA layout is nominated per partial.\n\n## Write your layout in react\n\nThe layout is written in [JSX](https://facebook.github.io/jsx/) as a react component.\nEach variable in your front-matter becomes a prop of the layout.\n\n## Multiple layouts\n\nEach page is divided into components that have their own layouts. Think of it like\nlittle [Lego™ blocks](https://www.lego.com/) that make up your site.\n\nWith that you can build completely new page layouts by assembling them from your\nsmaller partials without having to touch code.\n\n## Clean separation\n\nKeeping your content free of any code empowers more users to change the content\nof your site. And because we chunk it all up into partials, content authors are able\nto build completely new layouts all by them-self without ever touching more complex code.\n\nSeparation also means searching through your content is easier and you can reuse\nlayout as well as content blocks easily.\n\n## Easy templating\n\nCuttlebelle uses [JSX](https://facebook.github.io/jsx/) as the templating language.\nThis makes it very convenient to build simple layouts all the way to super complex ones\nthat fetch data from online APIs.\n\nNow you can start testing your layouts with [Jest](https://facebook.github.io/jest/) or\nany other react tester.\n\n## No lock-in\n\nWith Cuttlebelle you’re not locked into any CMS and are able to move to\nanother solution as your websites scales.\n\nAll your content is in easy digestible markdown files and can be exported to\njavascript objects.",
    "bodyHtml": "<blockquote>\n<p>The react static site generator that separates editing and code concerns</p>\n</blockquote>\n<h2>What is Cuttlebelle?</h2>\n<p>Cuttlebelle is a static site generator that uses react for layouts, let’s you use one\nlayout per page-partial and cleanly separates content from code.</p>\n<p>You can extend Cuttlebelle with react components that\ncan make use of the power of the npm ecosystem.</p>\n<h2>Modularize each page into partials</h2>\n<p>Each section of your page becomes a markdown file with front-matter. The content can\nbe written in <a href=\"http://yaml.org/\">YAML</a> or [markdown](https://github.com/chjj/marked.\nA layout is nominated per partial.</p>\n<h2>Write your layout in react</h2>\n<p>The layout is written in <a href=\"https://facebook.github.io/jsx/\">JSX</a> as a react component.\nEach variable in your front-matter becomes a prop of the layout.</p>\n<h2>Multiple layouts</h2>\n<p>Each page is divided into components that have their own layouts. Think of it like\nlittle <a href=\"https://www.lego.com/\">Lego™ blocks</a> that make up your site.</p>\n<p>With that you can build completely new page layouts by assembling them from your\nsmaller partials without having to touch code.</p>\n<h2>Clean separation</h2>\n<p>Keeping your content free of any code empowers more users to change the content\nof your site. And because we chunk it all up into partials, content authors are able\nto build completely new layouts all by them-self without ever touching more complex code.</p>\n<p>Separation also means searching through your content is easier and you can reuse\nlayout as well as content blocks easily.</p>\n<h2>Easy templating</h2>\n<p>Cuttlebelle uses <a href=\"https://facebook.github.io/jsx/\">JSX</a> as the templating language.\nThis makes it very convenient to build simple layouts all the way to super complex ones\nthat fetch data from online APIs.</p>\n<p>Now you can start testing your layouts with <a href=\"https://facebook.github.io/jest/\">Jest</a> or\nany other react tester.</p>\n<h2>No lock-in</h2>\n<p>With Cuttlebelle you’re not locked into any CMS and are able to move to\nanother solution as your websites scales.</p>\n<p>All your content is in easy digestible markdown files and can be exported to\njavascript objects.</p>\n"
  },
  {
    "title": "Dapper",
    "repo": "markdbenson/dapper",
    "homepage": "http://vanilladraft.com/dapper/",
    "language": ["Perl"],
    "license": ["MIT"],
    "templates": ["TT3"],
    "description": "Dapper is a simple, flexible, and pragmatic static site generator written in Perl.",
    "bodyContent": "Dapper is a simple, flexible, and pragmatic static site generator written in Perl. Dapper takes your content (Markdown), combines with templates (based on the TT3 mini-language), and creates a set of static files that you can upload to your favorite webhost.\n\n### Introduction\n\n[Distributed as a Perl module](http://search.cpan.org/~mdb/App-Dapper/),\nDapper comes with a command-line application called `dapper` which you\ncan use to create static websites.\n\n    $ cpanm App::Dapper\n    $ dapper init\n    $ dapper serve # Serve site at http://localhost:8000\n\n### Goals\n\nDapper has three goals:\n\n1. **Simple**. Learning Dapper is easy -- it gets out of the way so you can\n   write content, develop layouts, and deploy to production the way you\n   want.\n\n2. **Flexible**. Content is written in\n   [Markdown](http://search.cpan.org/~bobtfish/Text-MultiMarkdown/), and\n   templates are written using the TT3 mini-language from\n   [Template::Alloy](http://search.cpan.org/~abw/Template-Toolkit/) for \n   maximum flexibility.\n\n3. **Pragmatic**. The easy things are easy and the hard things are\n   possible. Dapper was created to solve problems in a straight-forward\n   and intuitive way.\n\n### Rationale\n\nWhy static? Decent question. Here are some reasons:\n\n1. **Fast**. Static pages are fast to load and easy to cache. Content\n   management systems, on the other hand, may contact the database at\n   least one time per page request, process the results, merge with a\n   templating system, and serve the result to the user's web browser.\n\n2. **Cheap**. Having a static website means that options for hosting those\n   static files also just got a lot more simple. No database is needed and\n   no real processing power for scripting is needed. For example, with a\n   static website, it becomes possible to host the site on\n   [Github Pages](https://pages.github.com/),\n   [BitBalloon](https://www.bitballoon.com/), or \n   [Amazon S3](http://aws.amazon.com/s3/) for free or for very modest fees.\n\n3. **Secure**. It's much more secure to host a static website than a\n   dynamic one.  Content management systems that use scripting languages\n   such as Perl, Python, or Ruby, all are more susceptible to being hacked\n   than a static website is.  Simply stated, why use a dynamic content-\n   management system if a static setup will do?\n\n4. **Portable**. With a static website, it's way easier to move the site\n   to a new host in the future. All web hosts now and in the future\n   support serving up a static website -- think of it as the lowest common\n   denominator -- and so there's no need to pick a premium host with\n   premium services.\n\n### Background\n\nDapper was first written in 2002 to facilitate the creation of a series\nof static websites that each had their own look and feel, but shared\ncontent. Since then, Dapper has been used to create websites for speakers,\nartists, authors, illusionists, web designers, piano tuners,\nphotographers, entertainment agencies, and API documentation for\nindustrial sensing equipment. In addition, it is the tool that powers\n[Vanilla Draft](http://vanilladraft.com/).\n\nIn 2014, Dapper was submitted as a Perl module (App::Dapper) to\n[CPAN](http://cpan.org/) under the MIT license for anyone to use for any\npurpose.\n\n### Features\n\n* Written in perl, available as a command line utility after installing.\n* Content is written in Markdown.\n* Layouts are developed using TT3 from the Template::Alloy templating engine.\n* Configuration files and attributes are encoded with YAML.\n* URL mappings, plugins, filters, built-in development webserver, etc.\n\nFind more infomration at [Vanilla Draft](http://vanilladraft.com/dapper/) or on [Github](https://github.com/markdbenson/dapper).",
    "bodyHtml": "<p>Dapper is a simple, flexible, and pragmatic static site generator written in Perl. Dapper takes your content (Markdown), combines with templates (based on the TT3 mini-language), and creates a set of static files that you can upload to your favorite webhost.</p>\n<h3>Introduction</h3>\n<p><a href=\"http://search.cpan.org/~mdb/App-Dapper/\">Distributed as a Perl module</a>,\nDapper comes with a command-line application called <code>dapper</code> which you\ncan use to create static websites.</p>\n<pre><code>$ cpanm App::Dapper\n$ dapper init\n$ dapper serve # Serve site at http://localhost:8000\n</code></pre>\n<h3>Goals</h3>\n<p>Dapper has three goals:</p>\n<ol>\n<li>\n<p><strong>Simple</strong>. Learning Dapper is easy -- it gets out of the way so you can\nwrite content, develop layouts, and deploy to production the way you\nwant.</p>\n</li>\n<li>\n<p><strong>Flexible</strong>. Content is written in\n<a href=\"http://search.cpan.org/~bobtfish/Text-MultiMarkdown/\">Markdown</a>, and\ntemplates are written using the TT3 mini-language from\n<a href=\"http://search.cpan.org/~abw/Template-Toolkit/\">Template::Alloy</a> for\nmaximum flexibility.</p>\n</li>\n<li>\n<p><strong>Pragmatic</strong>. The easy things are easy and the hard things are\npossible. Dapper was created to solve problems in a straight-forward\nand intuitive way.</p>\n</li>\n</ol>\n<h3>Rationale</h3>\n<p>Why static? Decent question. Here are some reasons:</p>\n<ol>\n<li>\n<p><strong>Fast</strong>. Static pages are fast to load and easy to cache. Content\nmanagement systems, on the other hand, may contact the database at\nleast one time per page request, process the results, merge with a\ntemplating system, and serve the result to the user's web browser.</p>\n</li>\n<li>\n<p><strong>Cheap</strong>. Having a static website means that options for hosting those\nstatic files also just got a lot more simple. No database is needed and\nno real processing power for scripting is needed. For example, with a\nstatic website, it becomes possible to host the site on\n<a href=\"https://pages.github.com/\">Github Pages</a>,\n<a href=\"https://www.bitballoon.com/\">BitBalloon</a>, or\n<a href=\"http://aws.amazon.com/s3/\">Amazon S3</a> for free or for very modest fees.</p>\n</li>\n<li>\n<p><strong>Secure</strong>. It's much more secure to host a static website than a\ndynamic one.  Content management systems that use scripting languages\nsuch as Perl, Python, or Ruby, all are more susceptible to being hacked\nthan a static website is.  Simply stated, why use a dynamic content-\nmanagement system if a static setup will do?</p>\n</li>\n<li>\n<p><strong>Portable</strong>. With a static website, it's way easier to move the site\nto a new host in the future. All web hosts now and in the future\nsupport serving up a static website -- think of it as the lowest common\ndenominator -- and so there's no need to pick a premium host with\npremium services.</p>\n</li>\n</ol>\n<h3>Background</h3>\n<p>Dapper was first written in 2002 to facilitate the creation of a series\nof static websites that each had their own look and feel, but shared\ncontent. Since then, Dapper has been used to create websites for speakers,\nartists, authors, illusionists, web designers, piano tuners,\nphotographers, entertainment agencies, and API documentation for\nindustrial sensing equipment. In addition, it is the tool that powers\n<a href=\"http://vanilladraft.com/\">Vanilla Draft</a>.</p>\n<p>In 2014, Dapper was submitted as a Perl module (App::Dapper) to\n<a href=\"http://cpan.org/\">CPAN</a> under the MIT license for anyone to use for any\npurpose.</p>\n<h3>Features</h3>\n<ul>\n<li>Written in perl, available as a command line utility after installing.</li>\n<li>Content is written in Markdown.</li>\n<li>Layouts are developed using TT3 from the Template::Alloy templating engine.</li>\n<li>Configuration files and attributes are encoded with YAML.</li>\n<li>URL mappings, plugins, filters, built-in development webserver, etc.</li>\n</ul>\n<p>Find more infomration at <a href=\"http://vanilladraft.com/dapper/\">Vanilla Draft</a> or on <a href=\"https://github.com/markdbenson/dapper\">Github</a>.</p>\n"
  },
  {
    "title": "deadsimplelog",
    "repo": "tallesl/node-deadsimplelog",
    "homepage": "https://github.com/tallesl/node-deadsimplelog",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["HTML"],
    "description": "Static blog generator with simplistic configuration that aims for being dead simple.",
    "bodyContent": "Static web blog generator with simplistic configuration that aims for being dead simple.\n\nAs you can see, there is nothing fancy about it. This is just a project used by myself for blogging. If this ever become useful to someone else, feel free to submit an issue or a pull request :)",
    "bodyHtml": "<p>Static web blog generator with simplistic configuration that aims for being dead simple.</p>\n<p>As you can see, there is nothing fancy about it. This is just a project used by myself for blogging. If this ever become useful to someone else, feel free to submit an issue or a pull request :)</p>\n"
  },
  {
    "title": "Dimples",
    "repo": "waferbaby/dimples",
    "homepage": "https://github.com/waferbaby/dimples",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Tilt"],
    "description": "A very, very, very simple static site generator gem.",
    "bodyContent": "This is a very simple static site generator, born out of the loins of usesthis.com.\n\n### Requirements\n\n* Tilt - for the templates.\n* One of the gems Tilt uses for templating, depending on your needs.",
    "bodyHtml": "<p>This is a very simple static site generator, born out of the loins of usesthis.com.</p>\n<h3>Requirements</h3>\n<ul>\n<li>Tilt - for the templates.</li>\n<li>One of the gems Tilt uses for templating, depending on your needs.</li>\n</ul>\n"
  },
  {
    "title": "django-distill",
    "repo": "mgrp/django-distill",
    "homepage": "https://github.com/mgrp/django-distill",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Django"],
    "description": "django-distill lets you to create and publish a static website from any Django project.",
    "bodyContent": "django-distill is a simple to implement static site generator for Django. It\nis fully compatible with all Django projects and works with existing complex\nDjango applications without interfering. It does not require modifications to\nexisting apps and only small per-URL functions need to be created.\n\ndjango-distill is designed to integrate with existing Django projects and does\nnot require learning any new framework or file structures to use.\n\n### Features\n* Full compatibility with all Django projects\n* No overhead when added to existing projects\n* Trivial to add to existing Django sites\n* Uses the standard Django project structure and does not require learning a new sub-framework\n* Can generate static pages for all or just part of your project\n* Full support for publishing to S3 and Rackspace Cloud Files with remote checks\n* Validation of remote containers on S3 and Rackspace Cloud Files\n* Generation is identical to the output of existing dynamic Django content\n* Simple to implement and debug\n* Only modification required is to `urls.py` and `settings.py`\n* Static pages can be generated for third party applications\n* Support for all page and file types (downloads, RSS feeds, JSON objects etc.)",
    "bodyHtml": "<p>django-distill is a simple to implement static site generator for Django. It\nis fully compatible with all Django projects and works with existing complex\nDjango applications without interfering. It does not require modifications to\nexisting apps and only small per-URL functions need to be created.</p>\n<p>django-distill is designed to integrate with existing Django projects and does\nnot require learning any new framework or file structures to use.</p>\n<h3>Features</h3>\n<ul>\n<li>Full compatibility with all Django projects</li>\n<li>No overhead when added to existing projects</li>\n<li>Trivial to add to existing Django sites</li>\n<li>Uses the standard Django project structure and does not require learning a new sub-framework</li>\n<li>Can generate static pages for all or just part of your project</li>\n<li>Full support for publishing to S3 and Rackspace Cloud Files with remote checks</li>\n<li>Validation of remote containers on S3 and Rackspace Cloud Files</li>\n<li>Generation is identical to the output of existing dynamic Django content</li>\n<li>Simple to implement and debug</li>\n<li>Only modification required is to <code>urls.py</code> and <code>settings.py</code></li>\n<li>Static pages can be generated for third party applications</li>\n<li>Support for all page and file types (downloads, RSS feeds, JSON objects etc.)</li>\n</ul>\n"
  },
  {
    "title": "DocFX",
    "repo": "dotnet/docfx",
    "homepage": "https://dotnet.github.io/docfx",
    "language": ["C#"],
    "license": ["MIT"],
    "templates": ["Mustache", "Liquid"],
    "description": "A documentation generation tool for API reference and Markdown files.",
    "bodyContent": "DocFX is an API documentation generator for .NET, and currently it supports C# and VB.\nIt generates API reference documentation from triple-slash comments in your source code.\nIt also allows you to use Markdown files to create additional topics such as tutorials and how-tos, and to customize the generated reference documentation. DocFX builds a static HTML website from your source code and Markdown files, which can be easily hosted on any web servers (for example, github.io). Also, DocFX provides you the flexibility to customize the layout and style of your website through templates. If you are interested in creating your own website with your own styles, you can follow how to create custom template to create custom templates.\n\nDocFX also has the following cool features:\n* Integration with your source code. You can click \"View Source\" on an API to navigate to the source code in GitHub (your source code must be pushed to GitHub).\n* Cross-platform support. We have exe version that runs under Windows. It can also runs cross platforms on Linux/macOS with Mono.\n* Integration with Visual Studio. You can seamlessly use DocFX within Visual Studio with `Install-Package docfx.console`\n* Markdown extensions. We introduced DocFX Flavored Markdown(DFM) to help you write API documentation. DFM is 100% compatible with GitHub Flavored Markdown(GFM) with some useful extensions, like file inclusion, code snippet, cross reference, and yaml header. For detailed description about DFM, please refer to DFM.\n* VSCode integration. Install `docfx` extension in vscode to preview the content in real-time.",
    "bodyHtml": "<p>DocFX is an API documentation generator for .NET, and currently it supports C# and VB.\nIt generates API reference documentation from triple-slash comments in your source code.\nIt also allows you to use Markdown files to create additional topics such as tutorials and how-tos, and to customize the generated reference documentation. DocFX builds a static HTML website from your source code and Markdown files, which can be easily hosted on any web servers (for example, github.io). Also, DocFX provides you the flexibility to customize the layout and style of your website through templates. If you are interested in creating your own website with your own styles, you can follow how to create custom template to create custom templates.</p>\n<p>DocFX also has the following cool features:</p>\n<ul>\n<li>Integration with your source code. You can click &quot;View Source&quot; on an API to navigate to the source code in GitHub (your source code must be pushed to GitHub).</li>\n<li>Cross-platform support. We have exe version that runs under Windows. It can also runs cross platforms on Linux/macOS with Mono.</li>\n<li>Integration with Visual Studio. You can seamlessly use DocFX within Visual Studio with <code>Install-Package docfx.console</code></li>\n<li>Markdown extensions. We introduced DocFX Flavored Markdown(DFM) to help you write API documentation. DFM is 100% compatible with GitHub Flavored Markdown(GFM) with some useful extensions, like file inclusion, code snippet, cross reference, and yaml header. For detailed description about DFM, please refer to DFM.</li>\n<li>VSCode integration. Install <code>docfx</code> extension in vscode to preview the content in real-time.</li>\n</ul>\n"
  },
  {
    "title": "docnado",
    "repo": "HEInventions/docnado",
    "homepage": "https://heinventions.github.io/docnado-site/",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "A rapid documentation tool to blow you away!  Batteries and style included; you just need to type. ",
    "twitter": "heinventions",
    "bodyContent": "# Docnado\n\nA rapid documentation tool to blow you away!!!\n\nDocnado makes it easy to start and maintain a Markdown documentation project.\n\n### Features\n\nDocnado renders an adapted Markdown to provide:\n\n* Embed images, video, YouTube links, external CSV tables, and PDFs.\n* Code highlighting.\n* File download blocks.\n* Lists, checklists, tables, and glossaries.\n* Document defined template selection.\n* Document meta-data.\n* Auto-generated navigation sidebar.\n* Built in command line options to find broken links and orphan images in your documentation.\n\n### Accessing Options\n\n* Output documents as insecure HTML on a localhost.\n* Output documents as PDF files via the HTML server.\n* Create a static set of HTML files that contain the documentation and related resources.\n\n### Download\n\nMake sure you have Python 3.6 installed.\n\n```sh\npython3 -m pip install docnado --upgrade\t# install it\ndocnado\t\t\t\t\t\t\t\t\t\t# run it \n```\n\n### Getting Started\n\n```sh\n\npython docnado.py                       # start a server on localhost:5000\n\npython docnado.py --html                # freeze the server into a static site as a set of HTML files\n                                         # this will exit with -1 if there was a problem parsing any file\n\npython docnado.py --port                # specify a port for docnado to accept requests on\n\npython docnado.py --pdf                 # generate a set of pdf files for each .md file - won't pull through\n                                         # static resource files like with the --html command\n\npython docnado.py --new                 # copy default templates and sample docs into the working directory\n                                         # and update the config too, only if they don't already exist\n\npython docnado.py --new-force           # copy default templates and sample docs into the working directory\n                                         # and update the config too, this will overwrite any existing docs or\n                                         # configs.\n\n\npython docnado.py --dirs                # display all the different directories docnado will use to generate\n                                         # the documentation\n\npython docnado.py --find-orphans        # display unreferenced media assets in the documentation\npython docnado.py --find-broken-links   # display external broken links in the documentation\n```",
    "bodyHtml": "<h1>Docnado</h1>\n<p>A rapid documentation tool to blow you away!!!</p>\n<p>Docnado makes it easy to start and maintain a Markdown documentation project.</p>\n<h3>Features</h3>\n<p>Docnado renders an adapted Markdown to provide:</p>\n<ul>\n<li>Embed images, video, YouTube links, external CSV tables, and PDFs.</li>\n<li>Code highlighting.</li>\n<li>File download blocks.</li>\n<li>Lists, checklists, tables, and glossaries.</li>\n<li>Document defined template selection.</li>\n<li>Document meta-data.</li>\n<li>Auto-generated navigation sidebar.</li>\n<li>Built in command line options to find broken links and orphan images in your documentation.</li>\n</ul>\n<h3>Accessing Options</h3>\n<ul>\n<li>Output documents as insecure HTML on a localhost.</li>\n<li>Output documents as PDF files via the HTML server.</li>\n<li>Create a static set of HTML files that contain the documentation and related resources.</li>\n</ul>\n<h3>Download</h3>\n<p>Make sure you have Python 3.6 installed.</p>\n<pre><code class=\"hljs\">python3 -m pip install docnado --upgrade\t<span class=\"hljs-comment\"># install it</span>\ndocnado\t\t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\"># run it</span></code></pre><h3>Getting Started</h3>\n<pre><code class=\"hljs\">python docnado.py                       <span class=\"hljs-comment\"># start a server on localhost:5000</span>\n\npython docnado.py --html                <span class=\"hljs-comment\"># freeze the server into a static site as a set of HTML files</span>\n                                         <span class=\"hljs-comment\"># this will exit with -1 if there was a problem parsing any file</span>\n\npython docnado.py --port                <span class=\"hljs-comment\"># specify a port for docnado to accept requests on</span>\n\npython docnado.py --pdf                 <span class=\"hljs-comment\"># generate a set of pdf files for each .md file - won't pull through</span>\n                                         <span class=\"hljs-comment\"># static resource files like with the --html command</span>\n\npython docnado.py --new                 <span class=\"hljs-comment\"># copy default templates and sample docs into the working directory</span>\n                                         <span class=\"hljs-comment\"># and update the config too, only if they don't already exist</span>\n\npython docnado.py --new-force           <span class=\"hljs-comment\"># copy default templates and sample docs into the working directory</span>\n                                         <span class=\"hljs-comment\"># and update the config too, this will overwrite any existing docs or</span>\n                                         <span class=\"hljs-comment\"># configs.</span>\n\n\npython docnado.py --<span class=\"hljs-built_in\">dirs</span>                <span class=\"hljs-comment\"># display all the different directories docnado will use to generate</span>\n                                         <span class=\"hljs-comment\"># the documentation</span>\n\npython docnado.py --find-orphans        <span class=\"hljs-comment\"># display unreferenced media assets in the documentation</span>\npython docnado.py --find-broken-links   <span class=\"hljs-comment\"># display external broken links in the documentation</span></code></pre>"
  },
  {
    "title": "Docpad",
    "repo": "docpad/docpad",
    "homepage": "http://docpad.org/",
    "language": ["CoffeeScript"],
    "license": ["MIT"],
    "templates": ["Eco", "Any JS"],
    "description": "Feature rich, configurable and language agnostic.",
    "bodyContent": "Hi! I'm DocPad, I streamline the web development process and help close the gap between experts and beginners. I've been used in production by big and small companies for over a year and a half now to create [plenty of amazing and powerful web sites and applications](http://docpad.org/docs/showcase) quicker than ever before. What makes me different is instead of being a box to cram yourself into and hold you back, I'm a freeway to what you want to accomplish, just getting out of your way and allowing you to create stuff quicker than ever before without limits. Leave the redundant stuff up to me, so you can focus on the awesome stuff.\n\nDiscover my features below, or skip ahead to the installation instructions to get started with a [fully functional pre-made website](http://docpad.org/docs/skeletons) in a few minutes from reading this.\n\n### Features\n\n#### Out of the box\n\n- Completely file based meaning there is no pesky databases that need to be installed, and for version control you get to use systems like Git and SVN which you're already use to (You can still hook in remote data sources if you want, DocPad doesn't impose any limits on you, ever)\n- Choose from plenty of community maintained [pre-made websites](http://docpad.org/docs/skeletons) to use for your next project instead of starting from scratch everytime\n- Write your documents in any language, markup, templating engine, or pre-processor you wish (we're truly agnostic thanks to your plugin system). You can even mix and match them when needed by combining their extensions in a rails like fashion (e.g. `coffee-with-some-eco.js.coffee.eco`)\n- Changes to your website are automatically recompiled through our built in watch system\n- Add meta data to the top of your files to be used by templating engines to display non-standard information such as titles and descriptions for your documents\n- Display custom listings of content with our powerful [Query Engine](https://github.com/bevry/query-engine/) available to your templating engines\n- Abstract out generic headers and footers into layouts using our nested layout system\n- For simple static websites easily deploy your generated website to any web server like apache or github pages. For dynamic projects deploy them to servers like [heroku](http://www.heroku.com/) or [nodejitsu](http://nodejitsu.com/) to take advantage of custom routing with [express.js](http://expressjs.com/). [Deploy guide here](http://docpad.org/docs/deploy)\n- Built-in server to save you from having to startup your own, for dynamic deployments this even supports things like clean urls, custom routes and server-side logic\n- Robust architecture and powerful plugin system means that you are never boxed in unlike traditional CMS systems, instead you can always [extend DocPad](http://docpad.org/docs/extend) to do whatever you need it to do, and you can even write to bundle common custom functionality and distribute them through the amazing node package manager [npm](http://npmjs.org/)\n- Built in support for dynamic documents (e.g. search pages, signup forms, etc.), so you can code pages that change on each request by just adding `dynamic: true` to your document's meta data (exposes the [express.js](http://expressjs.com/) `req` and `res` objects to your templating engine)\n- You can use it standalone, or even easily include it within your existing systems with our [API](http://docpad.org/docs/api)\n\n\n#### With our amazing community maintained plugins\n\n- Use the [Live Reload](http://docpad.org/plugin/livereload/) plugin to automatically refresh your web browser whenever a change is made, this is amazing\n- Pull in remote RSS/Atom/JSON feeds into your templating engines allowing you to display your latest twitter updates or github projects easily and effortlessly using the [Feedr Plugin](http://docpad.org/plugin/feedr/)\n- Support for every templating engine and pre-processor under the sun, including  but not limited to CoffeeScript, CoffeeKup, ECO, HAML, Handlebars, Jade, Less, Markdown, PHP, Ruby, SASS and Stylus - [the full listing is here](http://docpad.org/docs/plugins)\n- Use the [Partials Plugin](http://docpad.org/plugin/partials) to abstract common pieces of code into their own individual file that can be included as much as you want\n- Syntax highlight code blocks automatically with either our [Highlight.js Plugin](http://docpad.org/plugin/highlightjs/) or [Pygments Plugin](http://docpad.org/plugin/pygments/)\n- Get SEO friendly clean URLs with our [Clean URLs Plugin](http://docpad.org/plugin/cleanurls/) (dynamic deployments only)\n- Lint your code automatically with our Lint Plugins: [jshint](https://github.com/jking90/docpad-plugin-jshint) and [coffeelint](https://github.com/jking90/docpad-plugin-coffeelint)\n- Concatenate and minify your JavaScript and CSS assets making page loads faster for your users with our Minify Plugins: [htmlmin](https://github.com/robloach/docpad-plugin-htmlmin) and [grunt](https://gist.github.com/balupton/3898915)\n- Install common javascript libraries like jQuery, Backbone and Underscore directly from the command line - under construction, coming soon\n- Automatically translate your entire website into other languages with our Translation Plugin - under construction, coming soon\n- Add a admin interface to your website allowing you to edit, save and preview your changes on live websites then push them back to your source repository with the [Admin Plugins](http://docpad.org/docs/plugins#admin-interfaces)\n- Pretty much if DocPad doesn't already do something, it is trivial to [write a plugin](http://docpad.org/docs/extend) to do it, seriously DocPad can accomplish anything, it never holds you back, there are no limits, it's like super powered guardian angel\n- There are also [plenty of other plugins](http://docpad.org/docs/plugins) not listed here that are still definitely worth checking out! :)\n\n\n### People love DocPad\n\nAll sorts of people love DocPad, from first time web developers to even industry leaders and experts. In fact, people even migrate to DocPad from other systems as they love it so much. Here are some our [favourite tweets](https://twitter.com/#!/DocPad/favorites) of what people are saying about DocPad :)\n\n[![Some favourite tweets about DocPad](https://github.com/bevry/designs/raw/master/docpad/favourites/docpad-favs.gif)](https://twitter.com/#!/DocPad/favorites)",
    "bodyHtml": "<p>Hi! I'm DocPad, I streamline the web development process and help close the gap between experts and beginners. I've been used in production by big and small companies for over a year and a half now to create <a href=\"http://docpad.org/docs/showcase\">plenty of amazing and powerful web sites and applications</a> quicker than ever before. What makes me different is instead of being a box to cram yourself into and hold you back, I'm a freeway to what you want to accomplish, just getting out of your way and allowing you to create stuff quicker than ever before without limits. Leave the redundant stuff up to me, so you can focus on the awesome stuff.</p>\n<p>Discover my features below, or skip ahead to the installation instructions to get started with a <a href=\"http://docpad.org/docs/skeletons\">fully functional pre-made website</a> in a few minutes from reading this.</p>\n<h3>Features</h3>\n<h4>Out of the box</h4>\n<ul>\n<li>Completely file based meaning there is no pesky databases that need to be installed, and for version control you get to use systems like Git and SVN which you're already use to (You can still hook in remote data sources if you want, DocPad doesn't impose any limits on you, ever)</li>\n<li>Choose from plenty of community maintained <a href=\"http://docpad.org/docs/skeletons\">pre-made websites</a> to use for your next project instead of starting from scratch everytime</li>\n<li>Write your documents in any language, markup, templating engine, or pre-processor you wish (we're truly agnostic thanks to your plugin system). You can even mix and match them when needed by combining their extensions in a rails like fashion (e.g. <code>coffee-with-some-eco.js.coffee.eco</code>)</li>\n<li>Changes to your website are automatically recompiled through our built in watch system</li>\n<li>Add meta data to the top of your files to be used by templating engines to display non-standard information such as titles and descriptions for your documents</li>\n<li>Display custom listings of content with our powerful <a href=\"https://github.com/bevry/query-engine/\">Query Engine</a> available to your templating engines</li>\n<li>Abstract out generic headers and footers into layouts using our nested layout system</li>\n<li>For simple static websites easily deploy your generated website to any web server like apache or github pages. For dynamic projects deploy them to servers like <a href=\"http://www.heroku.com/\">heroku</a> or <a href=\"http://nodejitsu.com/\">nodejitsu</a> to take advantage of custom routing with <a href=\"http://expressjs.com/\">express.js</a>. <a href=\"http://docpad.org/docs/deploy\">Deploy guide here</a></li>\n<li>Built-in server to save you from having to startup your own, for dynamic deployments this even supports things like clean urls, custom routes and server-side logic</li>\n<li>Robust architecture and powerful plugin system means that you are never boxed in unlike traditional CMS systems, instead you can always <a href=\"http://docpad.org/docs/extend\">extend DocPad</a> to do whatever you need it to do, and you can even write to bundle common custom functionality and distribute them through the amazing node package manager <a href=\"http://npmjs.org/\">npm</a></li>\n<li>Built in support for dynamic documents (e.g. search pages, signup forms, etc.), so you can code pages that change on each request by just adding <code>dynamic: true</code> to your document's meta data (exposes the <a href=\"http://expressjs.com/\">express.js</a> <code>req</code> and <code>res</code> objects to your templating engine)</li>\n<li>You can use it standalone, or even easily include it within your existing systems with our <a href=\"http://docpad.org/docs/api\">API</a></li>\n</ul>\n<h4>With our amazing community maintained plugins</h4>\n<ul>\n<li>Use the <a href=\"http://docpad.org/plugin/livereload/\">Live Reload</a> plugin to automatically refresh your web browser whenever a change is made, this is amazing</li>\n<li>Pull in remote RSS/Atom/JSON feeds into your templating engines allowing you to display your latest twitter updates or github projects easily and effortlessly using the <a href=\"http://docpad.org/plugin/feedr/\">Feedr Plugin</a></li>\n<li>Support for every templating engine and pre-processor under the sun, including  but not limited to CoffeeScript, CoffeeKup, ECO, HAML, Handlebars, Jade, Less, Markdown, PHP, Ruby, SASS and Stylus - <a href=\"http://docpad.org/docs/plugins\">the full listing is here</a></li>\n<li>Use the <a href=\"http://docpad.org/plugin/partials\">Partials Plugin</a> to abstract common pieces of code into their own individual file that can be included as much as you want</li>\n<li>Syntax highlight code blocks automatically with either our <a href=\"http://docpad.org/plugin/highlightjs/\">Highlight.js Plugin</a> or <a href=\"http://docpad.org/plugin/pygments/\">Pygments Plugin</a></li>\n<li>Get SEO friendly clean URLs with our <a href=\"http://docpad.org/plugin/cleanurls/\">Clean URLs Plugin</a> (dynamic deployments only)</li>\n<li>Lint your code automatically with our Lint Plugins: <a href=\"https://github.com/jking90/docpad-plugin-jshint\">jshint</a> and <a href=\"https://github.com/jking90/docpad-plugin-coffeelint\">coffeelint</a></li>\n<li>Concatenate and minify your JavaScript and CSS assets making page loads faster for your users with our Minify Plugins: <a href=\"https://github.com/robloach/docpad-plugin-htmlmin\">htmlmin</a> and <a href=\"https://gist.github.com/balupton/3898915\">grunt</a></li>\n<li>Install common javascript libraries like jQuery, Backbone and Underscore directly from the command line - under construction, coming soon</li>\n<li>Automatically translate your entire website into other languages with our Translation Plugin - under construction, coming soon</li>\n<li>Add a admin interface to your website allowing you to edit, save and preview your changes on live websites then push them back to your source repository with the <a href=\"http://docpad.org/docs/plugins#admin-interfaces\">Admin Plugins</a></li>\n<li>Pretty much if DocPad doesn't already do something, it is trivial to <a href=\"http://docpad.org/docs/extend\">write a plugin</a> to do it, seriously DocPad can accomplish anything, it never holds you back, there are no limits, it's like super powered guardian angel</li>\n<li>There are also <a href=\"http://docpad.org/docs/plugins\">plenty of other plugins</a> not listed here that are still definitely worth checking out! :)</li>\n</ul>\n<h3>People love DocPad</h3>\n<p>All sorts of people love DocPad, from first time web developers to even industry leaders and experts. In fact, people even migrate to DocPad from other systems as they love it so much. Here are some our <a href=\"https://twitter.com/#!/DocPad/favorites\">favourite tweets</a> of what people are saying about DocPad :)</p>\n<p><a href=\"https://twitter.com/#!/DocPad/favorites\"><img src=\"https://github.com/bevry/designs/raw/master/docpad/favourites/docpad-favs.gif\" alt=\"Some favourite tweets about DocPad\"></a></p>\n"
  },
  {
    "title": "Docpress",
    "repo": "docpress/docpress",
    "homepage": "http://docpress.github.io",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Markdown"],
    "description": "Painless Markdown publishing",
    "bodyContent": "Docpress generates websites from your project's basic documentation; that is, at the very least, a README.md file. \nIt also supports multiple Markdown pages in `docs/`. Checkout our [Homepage](http://docpress.github.io) for a quick example.\n\n## Examples\nCheck out the [Docpress Showcase](https://github.com/docpress/docpress/blob/master/docs/showcase.md) to see how Docpress helped developers build great-looking websites.\n\n## Usage\n\nStill under heavy development, consider this a preview.\nSee the [Getting Started](docs/getting-started/quickstart.md) guide for more details.\n\n```sh\n$ npm install -g docpress\n$ echo \"# My project\" > README.md\n$ echo \"Documented by Markdown files.\" >> README.md\n$ docpress serve\n\n  Docpress\n  starting development - ^C to exit\n\n  350ms ✓   first build                 \n      on    watching changes\n      on    livereload\n      on    http://localhost:3000\n\n  Running\n```\n\nScreenshot\n-----------\n\n![Screenshot](https://i.imgur.com/eSXOeVw.png)\n\n\nSupport\n-------\n\n- [Documentation](http://docpress.github.io/)\n- [Gitter chat](https://gitter.im/docpress/Lobby)\n\nLet's build our first Docpress site.\n[Quickstart guide →](docs/getting-started/quickstart.md)\n\nThanks\n------\n**docpress** © 2015+, Rico Sta. Cruz. Released under the [MIT] License.<br>\nAuthored and maintained by Rico Sta. Cruz with help from contributors ([list][contributors]).\n\n> [ricostacruz.com](http://ricostacruz.com) &nbsp;&middot;&nbsp;\n> GitHub [@rstacruz](https://github.com/rstacruz) &nbsp;&middot;&nbsp;\n> Twitter [@rstacruz](https://twitter.com/rstacruz)\n\n[MIT]: http://mit-license.org/\n[contributors]: http://github.com/rstacruz/docpress/contributors",
    "bodyHtml": "<p>Docpress generates websites from your project's basic documentation; that is, at the very least, a README.md file.\nIt also supports multiple Markdown pages in <code>docs/</code>. Checkout our <a href=\"http://docpress.github.io\">Homepage</a> for a quick example.</p>\n<h2>Examples</h2>\n<p>Check out the <a href=\"https://github.com/docpress/docpress/blob/master/docs/showcase.md\">Docpress Showcase</a> to see how Docpress helped developers build great-looking websites.</p>\n<h2>Usage</h2>\n<p>Still under heavy development, consider this a preview.\nSee the <a href=\"docs/getting-started/quickstart.md\">Getting Started</a> guide for more details.</p>\n<pre><code class=\"hljs\">$ npm install -g docpress\n$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"# My project\"</span> &gt; README.md\n$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Documented by Markdown files.\"</span> &gt;&gt; README.md\n$ docpress serve\n\n  Docpress\n  starting development - ^C to <span class=\"hljs-built_in\">exit</span>\n\n  350ms ✓   first build                 \n      on    watching changes\n      on    livereload\n      on    http://localhost:3000\n\n  Running</code></pre><h2>Screenshot</h2>\n<p><img src=\"https://i.imgur.com/eSXOeVw.png\" alt=\"Screenshot\"></p>\n<h2>Support</h2>\n<ul>\n<li><a href=\"http://docpress.github.io/\">Documentation</a></li>\n<li><a href=\"https://gitter.im/docpress/Lobby\">Gitter chat</a></li>\n</ul>\n<p>Let's build our first Docpress site.\n<a href=\"docs/getting-started/quickstart.md\">Quickstart guide →</a></p>\n<h2>Thanks</h2>\n<p><strong>docpress</strong> © 2015+, Rico Sta. Cruz. Released under the <a href=\"http://mit-license.org/\">MIT</a> License.&lt;br&gt;\nAuthored and maintained by Rico Sta. Cruz with help from contributors (<a href=\"http://github.com/rstacruz/docpress/contributors\">list</a>).</p>\n<blockquote>\n<p><a href=\"http://ricostacruz.com\">ricostacruz.com</a>  · \nGitHub <a href=\"https://github.com/rstacruz\">@rstacruz</a>  · \nTwitter <a href=\"https://twitter.com/rstacruz\">@rstacruz</a></p>\n</blockquote>\n"
  },
  {
    "title": "Docusaurus",
    "repo": "facebook/Docusaurus",
    "homepage": "https://docusaurus.io",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Markdown"],
    "description": "Easy to Maintain Open Source Documentation Websites",
    "startertemplaterepo": "anishkny/docusaurus-base",
    "twitter": "docusaurus",
    "bodyContent": "## Powered by Markdown\n\nSave time and focus on your project's documentation. Simply write docs and blog posts with Markdown and Docusaurus will publish a set of static html files ready to serve.\n\n## Built Using React\n\nExtend or customize your project's layout by reusing React. Docusaurus can be extended while reusing the same header and footer.\n\n## Ready for Translations\n\nLocalization comes pre-configured. Use Crowdin to translate your docs into over 70 languages.\n\n## Document Versioning\n\nSupport users on all versions of your project. Document versioning helps you keep documentation in sync with project releases.\n\n## Document Search\n\nMake it easy for your community to find what they need in your documentation. We proudly support Algolia documentation search.",
    "bodyHtml": "<h2>Powered by Markdown</h2>\n<p>Save time and focus on your project's documentation. Simply write docs and blog posts with Markdown and Docusaurus will publish a set of static html files ready to serve.</p>\n<h2>Built Using React</h2>\n<p>Extend or customize your project's layout by reusing React. Docusaurus can be extended while reusing the same header and footer.</p>\n<h2>Ready for Translations</h2>\n<p>Localization comes pre-configured. Use Crowdin to translate your docs into over 70 languages.</p>\n<h2>Document Versioning</h2>\n<p>Support users on all versions of your project. Document versioning helps you keep documentation in sync with project releases.</p>\n<h2>Document Search</h2>\n<p>Make it easy for your community to find what they need in your documentation. We proudly support Algolia documentation search.</p>\n"
  },
  {
    "title": "drupan",
    "repo": "fallenhitokiri/drupan",
    "homepage": "https://github.com/fallenhitokiri/drupan",
    "language": ["Python"],
    "license": ["BSD 2-Clause"],
    "templates": ["Jinja2"],
    "description": "trying to hit the sweet spot between simplicity and being feature rich enough for every use case.",
    "bodyContent": "Drupan is a static site generator which initially focused on blogs and is now evolving into a universal tool working for blogs, single page applications and conventional websites alike.\n\nThe goal is to give developers and designers one tool they can rely on, that gets the job done and does not require hours of customization and plugins to generate a site.\n\n### Notable Features\n* Jinja2 with custom filters to allow easily accessing, iterating and filtering all your different entities.\n* Sane plugin architecture allowing you to easily add missing functionality.\n* No enforced structure of meta data and content.\n* Active developed.\n\n### Upcoming Features\nThere is a 2.0 release in alpha testing which will bring the following features\n\n* S3 and CloudFront support\n* Better Jinja2 filters\n* Faster site generation",
    "bodyHtml": "<p>Drupan is a static site generator which initially focused on blogs and is now evolving into a universal tool working for blogs, single page applications and conventional websites alike.</p>\n<p>The goal is to give developers and designers one tool they can rely on, that gets the job done and does not require hours of customization and plugins to generate a site.</p>\n<h3>Notable Features</h3>\n<ul>\n<li>Jinja2 with custom filters to allow easily accessing, iterating and filtering all your different entities.</li>\n<li>Sane plugin architecture allowing you to easily add missing functionality.</li>\n<li>No enforced structure of meta data and content.</li>\n<li>Active developed.</li>\n</ul>\n<h3>Upcoming Features</h3>\n<p>There is a 2.0 release in alpha testing which will bring the following features</p>\n<ul>\n<li>S3 and CloudFront support</li>\n<li>Better Jinja2 filters</li>\n<li>Faster site generation</li>\n</ul>\n"
  },
  {
    "title": "DSSG",
    "repo": "kambrium/dssg",
    "homepage": "https://github.com/kambrium/dssg",
    "language": ["D"],
    "license": ["MIT"],
    "templates": ["Mustache"],
    "description": "A static site generator written in D",
    "startertemplaterepo": "kambrium/dssg-example",
    "bodyContent": "DSSG is a static site generator written in the D programming language. It creates HTML pages out of Markdown files and Mustache templates.",
    "bodyHtml": "<p>DSSG is a static site generator written in the D programming language. It creates HTML pages out of Markdown files and Mustache templates.</p>\n"
  },
  {
    "title": "Easystatic",
    "repo": "easystatic/easystatic",
    "homepage": "https://easystatic.com/",
    "language": ["JavaScript"],
    "license": ["Apache 2.0"],
    "templates": ["EJS"],
    "description": "Static site generator powered by Markdown It, Postcss, Babel, Browsersync",
    "bodyContent": "Easystatic uses [Markdown It](https://markdown-it.github.io/) for web pages,\n[EJS](http://ejs.co/) and [PostCSS](http://postcss.org/) +\n[Autoprefixer](https://github.com/postcss/autoprefixer) for layout,\n[Browsersync](https://browsersync.io/) for cross-device testing...\n\n### Why use Easystatic?\n\n1. It advocates convention over configuration\n2. It's JavaScript-based, no need to have Ruby/Go/PHP installed\n3. It's build around modern mainstream front-end tools such as PostCSS, Babel, Browsersync\n4. It contains a build-in development server with \"live reload\"\n5. It can scaffold the basic site layout for you based on [Material Design Lite](http://getmdl.io/) (MDL)\n\n### How to Use\n\n```sh\n$ npm install -g easystatic\n$ es start <path>\n```\n\n...where `<path>` is the folder with `*.md` files, or an empty folder. For example:\n\n```sh\n$ es start mysite.com\n```\n\nThis command launches your site in a browser and starts watching for modifications in source files\n(`<path>/*.md`, `<path>/assets/*.*`).\n\n### How to Deploy\n\nHere is an example of how you can deploy your site to GitHub Pages:\n\n```sh\n$ es deploy mysite.com --repo=username/mysite.com --domain=mysite.com\n```\n\nFor more info, please visit [www.easystatic.com](https://easystatic.com)",
    "bodyHtml": "<p>Easystatic uses <a href=\"https://markdown-it.github.io/\">Markdown It</a> for web pages,\n<a href=\"http://ejs.co/\">EJS</a> and <a href=\"http://postcss.org/\">PostCSS</a> +\n<a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> for layout,\n<a href=\"https://browsersync.io/\">Browsersync</a> for cross-device testing...</p>\n<h3>Why use Easystatic?</h3>\n<ol>\n<li>It advocates convention over configuration</li>\n<li>It's JavaScript-based, no need to have Ruby/Go/PHP installed</li>\n<li>It's build around modern mainstream front-end tools such as PostCSS, Babel, Browsersync</li>\n<li>It contains a build-in development server with &quot;live reload&quot;</li>\n<li>It can scaffold the basic site layout for you based on <a href=\"http://getmdl.io/\">Material Design Lite</a> (MDL)</li>\n</ol>\n<h3>How to Use</h3>\n<pre><code class=\"hljs\">$ npm install -g easystatic\n$ es start &lt;path&gt;</code></pre><p>...where <code>&lt;path&gt;</code> is the folder with <code>*.md</code> files, or an empty folder. For example:</p>\n<pre><code class=\"hljs\">$ es start mysite.com</code></pre><p>This command launches your site in a browser and starts watching for modifications in source files\n(<code>&lt;path&gt;/*.md</code>, <code>&lt;path&gt;/assets/*.*</code>).</p>\n<h3>How to Deploy</h3>\n<p>Here is an example of how you can deploy your site to GitHub Pages:</p>\n<pre><code class=\"hljs\">$ es deploy mysite.com --repo=username/mysite.com --domain=mysite.com</code></pre><p>For more info, please visit <a href=\"https://easystatic.com\">www.easystatic.com</a></p>\n"
  },
  {
    "title": "Eleventy",
    "repo": "11ty/eleventy",
    "homepage": "https://11ty.io/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": [
      "Liquid",
      "Nunjucks",
      "Handlebars",
      "Mustache",
      "EJS",
      "Haml",
      "Pug",
      "JavaScript"
    ],
    "description": "A simpler static site generator",
    "startertemplaterepo": "11ty/eleventy-base-blog",
    "twitter": "eleven_ty",
    "bodyContent": "A simpler static site generator. An alternative to Jekyll.\nWritten in JavaScript. Transforms a directory of templates (of varying types) into HTML.",
    "bodyHtml": "<p>A simpler static site generator. An alternative to Jekyll.\nWritten in JavaScript. Transforms a directory of templates (of varying types) into HTML.</p>\n"
  },
  {
    "title": "Elsa",
    "repo": "pyvec/elsa",
    "homepage": "https://github.com/pyvec/elsa",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "Helper module for hosting Frozen-Flask-based websites on GitHub Pages",
    "bodyContent": "Elsa helps you to build your [Frozen-Flask]({% post_url frozen-flask %})-based website and to deploy it to [GitHub Pages](https://pages.github.com/).\n\nIt has convenient CLI to simplify your project chores and comes with out-of-the-box [Travis CI](https://www.travis-ci.org/) compatibility.\n\n```shell\npython foo.py serve   # serves the site, no freezing, so you can check the result\npython foo.py freeze  # freezes the site, i.e. makes an HTML snapshot\npython foo.py deploy  # deploys the frozen site to GitHub Pages\n```\n\nLearn more in the [Quickstart](https://github.com/pyvec/elsa/blob/master/QUICKSTART.rst)!",
    "bodyHtml": "<p>Elsa helps you to build your [Frozen-Flask]({% post_url frozen-flask %})-based website and to deploy it to <a href=\"https://pages.github.com/\">GitHub Pages</a>.</p>\n<p>It has convenient CLI to simplify your project chores and comes with out-of-the-box <a href=\"https://www.travis-ci.org/\">Travis CI</a> compatibility.</p>\n<pre><code class=\"hljs\">python foo.py serve   # serves the site, no freezing, so you can check the result\npython foo.py freeze  # freezes the site, i.e. makes an HTML snapshot\npython foo.py deploy  # deploys the frozen site to GitHub Pages</code></pre><p>Learn more in the <a href=\"https://github.com/pyvec/elsa/blob/master/QUICKSTART.rst\">Quickstart</a>!</p>\n"
  },
  {
    "title": "Ember-Ghost",
    "repo": "stonecircle/ember-ghost",
    "homepage": "https://github.com/stonecircle/ember-ghost",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Ember", "Markdown"],
    "description": "Fully-functional, SEO friendly static site implementation of a blog system built on Ember",
    "startertemplaterepo": "stonecircle/ember-ghost-netlify-casper-template",
    "bodyContent": "This project is designed to be a fully-functional, static site implementation of a blog system that is mostly compatible with [Ghost](https://ghost.org/) and is built on EmberJS with fully working out of the\nbox SEO friendly output.\n\n## Features\n\n* Fast no-reload page changes\n* No web-development skills required to get up and running\n* Uses Markdown to author content\n* Built on Ember and uses ember-cli, the best frontend cli on the market right now!\n\n## Templates\n\nEmber-Ghost supports the use of shallow forks of Ghost themes and currently supports\n\n- [Ember Ghost Casper Template](https://github.com/stonecircle/ember-ghost-casper-template) which is a shallow fork of the official [Casper Template](https://github.com/TryGhost/Casper)\n- [Ember Ghost Atilla Template](https://github.com/stonecircle/ember-ghost-attila-template) which is a shallow fork of [Atilla](https://github.com/zutrinken/attila)\n\nAs Ghost uses handlebars it is not too difficult to port an existing template to use Ember templates.\n\n\n## Examples\n\nThe default output can be seen deployed on Netlify here: https://ember-ghost-casper-template.netlify.com/\n\nIf you want an example of the this \"in production\" then check out the [Stone Circle\nBlog](https://blog.stonecircle.io). If you use this in production let us know [on\nTwitter](https://twitter.com/stonecircle_co) and we can add a \"built with\nember-ghost-casper-template\" wiki.\n\nYou do not need to be a web developer to be able to use this system. You just write markdown files\nand the rest of the work is performed by EmberJS' build system.",
    "bodyHtml": "<p>This project is designed to be a fully-functional, static site implementation of a blog system that is mostly compatible with <a href=\"https://ghost.org/\">Ghost</a> and is built on EmberJS with fully working out of the\nbox SEO friendly output.</p>\n<h2>Features</h2>\n<ul>\n<li>Fast no-reload page changes</li>\n<li>No web-development skills required to get up and running</li>\n<li>Uses Markdown to author content</li>\n<li>Built on Ember and uses ember-cli, the best frontend cli on the market right now!</li>\n</ul>\n<h2>Templates</h2>\n<p>Ember-Ghost supports the use of shallow forks of Ghost themes and currently supports</p>\n<ul>\n<li><a href=\"https://github.com/stonecircle/ember-ghost-casper-template\">Ember Ghost Casper Template</a> which is a shallow fork of the official <a href=\"https://github.com/TryGhost/Casper\">Casper Template</a></li>\n<li><a href=\"https://github.com/stonecircle/ember-ghost-attila-template\">Ember Ghost Atilla Template</a> which is a shallow fork of <a href=\"https://github.com/zutrinken/attila\">Atilla</a></li>\n</ul>\n<p>As Ghost uses handlebars it is not too difficult to port an existing template to use Ember templates.</p>\n<h2>Examples</h2>\n<p>The default output can be seen deployed on Netlify here: https://ember-ghost-casper-template.netlify.com/</p>\n<p>If you want an example of the this &quot;in production&quot; then check out the <a href=\"https://blog.stonecircle.io\">Stone Circle\nBlog</a>. If you use this in production let us know <a href=\"https://twitter.com/stonecircle_co\">on\nTwitter</a> and we can add a &quot;built with\nember-ghost-casper-template&quot; wiki.</p>\n<p>You do not need to be a web developer to be able to use this system. You just write markdown files\nand the rest of the work is performed by EmberJS' build system.</p>\n"
  },
  {
    "title": "Enduro.js",
    "repo": "gottwik/enduro",
    "homepage": "http://endurojs.com/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "Minimalistic, lean & mean, node.js static page generator",
    "startertemplaterepo": "gottwik/enduro_mirror",
    "bodyContent": "## Built for speed\nClicking is lame. With enduro.js, exactly zero clicks are necessary to build the whole project.\n\n## Killer admin ui\nSomebody non-technical will eventually manage content on the website. You might as well provide this person with awesome, beautiful, quick and simple experience.\n\n## Blazing fast\nSlow pageloads are the worst. Enduro pregenerates pages to provide the fastest possible response time. Coupled with direct uploading to cdn - can't get any faster.\n\n## Build tool\nSass check. Spritessheet generation check. Enduro.js comes with set of build tools to build everything on the server. Forget about ftping built files.\n\n## Live reload\nEnduro.js comes with browsersync build in and everything hooked up. Change the color in sass file - BOOM - 0.1 seconds later you see the new color in your browser.\n\n## Code separation\nEnduro.js is built around handlebars. Logiless templates. No way to spagetticode it now.\n\n## Shared templates\nHtml components written for backend are accessible to frontend's javascript as well. Amazing.\n\n## Isomorphic javascript\nUsing javascript for both frontend and backend is just a great idea. With enduro.js, all your javascript modules can now be loaded by page generation, api and frontend code.\n\n## Deploy by git\nWhat do you need to deploy the project? Git url. Thats it. Everything is set up. Server will build everything with enduro.js.\n\n## Scalable\nEnduro.js projects are self-contained and ready to be web-scaled with push of a button.\n\n## Flat files\nNo database. Just tiny flat files. Ready to be edited by your favorite text editor. Incredibly convenient, ready to be stored in git. No setup required.\n\n## Rapid api\nEnduro comes with a simple framework built on top of express. Using raw power of node.js you can add mongodb or complex functionality to your website.\n\n## Simple\nLearning curve so flat it is actually going down. No setup, no magic. Enduro.js comes with a scaffolding to set you up and get you running quickly.\n\n## Multilingual\nSo you are making a website that will be published in multiple languages? Built in. Out of the box. No setup.\n\n## Open source\nEnduro.js is open-source and free to use. Distributed under the MIT License\n\n## Good parts\nOnly the best ingredients were used when making Enduro. Handlebars, Sass, Gulp, Bootstrap, Angularjs, Browsersync, Express, Jasmine, Git, Npm and Heroku",
    "bodyHtml": "<h2>Built for speed</h2>\n<p>Clicking is lame. With enduro.js, exactly zero clicks are necessary to build the whole project.</p>\n<h2>Killer admin ui</h2>\n<p>Somebody non-technical will eventually manage content on the website. You might as well provide this person with awesome, beautiful, quick and simple experience.</p>\n<h2>Blazing fast</h2>\n<p>Slow pageloads are the worst. Enduro pregenerates pages to provide the fastest possible response time. Coupled with direct uploading to cdn - can't get any faster.</p>\n<h2>Build tool</h2>\n<p>Sass check. Spritessheet generation check. Enduro.js comes with set of build tools to build everything on the server. Forget about ftping built files.</p>\n<h2>Live reload</h2>\n<p>Enduro.js comes with browsersync build in and everything hooked up. Change the color in sass file - BOOM - 0.1 seconds later you see the new color in your browser.</p>\n<h2>Code separation</h2>\n<p>Enduro.js is built around handlebars. Logiless templates. No way to spagetticode it now.</p>\n<h2>Shared templates</h2>\n<p>Html components written for backend are accessible to frontend's javascript as well. Amazing.</p>\n<h2>Isomorphic javascript</h2>\n<p>Using javascript for both frontend and backend is just a great idea. With enduro.js, all your javascript modules can now be loaded by page generation, api and frontend code.</p>\n<h2>Deploy by git</h2>\n<p>What do you need to deploy the project? Git url. Thats it. Everything is set up. Server will build everything with enduro.js.</p>\n<h2>Scalable</h2>\n<p>Enduro.js projects are self-contained and ready to be web-scaled with push of a button.</p>\n<h2>Flat files</h2>\n<p>No database. Just tiny flat files. Ready to be edited by your favorite text editor. Incredibly convenient, ready to be stored in git. No setup required.</p>\n<h2>Rapid api</h2>\n<p>Enduro comes with a simple framework built on top of express. Using raw power of node.js you can add mongodb or complex functionality to your website.</p>\n<h2>Simple</h2>\n<p>Learning curve so flat it is actually going down. No setup, no magic. Enduro.js comes with a scaffolding to set you up and get you running quickly.</p>\n<h2>Multilingual</h2>\n<p>So you are making a website that will be published in multiple languages? Built in. Out of the box. No setup.</p>\n<h2>Open source</h2>\n<p>Enduro.js is open-source and free to use. Distributed under the MIT License</p>\n<h2>Good parts</h2>\n<p>Only the best ingredients were used when making Enduro. Handlebars, Sass, Gulp, Bootstrap, Angularjs, Browsersync, Express, Jasmine, Git, Npm and Heroku</p>\n"
  },
  {
    "title": "Enfield",
    "repo": "fortes/enfield",
    "homepage": "https://github.com/fortes/enfield",
    "language": ["CoffeeScript"],
    "license": ["MIT"],
    "templates": ["Liquid"],
    "description": "Node.js Jekyll Port",
    "bodyContent": "Jekyll-like static site generator for node.js that aims to be as compatible as possible with [Jekyll](https://github.com/jekyll/jekyll).\n\n## Features\n\nCore functionality is identical to Jekyll:\n\n* Blog aware static site generator\n* Compatible with the Jekyll directory and file structure\n* Use Markdown for posts\n* Code highlighting via Pygments or Highlight.js\n* Layouts written using Liquid template engine\n* Server / Auto-regenerate\n* Extension-less page URLs (i.e. `/example/` from `/example.html` via `pretty_urls` configuration variable)\n\nThere are a few bonus features not present in the default install of Jekyll:\n\n* Jekyll-like plugin model, with CoffeeScript/JS instead of Ruby\n* Use Markdown within includes\n* Compile and minify CoffeeScript & LESS\n* Support post and page URL aliases via redirects\n\nFinally, there are a few missing features:\n\n* Textile support\n* Importing tools",
    "bodyHtml": "<p>Jekyll-like static site generator for node.js that aims to be as compatible as possible with <a href=\"https://github.com/jekyll/jekyll\">Jekyll</a>.</p>\n<h2>Features</h2>\n<p>Core functionality is identical to Jekyll:</p>\n<ul>\n<li>Blog aware static site generator</li>\n<li>Compatible with the Jekyll directory and file structure</li>\n<li>Use Markdown for posts</li>\n<li>Code highlighting via Pygments or Highlight.js</li>\n<li>Layouts written using Liquid template engine</li>\n<li>Server / Auto-regenerate</li>\n<li>Extension-less page URLs (i.e. <code>/example/</code> from <code>/example.html</code> via <code>pretty_urls</code> configuration variable)</li>\n</ul>\n<p>There are a few bonus features not present in the default install of Jekyll:</p>\n<ul>\n<li>Jekyll-like plugin model, with CoffeeScript/JS instead of Ruby</li>\n<li>Use Markdown within includes</li>\n<li>Compile and minify CoffeeScript &amp; LESS</li>\n<li>Support post and page URL aliases via redirects</li>\n</ul>\n<p>Finally, there are a few missing features:</p>\n<ul>\n<li>Textile support</li>\n<li>Importing tools</li>\n</ul>\n"
  },
  {
    "title": "Entu SSG",
    "repo": "entu/ssg",
    "homepage": "https://ssg.entu.app",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Pug", "Markdown", "Stylus"],
    "description": "A simple Pug, Markdown, Yaml static site generator with multi-locale support.",
    "bodyContent": "Entu SSG is a simple Pug, Markdown, Yaml static site generator with multi-locale support.\n\n## Benefits\n\n- Simple Pug (former Jade), Markdown, Yaml static site generator.\n- Generate static HTML files from [Pug](https://pugjs.org) templates or [Markdown](https://en.wikipedia.org/wiki/Markdown).\n- Pass data to templates with [Yaml](http://yaml.org) files.\n- Use locale identificator in filenames to generate locale specific content and paths.\n- Generate site CSS from [Stylus](http://stylus-lang.com) files.\n- Use Your favorite tools/editors.\n- Host it on Your own server, on [Netlify](https://www.netlify.com), on [S3](https://aws.amazon.com/s3/), on ...\n\n\n## Installation and usage\n\n1. Download [latest build](https://github.com/entu/entu-ssg/releases/latest)\n2. Run:\n```\n    ./build.js ./my-page/entu-ssg-config.yaml\n```\n\n\n### Configuration\n\nSites build process is configurable by Yaml file and its path must be first argument for entu-ssg.js. Required parameters are:\n\n- __locales__ - List of locale folders to generate. You can put locale identificator to filename (like index.en.pug or data.et.yaml) for locale speciffic content.\n- __defaultLocale__ - If set, page paths in this locale will not get locale prefix (_/en/about_ will be just _/about_).\n- __source__ - Folder with source files (realtive to build config.yaml). Folders beginning with underscore are ignored.\n- __build__ - Folder to put generated HTML (realtive to build config.yaml).\n- __assets__ - Folder with static assets (JS, images, ...).\n- __protectedFromCleanup__ - List of paths what is not deleted if _build.sh_ is ran with _cleanup_ parameter. Relative to _build_ path.\n- __server.port__ - What port to use for serving on localhost.\n- __server.assets__ - Serving page in localhost will map this url to folder specified in _assets_ parameter.\n- __dev.aliases__ - Build pages aliases.\n- __dev.paths__ - List of (source) paths to build. Relative to _source_ path.\n\n### Example build configuration file:\n\n```\nlocales:\n  - en\n  - et\nsource: ./source\nbuild: ./build\nassets: ./assets\nprotectedFromCleanup:\n  - assets\n  - index.html\nserver:\n  port: 4000\n  assets: /assets/\ndev:\n  aliases: true\n  paths:\n    - test/page1\n    - test/page2\n```\n\n\n## Content\n\n### Page content - index.pug\n\nPage content is generated from __index.pug__ file. All other files are ignored, but You can use those files for Pug [include](https://pugjs.org/language/includes.html)/[extends](https://pugjs.org/language/inheritance.html). You can put locale identificator to filename (like index.en.pug) for locale speciffic content.\n\n### Page data and configuration - data.yaml\n\nTo pass data to index.pug use __data.yaml__ file. This data is passed to index.pug in object named _self_ (To get property _text_ from data.yaml use _self.text_ in index.pug).\n\nYou can put locale identificator to filename (like data.en.yaml) for locale speciffic content.\n\nSome page parameters will change how HTML is generated. Those are:\n- __disabled__ - If true, page will not be generated nor loaded to _self.otherLocalePaths_ object.\n- __path__ - If set, it will override folder based path.\n- __aliases__ - List of path aliases. Will make redirekt urls to original path.\n- __data__ - Files to load data from. This data is passed to index.pug in object named _self.data_. You can use relative path (./ or ../). If used, it's relative to _data.yaml_ file. Root (/) path is Your source folder (set in _config.yaml_).\n\n### Example page data.yaml:\n\n```\npath: /testpage1\naliases:\n  - /test\n  - /test123\ndata:\n  news: ./datafiles/news.yaml\nsomeOtherData:\n  - A\n  - B\n```\n\n### Page style - style.styl\n\nTo generate page CSS use __.styl__ files. Global style.css is combined from all .styl files (from source folder) and saved to build's root folder (like /style.css).\n\n### Page scripts - script.js\n\nTo generate page JS use __.js__ files. Global script.js is combined from all .js files (from source folder) and saved to build's root folder (like /script.js).\n\n## On build ...\n\n### ... source folder like this ...\n\n```\n- source\n    |- _templates\n    |   |- layout.pug\n    |   |- mixins.pug\n    |   +- somescripts.js\n    |\n    |- testpage1\n    |   |- data.en.yaml\n    |   |- data.et.yaml\n    |   |- index.pug\n    |   +- style.et.styl\n    |\n    |- testpage2\n    |   |- index.en.pug\n    |   |- index.et.pug\n    |   |- data.yaml\n    |   +- testpage2en\n    |       |- index.en.pug\n    |       +- data.en.yaml\n    |\n    |- index.pug\n    +- style.styl\n```\n\n### ... will be converted to build folder like this\n\n```\n- build\n    |- en\n    |   |- index.html\n    |   |- testpage1\n    |   |   +- index.html\n    |   |\n    |   +- testpage2\n    |       |- index.html\n    |       +- testpage2en\n    |           +- index.html\n    |\n    |- et\n    |   |- index.html\n    |   |- testpage1\n    |   |   +- index.html\n    |   |\n    |   +- testpage2\n    |       +- index.html\n    |- script.js\n    |- script.js.map\n    |- style.css\n    +- style.css.map\n```",
    "bodyHtml": "<p>Entu SSG is a simple Pug, Markdown, Yaml static site generator with multi-locale support.</p>\n<h2>Benefits</h2>\n<ul>\n<li>Simple Pug (former Jade), Markdown, Yaml static site generator.</li>\n<li>Generate static HTML files from <a href=\"https://pugjs.org\">Pug</a> templates or <a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a>.</li>\n<li>Pass data to templates with <a href=\"http://yaml.org\">Yaml</a> files.</li>\n<li>Use locale identificator in filenames to generate locale specific content and paths.</li>\n<li>Generate site CSS from <a href=\"http://stylus-lang.com\">Stylus</a> files.</li>\n<li>Use Your favorite tools/editors.</li>\n<li>Host it on Your own server, on <a href=\"https://www.netlify.com\">Netlify</a>, on <a href=\"https://aws.amazon.com/s3/\">S3</a>, on ...</li>\n</ul>\n<h2>Installation and usage</h2>\n<ol>\n<li>Download <a href=\"https://github.com/entu/entu-ssg/releases/latest\">latest build</a></li>\n<li>Run:</li>\n</ol>\n<pre><code>    ./build.js ./my-page/entu-ssg-config.yaml\n</code></pre>\n<h3>Configuration</h3>\n<p>Sites build process is configurable by Yaml file and its path must be first argument for entu-ssg.js. Required parameters are:</p>\n<ul>\n<li><strong>locales</strong> - List of locale folders to generate. You can put locale identificator to filename (like index.en.pug or data.et.yaml) for locale speciffic content.</li>\n<li><strong>defaultLocale</strong> - If set, page paths in this locale will not get locale prefix (<em>/en/about</em> will be just <em>/about</em>).</li>\n<li><strong>source</strong> - Folder with source files (realtive to build config.yaml). Folders beginning with underscore are ignored.</li>\n<li><strong>build</strong> - Folder to put generated HTML (realtive to build config.yaml).</li>\n<li><strong>assets</strong> - Folder with static assets (JS, images, ...).</li>\n<li><strong>protectedFromCleanup</strong> - List of paths what is not deleted if <em>build.sh</em> is ran with <em>cleanup</em> parameter. Relative to <em>build</em> path.</li>\n<li><strong>server.port</strong> - What port to use for serving on localhost.</li>\n<li><strong>server.assets</strong> - Serving page in localhost will map this url to folder specified in <em>assets</em> parameter.</li>\n<li><strong>dev.aliases</strong> - Build pages aliases.</li>\n<li><strong>dev.paths</strong> - List of (source) paths to build. Relative to <em>source</em> path.</li>\n</ul>\n<h3>Example build configuration file:</h3>\n<pre><code>locales:\n  - en\n  - et\nsource: ./source\nbuild: ./build\nassets: ./assets\nprotectedFromCleanup:\n  - assets\n  - index.html\nserver:\n  port: 4000\n  assets: /assets/\ndev:\n  aliases: true\n  paths:\n    - test/page1\n    - test/page2\n</code></pre>\n<h2>Content</h2>\n<h3>Page content - index.pug</h3>\n<p>Page content is generated from <strong>index.pug</strong> file. All other files are ignored, but You can use those files for Pug <a href=\"https://pugjs.org/language/includes.html\">include</a>/<a href=\"https://pugjs.org/language/inheritance.html\">extends</a>. You can put locale identificator to filename (like index.en.pug) for locale speciffic content.</p>\n<h3>Page data and configuration - data.yaml</h3>\n<p>To pass data to index.pug use <strong>data.yaml</strong> file. This data is passed to index.pug in object named <em>self</em> (To get property <em>text</em> from data.yaml use <em>self.text</em> in index.pug).</p>\n<p>You can put locale identificator to filename (like data.en.yaml) for locale speciffic content.</p>\n<p>Some page parameters will change how HTML is generated. Those are:</p>\n<ul>\n<li><strong>disabled</strong> - If true, page will not be generated nor loaded to <em>self.otherLocalePaths</em> object.</li>\n<li><strong>path</strong> - If set, it will override folder based path.</li>\n<li><strong>aliases</strong> - List of path aliases. Will make redirekt urls to original path.</li>\n<li><strong>data</strong> - Files to load data from. This data is passed to index.pug in object named <em>self.data</em>. You can use relative path (./ or ../). If used, it's relative to <em>data.yaml</em> file. Root (/) path is Your source folder (set in <em>config.yaml</em>).</li>\n</ul>\n<h3>Example page data.yaml:</h3>\n<pre><code>path: /testpage1\naliases:\n  - /test\n  - /test123\ndata:\n  news: ./datafiles/news.yaml\nsomeOtherData:\n  - A\n  - B\n</code></pre>\n<h3>Page style - style.styl</h3>\n<p>To generate page CSS use <strong>.styl</strong> files. Global style.css is combined from all .styl files (from source folder) and saved to build's root folder (like /style.css).</p>\n<h3>Page scripts - script.js</h3>\n<p>To generate page JS use <strong>.js</strong> files. Global script.js is combined from all .js files (from source folder) and saved to build's root folder (like /script.js).</p>\n<h2>On build ...</h2>\n<h3>... source folder like this ...</h3>\n<pre><code>- source\n    |- _templates\n    |   |- layout.pug\n    |   |- mixins.pug\n    |   +- somescripts.js\n    |\n    |- testpage1\n    |   |- data.en.yaml\n    |   |- data.et.yaml\n    |   |- index.pug\n    |   +- style.et.styl\n    |\n    |- testpage2\n    |   |- index.en.pug\n    |   |- index.et.pug\n    |   |- data.yaml\n    |   +- testpage2en\n    |       |- index.en.pug\n    |       +- data.en.yaml\n    |\n    |- index.pug\n    +- style.styl\n</code></pre>\n<h3>... will be converted to build folder like this</h3>\n<pre><code>- build\n    |- en\n    |   |- index.html\n    |   |- testpage1\n    |   |   +- index.html\n    |   |\n    |   +- testpage2\n    |       |- index.html\n    |       +- testpage2en\n    |           +- index.html\n    |\n    |- et\n    |   |- index.html\n    |   |- testpage1\n    |   |   +- index.html\n    |   |\n    |   +- testpage2\n    |       +- index.html\n    |- script.js\n    |- script.js.map\n    |- style.css\n    +- style.css.map\n</code></pre>\n"
  },
  {
    "title": "Expansive",
    "repo": "embedthis/expansive",
    "homepage": "https://embedthis.com/expansive",
    "language": ["C", "Ejscript"],
    "license": ["GNU GPL v2.0", "Commercial"],
    "templates": ["Ejscript"],
    "description": "Expansive is a static site generator. It is written in Ejscript, and is blazing fast.",
    "bodyContent": "Expansive is a powerful web site generator that quickly creates compelling web sites with dynamic content.\nIt uses powerful templating, scripting and tooling to provide a complete web site creation environment\nto accelerate your web application development.",
    "bodyHtml": "<p>Expansive is a powerful web site generator that quickly creates compelling web sites with dynamic content.\nIt uses powerful templating, scripting and tooling to provide a complete web site creation environment\nto accelerate your web application development.</p>\n"
  },
  {
    "title": "Expose",
    "repo": "Jack000/Expose",
    "homepage": "https://github.com/Jack000/Expose",
    "language": ["Bash"],
    "license": ["MIT"],
    "templates": ["HTML"],
    "description": "A simple static site generator for photoessays",
    "bodyContent": "Expose is a Bash script that turns images and videos in a folder into a photoessay similar to jack.ventures or jack.works (the authors personal blogs).\n\nIf you're not a fan of that look, a Medium-style theme is included.\n\nThe only dependency is Imagemagick. For videos FFmpeg is also required.",
    "bodyHtml": "<p>Expose is a Bash script that turns images and videos in a folder into a photoessay similar to jack.ventures or jack.works (the authors personal blogs).</p>\n<p>If you're not a fan of that look, a Medium-style theme is included.</p>\n<p>The only dependency is Imagemagick. For videos FFmpeg is also required.</p>\n"
  },
  {
    "title": "Flatmarket",
    "repo": "christophercliff/flatmarket",
    "homepage": "https://christophercliff.com/flatmarket/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Any JS"],
    "description": "A free, open source e-commerce platform for static websites.",
    "bodyContent": "Flatmarket is a free, open source e-commerce platform for static websites. It is reliable, secure, and inexpensive to operate.\n\nThe platform uses Stripe for payment processing and is built on the latest web technologies like hapi, React, and Webpack.\n\nAt its core is a batteries-included CLI to help you get started quickly. Modules are also packaged individually so you can customize your rig.",
    "bodyHtml": "<p>Flatmarket is a free, open source e-commerce platform for static websites. It is reliable, secure, and inexpensive to operate.</p>\n<p>The platform uses Stripe for payment processing and is built on the latest web technologies like hapi, React, and Webpack.</p>\n<p>At its core is a batteries-included CLI to help you get started quickly. Modules are also packaged individually so you can customize your rig.</p>\n"
  },
  {
    "title": "Fledermaus",
    "repo": "sapegin/fledermaus",
    "homepage": "https://github.com/sapegin/fledermaus",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["JSX"],
    "description": "Batman’s toolbelt for static site generation",
    "bodyContent": "Infinitely extensible simple static site generator.\n\n### Features\n\n * JSX templates\n * I18n\n * Syntax highlighting\n * Custom Markdown tags\n * Tools to generate custom pages (not based on Markdown source)\n * Tools for pagination, etc.\n * RSS feed generation\n * Simple and fast\n * Very customizable",
    "bodyHtml": "<p>Infinitely extensible simple static site generator.</p>\n<h3>Features</h3>\n<ul>\n<li>JSX templates</li>\n<li>I18n</li>\n<li>Syntax highlighting</li>\n<li>Custom Markdown tags</li>\n<li>Tools to generate custom pages (not based on Markdown source)</li>\n<li>Tools for pagination, etc.</li>\n<li>RSS feed generation</li>\n<li>Simple and fast</li>\n<li>Very customizable</li>\n</ul>\n"
  },
  {
    "title": "Frog",
    "repo": "greghendershott/frog",
    "homepage": "https://github.com/greghendershott/frog",
    "language": ["Racket"],
    "license": ["MIT"],
    "templates": ["Racket"],
    "description": "Frog is a static web site generator implemented in Racket, targeting Bootstrap.",
    "bodyContent": "Frog is a static web site generator written in [Racket](http://www.racket-lang.org/).\n\nYou write content in [Markdown](http://daringfireball.net/projects/markdown/syntax) or [Scribble](http://docs.racket-lang.org/scribble/index.html). You generate\nfiles. To deploy, you push them to a GitHub Pages repo (or copy them\nto Amazon S3, or whatever).\n\nPosts get a variety of automatic blog features.\n\nYou can also create non-post pages.\n\nThe generated site uses [Bootstrap](http://getbootstrap.com/), which is [responsive](https://en.wikipedia.org/wiki/Responsive_web_design),\nautomatically adapting to various screen sizes.\n\nYes, it's very much like Octopress and others. But Frog doesn't\nrequire installing Ruby. Installing Racket is typically waaaay\nsimpler and faster.\n\nThe only non-Racket part is optionally using [Pygments](http://pygments.org/) to do syntax\nhighlighting.\n\nQ: \"Frog\"?  \nA: Frozen blog.",
    "bodyHtml": "<p>Frog is a static web site generator written in <a href=\"http://www.racket-lang.org/\">Racket</a>.</p>\n<p>You write content in <a href=\"http://daringfireball.net/projects/markdown/syntax\">Markdown</a> or <a href=\"http://docs.racket-lang.org/scribble/index.html\">Scribble</a>. You generate\nfiles. To deploy, you push them to a GitHub Pages repo (or copy them\nto Amazon S3, or whatever).</p>\n<p>Posts get a variety of automatic blog features.</p>\n<p>You can also create non-post pages.</p>\n<p>The generated site uses <a href=\"http://getbootstrap.com/\">Bootstrap</a>, which is <a href=\"https://en.wikipedia.org/wiki/Responsive_web_design\">responsive</a>,\nautomatically adapting to various screen sizes.</p>\n<p>Yes, it's very much like Octopress and others. But Frog doesn't\nrequire installing Ruby. Installing Racket is typically waaaay\nsimpler and faster.</p>\n<p>The only non-Racket part is optionally using <a href=\"http://pygments.org/\">Pygments</a> to do syntax\nhighlighting.</p>\n<p>Q: &quot;Frog&quot;?<br>\nA: Frozen blog.</p>\n"
  },
  {
    "title": "Frozen-Flask",
    "repo": "Frozen-Flask/Frozen-Flask",
    "homepage": "https://pythonhosted.org/Frozen-Flask/",
    "language": ["Python"],
    "license": ["BSD 3-Clause"],
    "templates": ["Jinja2"],
    "description": "Frozen-Flask freezes a Flask application into a set of static files.",
    "bodyContent": "Frozen-Flask freezes a [Flask](http://flask.pocoo.org/) application into a set of static files. It works by simulating requests at the WSGI level and writing the responses to aptly named files.",
    "bodyHtml": "<p>Frozen-Flask freezes a <a href=\"http://flask.pocoo.org/\">Flask</a> application into a set of static files. It works by simulating requests at the WSGI level and writing the responses to aptly named files.</p>\n"
  },
  {
    "title": "Gatsby",
    "repo": "gatsbyjs/gatsby",
    "homepage": "http://gatsbyjs.org",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["React"],
    "description": "Build blazing fast, modern apps and websites with React",
    "startertemplaterepo": "gatsbyjs/gatsby-starter-default",
    "twitter": "gatsbyjs",
    "bodyContent": "Build blazing-fast, modern apps and websites with React\n\n## Features\n\n* Fast no-reload page changes\n* Build sites with React.js components\n* Hot reload editing. Tweak pages, templates, and styles and see changes in real time.\n\n## Modern web tech without the headache\n\nEnjoy the power of the latest web technologies – React.js, Webpack, modern JavaScript and CSS and more — all setup and waiting for you to start building.\n\n## Bring your own data\n\nGatsby’s rich data plugin ecosystem lets you build sites with the data you want — from one or many sources: Pull data from headless CMSs, SaaS services, APIs, databases, your file system & more directly into your pages using GraphQL.\n\n## Scale to the entire internet\n\nGatsby.js is Internet Scale. Forget complicated deploys with databases and servers and their expensive, time-consuming setup costs, maintenance, and scaling fears. Gatsby.js builds your site as “static” files which can be deployed easily on dozens of services.\n\n## Future-proof your website\n\nDon't build a website with last decade's tech. The future of the web is mobile, JavaScript and APIs—the JAMstack. Every website is a web app and every web app is a website. Gatsby.js is the universal JavaScript framework you’ve been waiting for.\n\n## Static Progressive Web Apps\n\nGatsby.js is a static PWA (Progressive Web App) generator. You get code and data splitting out-of-the-box. Gatsby loads only the critical HTML, CSS, data, and JavaScript so your site loads as fast as possible. Once loaded, Gatsby prefetches resources for other pages so clicking around the site feels incredibly fast.\n\n## Speed past the competition\n\nGatsby.js builds the fastest possible website. Instead of waiting to generate pages when requested, pre-build pages and lift them into a global cloud of servers — ready to be delivered instantly to your users wherever they are.",
    "bodyHtml": "<p>Build blazing-fast, modern apps and websites with React</p>\n<h2>Features</h2>\n<ul>\n<li>Fast no-reload page changes</li>\n<li>Build sites with React.js components</li>\n<li>Hot reload editing. Tweak pages, templates, and styles and see changes in real time.</li>\n</ul>\n<h2>Modern web tech without the headache</h2>\n<p>Enjoy the power of the latest web technologies – React.js, Webpack, modern JavaScript and CSS and more — all setup and waiting for you to start building.</p>\n<h2>Bring your own data</h2>\n<p>Gatsby’s rich data plugin ecosystem lets you build sites with the data you want — from one or many sources: Pull data from headless CMSs, SaaS services, APIs, databases, your file system &amp; more directly into your pages using GraphQL.</p>\n<h2>Scale to the entire internet</h2>\n<p>Gatsby.js is Internet Scale. Forget complicated deploys with databases and servers and their expensive, time-consuming setup costs, maintenance, and scaling fears. Gatsby.js builds your site as “static” files which can be deployed easily on dozens of services.</p>\n<h2>Future-proof your website</h2>\n<p>Don't build a website with last decade's tech. The future of the web is mobile, JavaScript and APIs—the JAMstack. Every website is a web app and every web app is a website. Gatsby.js is the universal JavaScript framework you’ve been waiting for.</p>\n<h2>Static Progressive Web Apps</h2>\n<p>Gatsby.js is a static PWA (Progressive Web App) generator. You get code and data splitting out-of-the-box. Gatsby loads only the critical HTML, CSS, data, and JavaScript so your site loads as fast as possible. Once loaded, Gatsby prefetches resources for other pages so clicking around the site feels incredibly fast.</p>\n<h2>Speed past the competition</h2>\n<p>Gatsby.js builds the fastest possible website. Instead of waiting to generate pages when requested, pre-build pages and lift them into a global cloud of servers — ready to be delivered instantly to your users wherever they are.</p>\n"
  },
  {
    "title": "Go-Static!",
    "repo": "colynb/generator-go-static",
    "homepage": "https://github.com/colynb/generator-go-static",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Swig"],
    "description": "Yeoman generator for building static sites/blogs.",
    "bodyContent": "Go-Static! is a static site generator that employs the tools developers already know and love. Yeoman to scaffold out your project and Grunt to generate the output.",
    "bodyHtml": "<p>Go-Static! is a static site generator that employs the tools developers already know and love. Yeoman to scaffold out your project and Grunt to generate the output.</p>\n"
  },
  {
    "title": "Gerablog",
    "repo": "paulohrpinheiro/gerablog",
    "homepage": "https://github.com/paulohrpinheiro/gerablog",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Tenjin"],
    "description": "Gerablog is a simple and small static blog generator.",
    "bodyContent": "Gerablog is a static blog generator. Write your posts in in *Markdown*, publish in *HTML*. Just two commands (create and generate) and seven templates (header, footer, categories page, categories block, main index, post and feed).",
    "bodyHtml": "<p>Gerablog is a static blog generator. Write your posts in in <em>Markdown</em>, publish in <em>HTML</em>. Just two commands (create and generate) and seven templates (header, footer, categories page, categories block, main index, post and feed).</p>\n"
  },
  {
    "title": "gist-txt",
    "repo": "potomak/gist-txt",
    "homepage": "https://github.com/potomak/gist-txt",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Mustache"],
    "description": "A minimal text adventure engine.",
    "bodyContent": "Transform a GitHub gist into a text adventure that is also a static website.\n\nYou can find a list of text advendures created using gist-txt at http://potomak.github.io/gist-txt/text-adventures.html.",
    "bodyHtml": "<p>Transform a GitHub gist into a text adventure that is also a static website.</p>\n<p>You can find a list of text advendures created using gist-txt at http://potomak.github.io/gist-txt/text-adventures.html.</p>\n"
  },
  {
    "title": "GitBook",
    "repo": "GitbookIO/gitbook",
    "homepage": "https://www.gitbook.com/",
    "language": ["JavaScript"],
    "license": ["Apache 2.0"],
    "templates": ["Jinja2"],
    "description": "A modern publishing toolchain. Simply taking you from ideas to finished, polished books.",
    "twitter": "GitBookIO",
    "bodyContent": "The easiest way to write a book.\n\n### Write & Publish with Markdown and Git\nBooks on GitBook are written using a beautiful editor and published using Git or GitHub.\n\n### Distribute & Sell everywhere\nSell your book at the price you want, GitBook can also distribute it on all main marketplaces.\n\n### Analyse & Engage your readers\nLearn from your readers using powerful analytics, and engage with them to improve your book's content.",
    "bodyHtml": "<p>The easiest way to write a book.</p>\n<h3>Write &amp; Publish with Markdown and Git</h3>\n<p>Books on GitBook are written using a beautiful editor and published using Git or GitHub.</p>\n<h3>Distribute &amp; Sell everywhere</h3>\n<p>Sell your book at the price you want, GitBook can also distribute it on all main marketplaces.</p>\n<h3>Analyse &amp; Engage your readers</h3>\n<p>Learn from your readers using powerful analytics, and engage with them to improve your book's content.</p>\n"
  },
  {
    "title": "Glayu",
    "repo": "pablomartinezalvarez/glayu",
    "homepage": "http://www.glayu.com/",
    "language": ["Elixir"],
    "license": ["MIT"],
    "templates": ["EEx"],
    "description": "A static site generator for mid-sized sites.",
    "bodyContent": "Glayu is a static site generator focused on mid-sized sites that generate daily content like magazines and newspapers.\n\nWhat makes Glayu different from other static site generators is the way it structures the source folder: when you publish an article using Glayu, the markdown file is placed inside a subfolder of the source directory following the permalink definition. Glayu takes advance of this folder organization to enable the concurrent and partial generation of the site.\n\n### Features\n\n* Partial site generation.\n* Well organized source folder.\n* Fast, thanks to Elixir and the Erlang VM.",
    "bodyHtml": "<p>Glayu is a static site generator focused on mid-sized sites that generate daily content like magazines and newspapers.</p>\n<p>What makes Glayu different from other static site generators is the way it structures the source folder: when you publish an article using Glayu, the markdown file is placed inside a subfolder of the source directory following the permalink definition. Glayu takes advance of this folder organization to enable the concurrent and partial generation of the site.</p>\n<h3>Features</h3>\n<ul>\n<li>Partial site generation.</li>\n<li>Well organized source folder.</li>\n<li>Fast, thanks to Elixir and the Erlang VM.</li>\n</ul>\n"
  },
  {
    "title": "gloria",
    "repo": "gloriajs/gloria",
    "homepage": "https://gloriajs.com",
    "language": ["JavaScript"],
    "license": ["Apache 2.0"],
    "templates": ["Handlebars"],
    "description": "Gloria is a static site generator, a beginners friendly project",
    "bodyContent": "Gloria is Spanish for glory, also the name of my mom and the name was available in npm.\n\nThis project aims to be a substitute for jekyll, to help you create static websites without depending on ruby.\n\n## Community\n\nWe have a slack team, there are channels to talk about contributing, support, updates, meta and everything.\n\nRequest an invite [here](http://slack.gloriajs.com/).\n\n\n## Philosophy\n\nGloria works as easy as possible, with extensions to allow you to use your favorite template engine,\nCSS preprocessor, and anything else.\n\nOur goal is to have an open source project that is beginner friendly, if you want to contribute\nbut have little experience as a developer or in open source, we can pair with you and help you. Is a great\nexcuse to work in a non-trivial Node codebase and get started on open source.",
    "bodyHtml": "<p>Gloria is Spanish for glory, also the name of my mom and the name was available in npm.</p>\n<p>This project aims to be a substitute for jekyll, to help you create static websites without depending on ruby.</p>\n<h2>Community</h2>\n<p>We have a slack team, there are channels to talk about contributing, support, updates, meta and everything.</p>\n<p>Request an invite <a href=\"http://slack.gloriajs.com/\">here</a>.</p>\n<h2>Philosophy</h2>\n<p>Gloria works as easy as possible, with extensions to allow you to use your favorite template engine,\nCSS preprocessor, and anything else.</p>\n<p>Our goal is to have an open source project that is beginner friendly, if you want to contribute\nbut have little experience as a developer or in open source, we can pair with you and help you. Is a great\nexcuse to work in a non-trivial Node codebase and get started on open source.</p>\n"
  },
  {
    "title": "Gor",
    "repo": "wendal/gor",
    "homepage": "https://github.com/wendal/gor",
    "language": ["Go"],
    "license": ["BSD 3-Clause"],
    "templates": ["Mustache"],
    "description": "A static websites and blog generator engine written in Go",
    "bodyContent": "Transform your plain text into static websites and blogs.\n**Gor** is a [Ruhoh](http://ruhoh.com/)-like websites and blog generator engine written in [Go](http://golang.org/). It’s almost compatible to ruhoh 1.x specification. You can treat Gor as a replacement of the official implementation that is written in [Ruby](http://www.ruby-lang.org/en/).\n\nWhy reinvent the wheel? Gor has the following awesome benefits:\n\n1. Speed&mdash;Less than 1 second when compiling all my near 200 blogs on wendal.net\n2. Simple&mdash;Only one single executable file generated after compiling, no other dependency",
    "bodyHtml": "<p>Transform your plain text into static websites and blogs.\n<strong>Gor</strong> is a <a href=\"http://ruhoh.com/\">Ruhoh</a>-like websites and blog generator engine written in <a href=\"http://golang.org/\">Go</a>. It’s almost compatible to ruhoh 1.x specification. You can treat Gor as a replacement of the official implementation that is written in <a href=\"http://www.ruby-lang.org/en/\">Ruby</a>.</p>\n<p>Why reinvent the wheel? Gor has the following awesome benefits:</p>\n<ol>\n<li>Speed—Less than 1 second when compiling all my near 200 blogs on wendal.net</li>\n<li>Simple—Only one single executable file generated after compiling, no other dependency</li>\n</ol>\n"
  },
  {
    "title": "Gostatic",
    "repo": "piranha/gostatic",
    "homepage": "https://github.com/piranha/gostatic#speed",
    "language": ["Go"],
    "license": ["ISC"],
    "templates": ["Go"],
    "description": "A fast static site generator written in Go.",
    "bodyContent": "Gostatic is a static site generator. What differs it from most of other tools is\nthat it's written in Go and tracks changes, which means it should work\nreasonably [fast](#speed).\n\nFeatures include:\n\n - No run-time dependencies, just a single binary - download it and run\n - Dependency tracking and re-rendering only changed pages\n - Markdown support\n - Flexible [filter system](#processors)\n - Simple [config syntax](#configuration)\n - HTTP server and watcher (instant rendering on changes)\n\n### Quick Start\n\nRun `gostatic -i my-site` to generate basic site in directory `name`. It will\nhave a basic `config` file, which you should edit to put relevant variables at\nthe top - it also contains description of how files in your `src` directory are\ntreated.\n\n`src` directory obviously contains sources of your site (name of this directory\ncan be changed in `config`). You can follow general idea of this directory to\ncreate new blog posts or new pages. All files, which are not mentioned in\n`config`, are just copied over. Run `gostatic -fv config` to see how your `src`\nis processed.\n\n`site.html` is a file that defines templates your are able to use for your\npages. You can see those templates mentioned in `config`.\n\nAnd, finally, there is a `Makefile`, just for convenience. Run `make` to build\nyour site once or `make w` to run watcher and server, to see your site changes\nin real time.\n\nAlso, you could look at [my site](https://github.com/piranha/solovyov.net) for\nan example of advanced usage.\n\nGood luck! And remember, your contributions either to gostatic or to\ndocumentation (even if it's just this `README.md`) are always very welcome!",
    "bodyHtml": "<p>Gostatic is a static site generator. What differs it from most of other tools is\nthat it's written in Go and tracks changes, which means it should work\nreasonably <a href=\"#speed\">fast</a>.</p>\n<p>Features include:</p>\n<ul>\n<li>No run-time dependencies, just a single binary - download it and run</li>\n<li>Dependency tracking and re-rendering only changed pages</li>\n<li>Markdown support</li>\n<li>Flexible <a href=\"#processors\">filter system</a></li>\n<li>Simple <a href=\"#configuration\">config syntax</a></li>\n<li>HTTP server and watcher (instant rendering on changes)</li>\n</ul>\n<h3>Quick Start</h3>\n<p>Run <code>gostatic -i my-site</code> to generate basic site in directory <code>name</code>. It will\nhave a basic <code>config</code> file, which you should edit to put relevant variables at\nthe top - it also contains description of how files in your <code>src</code> directory are\ntreated.</p>\n<p><code>src</code> directory obviously contains sources of your site (name of this directory\ncan be changed in <code>config</code>). You can follow general idea of this directory to\ncreate new blog posts or new pages. All files, which are not mentioned in\n<code>config</code>, are just copied over. Run <code>gostatic -fv config</code> to see how your <code>src</code>\nis processed.</p>\n<p><code>site.html</code> is a file that defines templates your are able to use for your\npages. You can see those templates mentioned in <code>config</code>.</p>\n<p>And, finally, there is a <code>Makefile</code>, just for convenience. Run <code>make</code> to build\nyour site once or <code>make w</code> to run watcher and server, to see your site changes\nin real time.</p>\n<p>Also, you could look at <a href=\"https://github.com/piranha/solovyov.net\">my site</a> for\nan example of advanced usage.</p>\n<p>Good luck! And remember, your contributions either to gostatic or to\ndocumentation (even if it's just this <code>README.md</code>) are always very welcome!</p>\n"
  },
  {
    "title": "Grain",
    "repo": "sysgears/grain",
    "homepage": "http://sysgears.com/grain",
    "language": ["Groovy"],
    "license": ["Apache 2.0"],
    "templates": ["Groovy"],
    "description": "A generator for sites, blogs & documentation, supports Markdown, AsciiDoc and RST",
    "bodyContent": "Grain is a wide-purpose static website generator for Groovy / Gradle.\n\n####Features\n - **Live preview** to make and see changes on the fly\n - **Embedded Groovy code** processing for content files and templates\n - **Resource URL mapping** to dynamically create pages or rewrite URLs\n - **Template nesting** and **tag libraries** for DRY code\n\n####Supports\n - **Markdown**, **reStructuredText** and **AsciiDoc**\n - **Python Pygments** code highlighting\n - **SASS / SCSS** stylesheets\n - Source compression and minification\n\n####Comes with\n - **Bootstrap themes** and examples for easy start\n - **Gradle plugin** for integration with existing projects",
    "bodyHtml": "<p>Grain is a wide-purpose static website generator for Groovy / Gradle.</p>\n<p>####Features</p>\n<ul>\n<li><strong>Live preview</strong> to make and see changes on the fly</li>\n<li><strong>Embedded Groovy code</strong> processing for content files and templates</li>\n<li><strong>Resource URL mapping</strong> to dynamically create pages or rewrite URLs</li>\n<li><strong>Template nesting</strong> and <strong>tag libraries</strong> for DRY code</li>\n</ul>\n<p>####Supports</p>\n<ul>\n<li><strong>Markdown</strong>, <strong>reStructuredText</strong> and <strong>AsciiDoc</strong></li>\n<li><strong>Python Pygments</strong> code highlighting</li>\n<li><strong>SASS / SCSS</strong> stylesheets</li>\n<li>Source compression and minification</li>\n</ul>\n<p>####Comes with</p>\n<ul>\n<li><strong>Bootstrap themes</strong> and examples for easy start</li>\n<li><strong>Gradle plugin</strong> for integration with existing projects</li>\n</ul>\n"
  },
  {
    "title": "graze",
    "repo": "mikoskinen/graze",
    "homepage": "http://mikaelkoskinen.net/graze-static-site-generator-using-razor",
    "language": [".Net"],
    "license": ["MIT"],
    "templates": ["Razor"],
    "description": "Static site generator using Razor.",
    "bodyContent": "Graze is a static site generator. It takes a template and a configuration file and generates a static web site. The generated site is pure HTML / CSS / JavaScript and can be hosted on any web server. The Graze templates are created using the Razor Syntax.",
    "bodyHtml": "<p>Graze is a static site generator. It takes a template and a configuration file and generates a static web site. The generated site is pure HTML / CSS / JavaScript and can be hosted on any web server. The Graze templates are created using the Razor Syntax.</p>\n"
  },
  {
    "title": "Gridsome",
    "repo": "gridsome/gridsome",
    "homepage": "https://gridsome.org/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Vue.js"],
    "description": "Build blazing fast websites for any CMS or data with Vue.js",
    "startertemplaterepo": "gridsome/gridsome-starter-default",
    "twitter": "gridsome",
    "bodyContent": "Build blazing fast websites for any CMS or data with Vue.js\n\n![How Gridsome work](https://thepracticaldev.s3.amazonaws.com/i/878bujtx44yni3oub1hf.gif)\n\n# How Gridsome works\n\nUse local files or any external API as a data source and access the data from a unified GraphQL layer\n\n## Connect to any CMS or data source\n\nUse any CMS or data source for content. Pull data from WordPress, Contentful, local Markdown, or any other headless CMS or APIs and access it with GraphQL in your pages and components.\n\n## Enjoy a modern development stack\n\nBuild websites with modern tools like Vue.js, webpack and Node.js. Get hot-reloading and access to any packages from npm and write CSS in your favorite preprocessor like Sass or Less with autoprefixing.\n\n## PWA Offline-first architecture\n\nOnly critical HTML, CSS, and JavaScript get loaded first. The next pages are then prefetched so users can click around incredibly fast without page reloads, even when offline.\n\n## Get perfect page speed scores\n\nGridsome automatically optimises your frontend to load and perform blazing fast. You get code-splitting, image optimisation, lazy-loading, and almost perfect lighthouse scores out-of-the-box.\n\n## Build future ready websites\n\nThe future of the web is JavaScript, API's, and Markup - the JAMstack. Gridsome uses the power of blazing-fast static site generator, JavaScript and APIs to create stunning dynamic web experiences.\n\n## Ready for global domination\n\nGridsome sites are usually not connected to any database and can be hosted entirely on a global CDN. It can handle thousands to millions of hits without breaking - and no expensive server costs.",
    "bodyHtml": "<p>Build blazing fast websites for any CMS or data with Vue.js</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/878bujtx44yni3oub1hf.gif\" alt=\"How Gridsome work\"></p>\n<h1>How Gridsome works</h1>\n<p>Use local files or any external API as a data source and access the data from a unified GraphQL layer</p>\n<h2>Connect to any CMS or data source</h2>\n<p>Use any CMS or data source for content. Pull data from WordPress, Contentful, local Markdown, or any other headless CMS or APIs and access it with GraphQL in your pages and components.</p>\n<h2>Enjoy a modern development stack</h2>\n<p>Build websites with modern tools like Vue.js, webpack and Node.js. Get hot-reloading and access to any packages from npm and write CSS in your favorite preprocessor like Sass or Less with autoprefixing.</p>\n<h2>PWA Offline-first architecture</h2>\n<p>Only critical HTML, CSS, and JavaScript get loaded first. The next pages are then prefetched so users can click around incredibly fast without page reloads, even when offline.</p>\n<h2>Get perfect page speed scores</h2>\n<p>Gridsome automatically optimises your frontend to load and perform blazing fast. You get code-splitting, image optimisation, lazy-loading, and almost perfect lighthouse scores out-of-the-box.</p>\n<h2>Build future ready websites</h2>\n<p>The future of the web is JavaScript, API's, and Markup - the JAMstack. Gridsome uses the power of blazing-fast static site generator, JavaScript and APIs to create stunning dynamic web experiences.</p>\n<h2>Ready for global domination</h2>\n<p>Gridsome sites are usually not connected to any database and can be hosted entirely on a global CDN. It can handle thousands to millions of hits without breaking - and no expensive server costs.</p>\n"
  },
  {
    "title": "Griffin",
    "repo": "pawandubey/griffin",
    "homepage": "http://github.com/pawandubey/griffin",
    "language": ["Java"],
    "license": ["Apache 2.0"],
    "templates": ["Handlebars"],
    "description": "Blazing fast, simple, static site generator",
    "bodyContent": "Griffin is an extremely fast and simple static site generator.\nGriffin is simple, not feature-less.\n\n### What do you get with Griffin?\n* Blazing fast speed. Generate ~5000 posts in under 10 seconds.\n* A fully blog aware static site generator\n* Taxonomy with tags\n* Extremely simple theming with handlebars\n* Pagination\n* Live preview\n* Syntax Highlighting\n* Social media and Disqus support\n* Extremely small size at just ~6 Mb.",
    "bodyHtml": "<p>Griffin is an extremely fast and simple static site generator.\nGriffin is simple, not feature-less.</p>\n<h3>What do you get with Griffin?</h3>\n<ul>\n<li>Blazing fast speed. Generate ~5000 posts in under 10 seconds.</li>\n<li>A fully blog aware static site generator</li>\n<li>Taxonomy with tags</li>\n<li>Extremely simple theming with handlebars</li>\n<li>Pagination</li>\n<li>Live preview</li>\n<li>Syntax Highlighting</li>\n<li>Social media and Disqus support</li>\n<li>Extremely small size at just ~6 Mb.</li>\n</ul>\n"
  },
  {
    "title": "Grow",
    "repo": "grow/grow",
    "homepage": "https://grow.io/",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "Grow is a declarative, file-based static site generator for building maintainable, high-quality websites.",
    "bodyContent": "### Grow's mission is to bring joy to building and launching microsites\n\nWe want Grow to be the canonical way for teams and individuals to build, launch, and maintain high-quality, content-rich web sites. It's architected to work for humans, to allow people pair it with their own development tools, to run locally and in the cloud, and to bring simplicity to web site management.\n\nGrow (the app) and the stuff you make with it (your sites) are portable. You can run Grow anywhere, and you can take your content anywhere because your content is stored as flat files. There will never be lock-in with Grow.\n\n### Configuration, not code.\n\nControl your site's URLs, content hierarchy, structure and behavior all with configuration, not with code. You won't have to program your site's serving logic again and again, so website production stays rapid and nimble. Modifications to to your architecture are always just a config change away.\n\n### Îñtérñåtîøñålization made simple.\n\nFlexible localization is easy and comes included. You can configure localized URL formats, easily specify what content is translated and what isn't, localize your content, and integrate with translation providers to translate your projects.\n\n### Develop everywhere, deploy anywhere.\n\nGrow sites are entirely file-based, backed by Git with no database to maintain. Development can happen locally or in the cloud. You can deploy to a variety of destinations – including exporting as static files for integration with your custom server.\n\n### No installation or maintenance.\n\nFocus on what matters (your web sites!) when using Grow. Your projects are stored and managed entirely separate from the app, so you'll never have to maintain a deployed installation or deal with upgrades. Grow tests and verifies your sites upon each build.",
    "bodyHtml": "<h3>Grow's mission is to bring joy to building and launching microsites</h3>\n<p>We want Grow to be the canonical way for teams and individuals to build, launch, and maintain high-quality, content-rich web sites. It's architected to work for humans, to allow people pair it with their own development tools, to run locally and in the cloud, and to bring simplicity to web site management.</p>\n<p>Grow (the app) and the stuff you make with it (your sites) are portable. You can run Grow anywhere, and you can take your content anywhere because your content is stored as flat files. There will never be lock-in with Grow.</p>\n<h3>Configuration, not code.</h3>\n<p>Control your site's URLs, content hierarchy, structure and behavior all with configuration, not with code. You won't have to program your site's serving logic again and again, so website production stays rapid and nimble. Modifications to to your architecture are always just a config change away.</p>\n<h3>Îñtérñåtîøñålization made simple.</h3>\n<p>Flexible localization is easy and comes included. You can configure localized URL formats, easily specify what content is translated and what isn't, localize your content, and integrate with translation providers to translate your projects.</p>\n<h3>Develop everywhere, deploy anywhere.</h3>\n<p>Grow sites are entirely file-based, backed by Git with no database to maintain. Development can happen locally or in the cloud. You can deploy to a variety of destinations – including exporting as static files for integration with your custom server.</p>\n<h3>No installation or maintenance.</h3>\n<p>Focus on what matters (your web sites!) when using Grow. Your projects are stored and managed entirely separate from the app, so you'll never have to maintain a deployed installation or deal with upgrades. Grow tests and verifies your sites upon each build.</p>\n"
  },
  {
    "title": "grunt-flats",
    "repo": "adamduncan/grunt-flats",
    "homepage": "https://github.com/adamduncan/grunt-flats",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Hogan.js"],
    "description": "Grunt task for generating static pages from templated partials.",
    "bodyContent": "Grunt task for generating static pages from templated partials.\n\nUsing a mix of Mustache's partial syntax and Pattern Lab's partial-specific data pattern, build out styleguides and site pages. Wrapped in Grunt task for easy automation.",
    "bodyHtml": "<p>Grunt task for generating static pages from templated partials.</p>\n<p>Using a mix of Mustache's partial syntax and Pattern Lab's partial-specific data pattern, build out styleguides and site pages. Wrapped in Grunt task for easy automation.</p>\n"
  },
  {
    "title": "Grus",
    "repo": "chipsenkbeil/grus",
    "homepage": "https://github.com/chipsenkbeil/grus",
    "language": ["Scala"],
    "license": ["Apache 2.0"],
    "templates": ["ScalaTags"],
    "description": "Static site generator written in Scala using ScalaTags for templates and Flexmark for markdown.",
    "bodyContent": "(G)enerate (R)esources (U)sing (S)cala\n\nA new static site generator written in Scala that utilizes [ScalaTags](http://www.lihaoyi.com/scalatags/) for templates/layouts and [Flexmark](https://github.com/vsch/flexmark-java) to render markdown into HTML utilizing the _ScalaTags_ templates.\n\nCurrently used to power the [Scala Debugger](https://scala-debugger.org) website.",
    "bodyHtml": "<p>(G)enerate (R)esources (U)sing (S)cala</p>\n<p>A new static site generator written in Scala that utilizes <a href=\"http://www.lihaoyi.com/scalatags/\">ScalaTags</a> for templates/layouts and <a href=\"https://github.com/vsch/flexmark-java\">Flexmark</a> to render markdown into HTML utilizing the <em>ScalaTags</em> templates.</p>\n<p>Currently used to power the <a href=\"https://scala-debugger.org\">Scala Debugger</a> website.</p>\n"
  },
  {
    "title": "Makdoc",
    "repo": "pismute/gulp-makdoc",
    "homepage": "https://github.com/pismute/gulp-makdoc",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "A (Gulp) task library for generating documents",
    "bodyContent": "This is just a Gulp task library of generating documents or sites. It helps you to have your own generator using Gulp.\n\nYou can override any task and function as your mind.\n\n### Why use Makdoc?\n\n* On Nodejs.\n* No YAML front matter.\n* On Gulp: Task engine help you free.",
    "bodyHtml": "<p>This is just a Gulp task library of generating documents or sites. It helps you to have your own generator using Gulp.</p>\n<p>You can override any task and function as your mind.</p>\n<h3>Why use Makdoc?</h3>\n<ul>\n<li>On Nodejs.</li>\n<li>No YAML front matter.</li>\n<li>On Gulp: Task engine help you free.</li>\n</ul>\n"
  },
  {
    "title": "Gulp Site",
    "repo": "ducksoupdev/gulp-site-generator",
    "homepage": "https://github.com/ducksoupdev/gulp-site-generator",
    "language": ["JavaScript"],
    "license": ["ISC"],
    "templates": ["Handlebars"],
    "description": "Static site generator using Gulp",
    "bodyContent": "This is a simple static site generator which is perfect for a personal, blog or documentation site.\n\nIt is similar to other static site generators in that it takes your Markdown content, renders it, optimises it and creates a production-ready site that can be served by Nginx, Apache or another web server.\n\n### Features\n\n* Convert Markdown files to static HTML\n* Handlebars templates and partials\n* Sass compiling and minification\n* Css reducing (Uncss)\n* Javascript concatenating and minification\n* Asset copying\n* Image compression\n* HTML compression\n* RSS feed creation\n* Server for viewing built site\n* Clobber for cleaning build directory\n* Save content as draft\n* Convert draft templates\n* Creates a build/ directory with built content and assets",
    "bodyHtml": "<p>This is a simple static site generator which is perfect for a personal, blog or documentation site.</p>\n<p>It is similar to other static site generators in that it takes your Markdown content, renders it, optimises it and creates a production-ready site that can be served by Nginx, Apache or another web server.</p>\n<h3>Features</h3>\n<ul>\n<li>Convert Markdown files to static HTML</li>\n<li>Handlebars templates and partials</li>\n<li>Sass compiling and minification</li>\n<li>Css reducing (Uncss)</li>\n<li>Javascript concatenating and minification</li>\n<li>Asset copying</li>\n<li>Image compression</li>\n<li>HTML compression</li>\n<li>RSS feed creation</li>\n<li>Server for viewing built site</li>\n<li>Clobber for cleaning build directory</li>\n<li>Save content as draft</li>\n<li>Convert draft templates</li>\n<li>Creates a build/ directory with built content and assets</li>\n</ul>\n"
  },
  {
    "title": "Gustav",
    "repo": "futape/gustav",
    "homepage": "http://gustav.futape.de",
    "language": ["PHP"],
    "templates": ["PHP"],
    "license": ["BSD 3-Clause"],
    "description": "Gustav is a powerful static-site generator written in PHP.",
    "bodyContent": "Gustav provides everything you need to run a blog or any other website - From a static-site generator offering a robust templating system and a great customizability to a massive PHP API providing functions for searching the published articles and pages, getting available tags and categories, and more, as well as hooks that can be used to extend its functionality.",
    "bodyHtml": "<p>Gustav provides everything you need to run a blog or any other website - From a static-site generator offering a robust templating system and a great customizability to a massive PHP API providing functions for searching the published articles and pages, getting available tags and categories, and more, as well as hooks that can be used to extend its functionality.</p>\n"
  },
  {
    "title": "Hakyll",
    "repo": "jaspervdj/hakyll",
    "homepage": "http://jaspervdj.be/hakyll/",
    "language": ["Haskell"],
    "license": ["BSD 3-Clause"],
    "templates": ["Hakyll"],
    "description": "A configurable Haskell library, for small-to-medium sites.",
    "bodyContent": "Static sites are fast, secure, easy to deploy, and manageable using version control.\n\nHakyll is a Haskell library for generating static sites, mostly aimed at small-to-medium sites and personal blogs. It is written in a very configurable way and uses an xmonad-like DSL for configuration.\n\nIntegration with pandoc gives us markdown and TeX support, including syntax highlighting and other goodies.",
    "bodyHtml": "<p>Static sites are fast, secure, easy to deploy, and manageable using version control.</p>\n<p>Hakyll is a Haskell library for generating static sites, mostly aimed at small-to-medium sites and personal blogs. It is written in a very configurable way and uses an xmonad-like DSL for configuration.</p>\n<p>Integration with pandoc gives us markdown and TeX support, including syntax highlighting and other goodies.</p>\n"
  },
  {
    "title": "Halwa",
    "repo": "mhlakhani/halwa",
    "homepage": "https://github.com/mhlakhani/halwa",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "Halwa is a single file static site generator written in Python.",
    "bodyContent": "Halwa is a single file static site generator written in Python. It's light-weight and the only dependencies are jinja2, hamlish-jinja, and markdown.\n\nUsing Halwa is as easy as it should be; install it, then create a configuration file and point Halwa to it!\n\nHalwa is organized around two main things, content and processors. A piece of content is a data source (static HTML, HAML, or Markdown) which is eventually converted into an output page (or pages). Halwa uses the following workflow:\n\n1. Initialize a global data dictionary.\n2. Load each piece of content specified in sources.\n3. Run each of the processors specified in processors, generating output that goes into the data dictionary.\n4. Update each piece of content with the contents of the data dictionary.\n5. Render each piece of content, writing it out to the output folder.",
    "bodyHtml": "<p>Halwa is a single file static site generator written in Python. It's light-weight and the only dependencies are jinja2, hamlish-jinja, and markdown.</p>\n<p>Using Halwa is as easy as it should be; install it, then create a configuration file and point Halwa to it!</p>\n<p>Halwa is organized around two main things, content and processors. A piece of content is a data source (static HTML, HAML, or Markdown) which is eventually converted into an output page (or pages). Halwa uses the following workflow:</p>\n<ol>\n<li>Initialize a global data dictionary.</li>\n<li>Load each piece of content specified in sources.</li>\n<li>Run each of the processors specified in processors, generating output that goes into the data dictionary.</li>\n<li>Update each piece of content with the contents of the data dictionary.</li>\n<li>Render each piece of content, writing it out to the output folder.</li>\n</ol>\n"
  },
  {
    "title": "Harp",
    "repo": "sintaxi/harp",
    "homepage": "http://harpjs.com/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["EJS", "Jade"],
    "description": "Harp is a static web server that can also compile your project down to static assets.",
    "twitter": "HarpWebServer",
    "bodyContent": "Harp is a static web server that also serves Jade, Markdown, EJS, Less, Stylus, Sass, and CoffeeScript **as** HTML, CSS, and JavaScript without any configuration. It supports the beloved layout/partial paradigm and it has flexible metadata and global objects for traversing the file system and injecting custom data into templates. Optionally, Harp can also compile your project down to static assets for hosting behind any valid HTTP server.\n\n### Why?\n\nPre-compilers are becoming extremely powerful and shipping front-ends as static assets has many upsides. It's simple, it's easy to maintain, it's low risk, easy to scale, and requires low cognitive overhead. I wanted a lightweight web server that was powerful enough for me to abandon web frameworks for dead simple front-end publishing.\n\n### Features\n\n- easy installation, easy to use\n- fast and lightweight\n- robust (clean urls, intelligent path redirects)\n- built in pre-processing\n- first-class layout and partial support\n- built in LRU caching in production mode\n- can export assets to HTML/CSS/JS\n- does not require a build steps or grunt task\n- fun to use\n\n### Supported Pre-Processors\n\n|                 | Language Superset                                                 | Whitespace Sensitive  \n| --------------- | ----------------------------------------------------------------- | --------------------------------------------------------------------------------------\n| **HTML**        | [EJS](http://embeddedjs.com/)                                     | [Jade](http://jade-lang.com/), [Markdown](http://daringfireball.net/projects/markdown/)\n| **CSS**         | [LESS](http://lesscss.org/), [Sass (SCSS)](http://sass-lang.com/) | [Stylus](http://learnboost.github.io/stylus/)\n| **JavaScript**  | (TBD)                                                             | [CoffeeScript](http://coffeescript.org/)\n\n### Resources\n\n- **Server Documentation** - [harpjs.com/docs/](http://harpjs.com/docs/)\n- **Platform Documentation** - [harp.io/docs](https://harp.io/docs)\n- **Source Code** - [github.com/sintaxi/harp](https://github.com/sintaxi/harp)",
    "bodyHtml": "<p>Harp is a static web server that also serves Jade, Markdown, EJS, Less, Stylus, Sass, and CoffeeScript <strong>as</strong> HTML, CSS, and JavaScript without any configuration. It supports the beloved layout/partial paradigm and it has flexible metadata and global objects for traversing the file system and injecting custom data into templates. Optionally, Harp can also compile your project down to static assets for hosting behind any valid HTTP server.</p>\n<h3>Why?</h3>\n<p>Pre-compilers are becoming extremely powerful and shipping front-ends as static assets has many upsides. It's simple, it's easy to maintain, it's low risk, easy to scale, and requires low cognitive overhead. I wanted a lightweight web server that was powerful enough for me to abandon web frameworks for dead simple front-end publishing.</p>\n<h3>Features</h3>\n<ul>\n<li>easy installation, easy to use</li>\n<li>fast and lightweight</li>\n<li>robust (clean urls, intelligent path redirects)</li>\n<li>built in pre-processing</li>\n<li>first-class layout and partial support</li>\n<li>built in LRU caching in production mode</li>\n<li>can export assets to HTML/CSS/JS</li>\n<li>does not require a build steps or grunt task</li>\n<li>fun to use</li>\n</ul>\n<h3>Supported Pre-Processors</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Language Superset</th>\n<th>Whitespace Sensitive</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>HTML</strong></td>\n<td><a href=\"http://embeddedjs.com/\">EJS</a></td>\n<td><a href=\"http://jade-lang.com/\">Jade</a>, <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a></td>\n</tr>\n<tr>\n<td><strong>CSS</strong></td>\n<td><a href=\"http://lesscss.org/\">LESS</a>, <a href=\"http://sass-lang.com/\">Sass (SCSS)</a></td>\n<td><a href=\"http://learnboost.github.io/stylus/\">Stylus</a></td>\n</tr>\n<tr>\n<td><strong>JavaScript</strong></td>\n<td>(TBD)</td>\n<td><a href=\"http://coffeescript.org/\">CoffeeScript</a></td>\n</tr>\n</tbody>\n</table>\n<h3>Resources</h3>\n<ul>\n<li><strong>Server Documentation</strong> - <a href=\"http://harpjs.com/docs/\">harpjs.com/docs/</a></li>\n<li><strong>Platform Documentation</strong> - <a href=\"https://harp.io/docs\">harp.io/docs</a></li>\n<li><strong>Source Code</strong> - <a href=\"https://github.com/sintaxi/harp\">github.com/sintaxi/harp</a></li>\n</ul>\n"
  },
  {
    "title": "HasClunk",
    "repo": "jellehermsen/HasClunk",
    "homepage": "https://github.com/jellehermsen/HasClunk",
    "language": ["Haskell"],
    "license": ["BSD 3-Clause"],
    "templates": ["HTML"],
    "description": "Simple dependency light blog generator",
    "bodyContent": "`HasClunk` is a very lightweight blog generator made in Haskell. It supports\nposts, pages, categories and RSS. You can write your posts in whatever format\nyou like and setup your conversion shell command in the config. Templating is\nsimple, just a header.html and a footer.html that will sandwich your posts and\npages. You can use special tags like {base_url} to refer to the blog's url that\nis setup in your config file.\n\nThe Haskell code is clean, well-documented and uses very little dependencies (to\navoid Cabal Hell). All the internally generated HTML5 is put in one Haskell\nfile (Html.hs), which you can edit, but you'll probably find that editing the\ndefault css and template will fit your needs.",
    "bodyHtml": "<p><code>HasClunk</code> is a very lightweight blog generator made in Haskell. It supports\nposts, pages, categories and RSS. You can write your posts in whatever format\nyou like and setup your conversion shell command in the config. Templating is\nsimple, just a header.html and a footer.html that will sandwich your posts and\npages. You can use special tags like {base_url} to refer to the blog's url that\nis setup in your config file.</p>\n<p>The Haskell code is clean, well-documented and uses very little dependencies (to\navoid Cabal Hell). All the internally generated HTML5 is put in one Haskell\nfile (Html.hs), which you can edit, but you'll probably find that editing the\ndefault css and template will fit your needs.</p>\n"
  },
  {
    "title": "Hastie",
    "repo": "mkaz/hastie",
    "homepage": "https://github.com/mkaz/hastie",
    "language": ["Go"],
    "license": ["MIT"],
    "templates": ["Go templates"],
    "description": "A static site generator written in Go",
    "bodyContent": "Hastie is a static site generator, written in Golang, relatively compatible with\njekyll format. Use markdown for posts, supports RSS and simple Go templates.\n\n### Why the name \"Hastie\"?\n\nThe name Hastie is from a character in the novel Dr. Jekyll and Mr. Hyde.",
    "bodyHtml": "<p>Hastie is a static site generator, written in Golang, relatively compatible with\njekyll format. Use markdown for posts, supports RSS and simple Go templates.</p>\n<h3>Why the name &quot;Hastie&quot;?</h3>\n<p>The name Hastie is from a character in the novel Dr. Jekyll and Mr. Hyde.</p>\n"
  },
  {
    "title": "HastySite",
    "repo": "h3rald/hastysite",
    "homepage": "https://hastysite.h3rald.com/",
    "language": ["Nim"],
    "license": ["MIT"],
    "templates": ["Mustache"],
    "description": "HastySite is a minimalist, self-contained, and highly-extensible static site generator.",
    "bodyContent": "HastySite is a minimalist but powerful static site generator written in [Nim](https://nim-lang.org) which aims to be fast at processing content and highly configurable to suit your own needs.\n\n### Key Features\n\n* Built-in rich markdown support via [HastyScribe](https://h3rald.com/hastyscribe).\n* Built-in [mustache](https://mustache.github.io/) support for page templates.\n* Limited support for standard [CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables).\n* Fully configurable content and asset processing pipeline, using the [min](https://min-lang.org) programming language.\n* Custom script definition, using the [min](https://min-lang.org) programming language.\n* Default stylesheet and fonts from [HastyScribe](https://h3rald.com/hastyscribe).\n* Default scripts and rules to get started quickly.\n* All packed in a single executable file, with no dependencies, available for the most common desktop platforms.",
    "bodyHtml": "<p>HastySite is a minimalist but powerful static site generator written in <a href=\"https://nim-lang.org\">Nim</a> which aims to be fast at processing content and highly configurable to suit your own needs.</p>\n<h3>Key Features</h3>\n<ul>\n<li>Built-in rich markdown support via <a href=\"https://h3rald.com/hastyscribe\">HastyScribe</a>.</li>\n<li>Built-in <a href=\"https://mustache.github.io/\">mustache</a> support for page templates.</li>\n<li>Limited support for standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\">CSS variables</a>.</li>\n<li>Fully configurable content and asset processing pipeline, using the <a href=\"https://min-lang.org\">min</a> programming language.</li>\n<li>Custom script definition, using the <a href=\"https://min-lang.org\">min</a> programming language.</li>\n<li>Default stylesheet and fonts from <a href=\"https://h3rald.com/hastyscribe\">HastyScribe</a>.</li>\n<li>Default scripts and rules to get started quickly.</li>\n<li>All packed in a single executable file, with no dependencies, available for the most common desktop platforms.</li>\n</ul>\n"
  },
  {
    "title": "Heckle",
    "repo": "marijnh/heckle",
    "homepage": "https://github.com/marijnh/heckle",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Mold"],
    "description": "A minimal Jekyll clone in node.js.",
    "bodyContent": "### Why?\n\nI like the approach to managing a site taken by Jekyll. A lot.\n\nI don't like Ruby, and I don't like strict logic-less templates. Jekyll is Ruby with Liquid as the templating engine.\n\nHeckle is JavaScript with Mold (programmable template extravaganza) as the templating engine.\n\nDon't use Heckle at this point if you want something stable and finished. It's a work in progress, and may be radically changed or pitilessly abandoned at any time.",
    "bodyHtml": "<h3>Why?</h3>\n<p>I like the approach to managing a site taken by Jekyll. A lot.</p>\n<p>I don't like Ruby, and I don't like strict logic-less templates. Jekyll is Ruby with Liquid as the templating engine.</p>\n<p>Heckle is JavaScript with Mold (programmable template extravaganza) as the templating engine.</p>\n<p>Don't use Heckle at this point if you want something stable and finished. It's a work in progress, and may be radically changed or pitilessly abandoned at any time.</p>\n"
  },
  {
    "title": "Hepek",
    "repo": "sake92/hepek",
    "homepage": "https://sake92.github.io/hepek/",
    "language": ["Scala"],
    "license": ["Apache 2.0"],
    "templates": ["Scala"],
    "description": "Render Scala objects into files",
    "startertemplaterepo": "sake92/hepek-starter",
    "bodyContent": "Hepek is a tool that turns Scala `object`s into files.  \nEverything that can be represented as a String can be written to a file.\n\n## Features\n- full Scala support\n- automatic relative links\n- incremental rendering and file watching\n- custom, extensible and **typesafe**:\n    - templates\n    - variables\n    - abstractions (data, functions)\n- Markdown syntax\n- Prismjs code highlighter\n- Katex or Mathjax for math formulas\n- PDF rendering\n- form helpers\n- simple installation, it's just an sbt plugin",
    "bodyHtml": "<p>Hepek is a tool that turns Scala <code>object</code>s into files.<br>\nEverything that can be represented as a String can be written to a file.</p>\n<h2>Features</h2>\n<ul>\n<li>full Scala support</li>\n<li>automatic relative links</li>\n<li>incremental rendering and file watching</li>\n<li>custom, extensible and <strong>typesafe</strong>:\n<ul>\n<li>templates</li>\n<li>variables</li>\n<li>abstractions (data, functions)</li>\n</ul>\n</li>\n<li>Markdown syntax</li>\n<li>Prismjs code highlighter</li>\n<li>Katex or Mathjax for math formulas</li>\n<li>PDF rendering</li>\n<li>form helpers</li>\n<li>simple installation, it's just an sbt plugin</li>\n</ul>\n"
  },
  {
    "title": "Hexo",
    "repo": "hexojs/hexo",
    "homepage": "https://hexo.io/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": [
      "EJS",
      "Pug",
      "Haml",
      "Swig",
      "Nunjucks",
      "Mustache",
      "Handlebars",
      "Twig",
      "Marko"
    ],
    "description": "Hexo is a fast, simple and powerful blog framework.",
    "twitter": "hexojs",
    "startertemplaterepo": "hexojs/hexo-starter",
    "bodyContent": "A fast, simple & powerful blog framework, powered by [Node.js](https://nodejs.org) and NPM.\n\n+ [Themes](https://hexo.io/themes)\n+ [Plugins](https://hexo.io/plugins)\n+ [Deploy to Netlify ⭐️](https://hexo.io/docs/deployment#Netlify)\n+ [Deploy anywhere](https://hexo.io/docs/deployment)\n+ [Docs](https://hexo.io/docs/)\n+ [Plugin API](https://hexo.io/api/)\n\nWe want to solve issues **fast**! [Please contribute](https://github.com/hexojs/hexo/issues) by answering questions or providing peer review on PRs! Thank you 🤗\n\n** Blazing Fast **\n\nHexo is powered by Node.js and supports multi-thread generating. Hundreds of files take only seconds to generate.\n\n** Easy Writing **\n\nHexo supports GitHub Flavored Markdown and all Octopress plugins and highly Jekyll/Octopress compatible.\n\n** Extensibility **\n\nHexo supports most of the popular template languages and CSS preprocessors. You can install [plugins](https://hexo.io/plugins) for Haml, Pug, Less, Stylus, Sass, AsciiDoc, or anything. The community is writing new plugins every day.",
    "bodyHtml": "<p>A fast, simple &amp; powerful blog framework, powered by <a href=\"https://nodejs.org\">Node.js</a> and NPM.</p>\n<ul>\n<li><a href=\"https://hexo.io/themes\">Themes</a></li>\n<li><a href=\"https://hexo.io/plugins\">Plugins</a></li>\n<li><a href=\"https://hexo.io/docs/deployment#Netlify\">Deploy to Netlify ⭐️</a></li>\n<li><a href=\"https://hexo.io/docs/deployment\">Deploy anywhere</a></li>\n<li><a href=\"https://hexo.io/docs/\">Docs</a></li>\n<li><a href=\"https://hexo.io/api/\">Plugin API</a></li>\n</ul>\n<p>We want to solve issues <strong>fast</strong>! <a href=\"https://github.com/hexojs/hexo/issues\">Please contribute</a> by answering questions or providing peer review on PRs! Thank you 🤗</p>\n<p>** Blazing Fast **</p>\n<p>Hexo is powered by Node.js and supports multi-thread generating. Hundreds of files take only seconds to generate.</p>\n<p>** Easy Writing **</p>\n<p>Hexo supports GitHub Flavored Markdown and all Octopress plugins and highly Jekyll/Octopress compatible.</p>\n<p>** Extensibility **</p>\n<p>Hexo supports most of the popular template languages and CSS preprocessors. You can install <a href=\"https://hexo.io/plugins\">plugins</a> for Haml, Pug, Less, Stylus, Sass, AsciiDoc, or anything. The community is writing new plugins every day.</p>\n"
  },
  {
    "title": "Hikaru",
    "repo": "AlynxZhou/hikaru",
    "homepage": "https://github.com/AlynxZhou/hikaru/",
    "language": ["CoffeeScript"],
    "license": ["Apache-2.0"],
    "templates": ["Nunjucks"],
    "description": "A static site generator that generates routes based on directories naturally.",
    "bodyContent": "A static site generator that generates routes based on directories naturally, powered by [Node.js](https://nodejs.org), NPM and [CoffeeScript](https://coffeescript.org/).\n\nYou can control how pages are placed with Hikaru, you put a file in `srcs`, it will show the same path in `docs`.\n\nDocs (Work in progress): [Here](https://github.com/AlynxZhou/hikaru/blob/master/docs/en/index.md)\n\nDefault theme ARIA: [hikaru-themes-aria](https://github.com/AlynxZhou/hikaru-theme-aria/)\n\nExample blog built with Hikaru and ARIA: [喵's StackHarbor](https://sh.alynx.xyz/)",
    "bodyHtml": "<p>A static site generator that generates routes based on directories naturally, powered by <a href=\"https://nodejs.org\">Node.js</a>, NPM and <a href=\"https://coffeescript.org/\">CoffeeScript</a>.</p>\n<p>You can control how pages are placed with Hikaru, you put a file in <code>srcs</code>, it will show the same path in <code>docs</code>.</p>\n<p>Docs (Work in progress): <a href=\"https://github.com/AlynxZhou/hikaru/blob/master/docs/en/index.md\">Here</a></p>\n<p>Default theme ARIA: <a href=\"https://github.com/AlynxZhou/hikaru-theme-aria/\">hikaru-themes-aria</a></p>\n<p>Example blog built with Hikaru and ARIA: <a href=\"https://sh.alynx.xyz/\">喵's StackHarbor</a></p>\n"
  },
  {
    "title": "HubPress",
    "repo": "HubPress/hubpress.io",
    "homepage": "http://hubpress.github.io/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "A web application to build your Blog on GitHub.",
    "startertemplaterepo": "HubPress/hubpress.io",
    "twitter": "HubPressIO",
    "bodyContent": "HubPress is a static site generator written in JavaScript, powered by Vue.js, Asciidoctor and GitHub \n\n### It's free\n\nAll you need is a free GitHub account, no server's rent, no subscription.\n\n### Easy setup\n\nFork the hubpress.io repository, update the config file and it's done, your Blog is ready. You can also use Netlify to deploy an HubPress instance in one click.\n\n### Start conversations\n\nWe integrated Disqus, all you need to start conversations with your readers is a Disqus shortname.\n\n### Get analytics\n\nLearn more about your readers with Google Analytics, you just have to set your tracking id in the HubPress' configuration. \n\n### Videos\n\n#### Demo - Take a closer look in more detail (YouTube)\n[![Demo - Take a closer look in more detail](https://img.youtube.com/vi/7gP3i4tHlRM/0.jpg)](http://www.youtube.com/watch?v=7gP3i4tHlRM)\n\n#### How To Create A Free Blog With HubPress And Netlify (YouTube)\n\nHere is a tutorial to start with Netlifly\n\n[![How To Create A Free Blog With HubPress And Netlify!](https://cloud.githubusercontent.com/assets/2006548/24294883/a6ecb052-1098-11e7-909e-1fa69a496e7d.png)](https://www.youtube.com/watch?v=mLPklM1w5-s)",
    "bodyHtml": "<p>HubPress is a static site generator written in JavaScript, powered by Vue.js, Asciidoctor and GitHub</p>\n<h3>It's free</h3>\n<p>All you need is a free GitHub account, no server's rent, no subscription.</p>\n<h3>Easy setup</h3>\n<p>Fork the hubpress.io repository, update the config file and it's done, your Blog is ready. You can also use Netlify to deploy an HubPress instance in one click.</p>\n<h3>Start conversations</h3>\n<p>We integrated Disqus, all you need to start conversations with your readers is a Disqus shortname.</p>\n<h3>Get analytics</h3>\n<p>Learn more about your readers with Google Analytics, you just have to set your tracking id in the HubPress' configuration.</p>\n<h3>Videos</h3>\n<h4>Demo - Take a closer look in more detail (YouTube)</h4>\n<p><a href=\"http://www.youtube.com/watch?v=7gP3i4tHlRM\"><img src=\"https://img.youtube.com/vi/7gP3i4tHlRM/0.jpg\" alt=\"Demo - Take a closer look in more detail\"></a></p>\n<h4>How To Create A Free Blog With HubPress And Netlify (YouTube)</h4>\n<p>Here is a tutorial to start with Netlifly</p>\n<p><a href=\"https://www.youtube.com/watch?v=mLPklM1w5-s\"><img src=\"https://cloud.githubusercontent.com/assets/2006548/24294883/a6ecb052-1098-11e7-909e-1fa69a496e7d.png\" alt=\"How To Create A Free Blog With HubPress And Netlify!\"></a></p>\n"
  },
  {
    "title": "Hugo",
    "repo": "gohugoio/hugo",
    "homepage": "https://gohugo.io/",
    "language": ["Go"],
    "license": ["Apache 2.0"],
    "templates": ["Go"],
    "description": "A Fast and Flexible Static Site Generator.",
    "startertemplaterepo": "netlify/victor-hugo",
    "twitter": "GoHugoIO",
    "bodyContent": "Hugo is a static site generator written in Go. It is optimized for\nspeed, easy use and configurability. Hugo takes a directory with content and\ntemplates and renders them into a full html website.\n\nHugo makes use of Markdown files with front matter for meta data.\n\nA typical website of moderate size can be\nrendered in a fraction of a second. A good rule of thumb is that Hugo\ntakes around 1 millisecond for each piece of content.\n\nIt is written to work well with any\nkind of website including blogs, tumbles and docs.",
    "bodyHtml": "<p>Hugo is a static site generator written in Go. It is optimized for\nspeed, easy use and configurability. Hugo takes a directory with content and\ntemplates and renders them into a full html website.</p>\n<p>Hugo makes use of Markdown files with front matter for meta data.</p>\n<p>A typical website of moderate size can be\nrendered in a fraction of a second. A good rule of thumb is that Hugo\ntakes around 1 millisecond for each piece of content.</p>\n<p>It is written to work well with any\nkind of website including blogs, tumbles and docs.</p>\n"
  },
  {
    "title": "Hyde",
    "repo": "hyde/hyde",
    "homepage": "http://hyde.github.io/",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "Jekyll's evil Python powered twin",
    "bodyContent": "Hyde is a static website generator written in python. While Hyde took life as awesome Jekyll's evil twin, it has since been completely consumed by the dark side and has an identity of its own.\n\nHyde desires to fulfill the lofty goal of removing the pain points involved in creating and maintaining static websites.\n\n### Spotlight\n\n* Support for powerful template languages like Jinja2 complemented with custom tags and filters.\n* Rich object model and overridable hierarchical metadata thats available for use in templates.\n* Configurable sorting, tagging and grouping support.\n* Extensible plugin architecture with text preprocessing and HTML postprocessing support for complex content transformations.\n* Instant preview using built-in webserver that regenerates content if needed.",
    "bodyHtml": "<p>Hyde is a static website generator written in python. While Hyde took life as awesome Jekyll's evil twin, it has since been completely consumed by the dark side and has an identity of its own.</p>\n<p>Hyde desires to fulfill the lofty goal of removing the pain points involved in creating and maintaining static websites.</p>\n<h3>Spotlight</h3>\n<ul>\n<li>Support for powerful template languages like Jinja2 complemented with custom tags and filters.</li>\n<li>Rich object model and overridable hierarchical metadata thats available for use in templates.</li>\n<li>Configurable sorting, tagging and grouping support.</li>\n<li>Extensible plugin architecture with text preprocessing and HTML postprocessing support for complex content transformations.</li>\n<li>Instant preview using built-in webserver that regenerates content if needed.</li>\n</ul>\n"
  },
  {
    "title": "igapyonv3",
    "repo": "igapyon/igapyonv3",
    "homepage": "https://igapyon.github.io/igapyonv3/",
    "language": ["Java"],
    "license": ["Apache 2.0"],
    "templates": ["Freemarker"],
    "description": "A static site/blog generator for developers & designers",
    "bodyContent": "igapyonv3 is a Java based open source static site/blog generator for developers.\n\n* Lightweight and turn-key static site/blog generator.\n* Provided as a Maven Plugin.\n* Supports Markdown content.\n* RSS feed support.\n* Freemarker and igapyonv3's additional diary directive support.\n* Convert markdown into Bootstrap based HTML.",
    "bodyHtml": "<p>igapyonv3 is a Java based open source static site/blog generator for developers.</p>\n<ul>\n<li>Lightweight and turn-key static site/blog generator.</li>\n<li>Provided as a Maven Plugin.</li>\n<li>Supports Markdown content.</li>\n<li>RSS feed support.</li>\n<li>Freemarker and igapyonv3's additional diary directive support.</li>\n<li>Convert markdown into Bootstrap based HTML.</li>\n</ul>\n"
  },
  {
    "title": "InkPaper",
    "repo": "InkProject/ink",
    "homepage": "http://www.chole.io/",
    "language": ["Go"],
    "license": ["MIT"],
    "templates": ["Go"],
    "description": "InkPaper is an elegant, extremely fast static blog generator.",
    "bodyContent": "An elegant static blog generator, powered by Golang.\n\n### Easy Use\n\nSimple & Cross Platform\n\n### Fast Build\n\n1000+ Posts Per Second\n\n### Elegant Theme\n\nFresh Visual Style",
    "bodyHtml": "<p>An elegant static blog generator, powered by Golang.</p>\n<h3>Easy Use</h3>\n<p>Simple &amp; Cross Platform</p>\n<h3>Fast Build</h3>\n<p>1000+ Posts Per Second</p>\n<h3>Elegant Theme</h3>\n<p>Fresh Visual Style</p>\n"
  },
  {
    "title": "IronBeard",
    "repo": "wkallhof/iron-beard",
    "homepage": "https://github.com/wkallhof/iron-beard",
    "language": [".Net"],
    "license": ["MIT"],
    "templates": ["Razor", "Markdown"],
    "description": "Simple, zero-configuration static site generator written in .NET Core.",
    "bodyContent": "A simple and easy to use cross-platform static site generator built with .NET Core. IronBeard processes your Razor `.cshtml` files and markdown `.md` files into full `.html` files ready for static hosting on services like Amazon S3.\n\nIronBeard maintains your folder structure and copies static assets like images, JS, and CSS into their respective directories to maintain the correct linking on the generated site.\n\nAdding a `beard.json` file to your project root allows for further configuration.\n\n## Features\n- Support for recursive folder and file structures\n- Markdown Processor\n- Razor Processor\n- Static File Processor\n- Razor Layout Support (wraps other razor files and markdown markup)\n- Markdown metadata (YAML Frontmatter support in markdown)\n- Razor metadata (YAML Frontmatter support with Razor comments)\n- HTML Formatting to clean up file output. \n- URL correction (properly handles relative routes and root folder routing (index.html etc.))\n- Global configuration file\n- Rich CLI output\n- Valid system errors codes (useful for automation)\n- Watch command for automatic rebuilding on file or directory change",
    "bodyHtml": "<p>A simple and easy to use cross-platform static site generator built with .NET Core. IronBeard processes your Razor <code>.cshtml</code> files and markdown <code>.md</code> files into full <code>.html</code> files ready for static hosting on services like Amazon S3.</p>\n<p>IronBeard maintains your folder structure and copies static assets like images, JS, and CSS into their respective directories to maintain the correct linking on the generated site.</p>\n<p>Adding a <code>beard.json</code> file to your project root allows for further configuration.</p>\n<h2>Features</h2>\n<ul>\n<li>Support for recursive folder and file structures</li>\n<li>Markdown Processor</li>\n<li>Razor Processor</li>\n<li>Static File Processor</li>\n<li>Razor Layout Support (wraps other razor files and markdown markup)</li>\n<li>Markdown metadata (YAML Frontmatter support in markdown)</li>\n<li>Razor metadata (YAML Frontmatter support with Razor comments)</li>\n<li>HTML Formatting to clean up file output.</li>\n<li>URL correction (properly handles relative routes and root folder routing (index.html etc.))</li>\n<li>Global configuration file</li>\n<li>Rich CLI output</li>\n<li>Valid system errors codes (useful for automation)</li>\n<li>Watch command for automatic rebuilding on file or directory change</li>\n</ul>\n"
  },
  {
    "title": "JAQ",
    "repo": "asciidoctor/jekyll-asciidoc-quickstart",
    "homepage": "https://github.com/asciidoctor/jekyll-asciidoc-quickstart",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Liquid"],
    "description": "A shortcut to Asciidoc templating on Github's Jekyll hosting infrastructure.",
    "bodyContent": "The Jekyll AsciiDoc Quickstart project is a leg-up in starting your own website hosted on Github with content based in AsciiDoc. This project combines the power of AsciiDoc with a beautiful CSS framework and project-ready template on top of Github’s existing publishing infrastructure.",
    "bodyHtml": "<p>The Jekyll AsciiDoc Quickstart project is a leg-up in starting your own website hosted on Github with content based in AsciiDoc. This project combines the power of AsciiDoc with a beautiful CSS framework and project-ready template on top of Github’s existing publishing infrastructure.</p>\n"
  },
  {
    "title": "JBake",
    "repo": "jbake-org/jbake",
    "homepage": "http://jbake.org/",
    "language": ["Java"],
    "license": ["MIT"],
    "templates": ["Freemarker", "Groovy", "Thymeleaf", "Jade"],
    "description": "A static site/blog generator for developers & designers",
    "twitter": "javabake",
    "bodyContent": "JBake is a Java based open source static site/blog generator for developers.\n\n* Supports AsciiDoc, Markdown and good old HTML formatted content.\n* Structure your content any way you see fit.\n* RSS feed, archive and tag support.\n* View draft content before publishing it and making it available to the world.\n* Freemarker, Groovy, Thymeleaf & Jade based templates & scripting support.\n* Easily integrate CSS frameworks such as Bootstrap and Foundation.\n* Add as much metadata to content as you like, also exposed to templates.\n* Store your site content in Dropbox, CVS, SVN, Git or whatever you want.",
    "bodyHtml": "<p>JBake is a Java based open source static site/blog generator for developers.</p>\n<ul>\n<li>Supports AsciiDoc, Markdown and good old HTML formatted content.</li>\n<li>Structure your content any way you see fit.</li>\n<li>RSS feed, archive and tag support.</li>\n<li>View draft content before publishing it and making it available to the world.</li>\n<li>Freemarker, Groovy, Thymeleaf &amp; Jade based templates &amp; scripting support.</li>\n<li>Easily integrate CSS frameworks such as Bootstrap and Foundation.</li>\n<li>Add as much metadata to content as you like, also exposed to templates.</li>\n<li>Store your site content in Dropbox, CVS, SVN, Git or whatever you want.</li>\n</ul>\n"
  },
  {
    "title": "Jekyll",
    "repo": "jekyll/jekyll",
    "homepage": "http://jekyllrb.com",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Liquid"],
    "description": "A simple, blog-aware, static site generator.",
    "twitter": "jekyllrb",
    "startertemplaterepo": "netlify-templates/jekyll-base",
    "bodyContent": "Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. Jekyll is the engine behind [GitHub Pages](http://pages.github.com), which you can use to host sites right from your GitHub repositories.\n\n### Philosophy\n\nJekyll does what you tell it to do — no more, no less. It doesn't try to outsmart users by making bold assumptions, nor does it burden them with needless complexity and configuration. Put simply, Jekyll gets out of your way and allows you to concentrate on what truly matters: your content.",
    "bodyHtml": "<p>Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. Jekyll is the engine behind <a href=\"http://pages.github.com\">GitHub Pages</a>, which you can use to host sites right from your GitHub repositories.</p>\n<h3>Philosophy</h3>\n<p>Jekyll does what you tell it to do — no more, no less. It doesn't try to outsmart users by making bold assumptions, nor does it burden them with needless complexity and configuration. Put simply, Jekyll gets out of your way and allows you to concentrate on what truly matters: your content.</p>\n"
  },
  {
    "title": "Jenny",
    "repo": "hmngwy/jenny",
    "homepage": "https://github.com/hmngwy/jenny",
    "language": ["Bash"],
    "license": ["MIT"],
    "templates": ["Bash"],
    "description": "Static blog generator that uses basic GNU tools.",
    "bodyContent": "## Goal\n\nJenny aims to provide the simplest way to blog with the smallest\nfootprint possible.\n\nThere are draft and forward (scheduled) posting support.\nMarkdown through a modified Markdown.awk or MultiMarkdown.pl\n\nPagination is fixed, i.e. your first post will always be in\n\"Page 1\".\n\nSettings can be peristed in an rc file or overridden on run\ntime through command arguments.\n\nThe default theme is small and light, and the template nimble.",
    "bodyHtml": "<h2>Goal</h2>\n<p>Jenny aims to provide the simplest way to blog with the smallest\nfootprint possible.</p>\n<p>There are draft and forward (scheduled) posting support.\nMarkdown through a modified Markdown.awk or MultiMarkdown.pl</p>\n<p>Pagination is fixed, i.e. your first post will always be in\n&quot;Page 1&quot;.</p>\n<p>Settings can be peristed in an rc file or overridden on run\ntime through command arguments.</p>\n<p>The default theme is small and light, and the template nimble.</p>\n"
  },
  {
    "title": "Jigsaw",
    "repo": "tightenco/jigsaw",
    "homepage": "http://jigsaw.tighten.co/",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Blade"],
    "description": "Static sites for Laravel developers",
    "twitter": "jigsawbytighten",
    "bodyContent": "Jigsaw is a framework for rapidly building static sites using the same modern tooling that powers your web applications.\n\n### Blade templating, just like your Laravel apps.\n\nBlade is a powerful, simple, and beautiful templating language, but until now it wasn't an option if you were building a simple static site that didn't need a complex PHP backend.\n\nJigsaw brings Blade to the static site world, so you can use the same templating engine for simple websites as you do for complex web applications.\n\n### Use Markdown for content-driven pages.\n\nMarkdown is a fantastic writing format for things like articles, blog posts, or documentation pages.\n\nJigsaw makes it painless to create a layout in Blade, and fill it with content written in Markdown.\n\n### Compile your assets using Laravel Mix.\n\nJigsaw bakes in support for Laravel Mix so you can compile your CSS and Javascript assets the same way you're used to in Laravel.\n\nWe also preconfigure Mix to watch your Blade files so your site is rebuilt automatically when you make a change. Combined with out-of-the-box Browsersync support, previewing your changes quickly couldn't be easier.",
    "bodyHtml": "<p>Jigsaw is a framework for rapidly building static sites using the same modern tooling that powers your web applications.</p>\n<h3>Blade templating, just like your Laravel apps.</h3>\n<p>Blade is a powerful, simple, and beautiful templating language, but until now it wasn't an option if you were building a simple static site that didn't need a complex PHP backend.</p>\n<p>Jigsaw brings Blade to the static site world, so you can use the same templating engine for simple websites as you do for complex web applications.</p>\n<h3>Use Markdown for content-driven pages.</h3>\n<p>Markdown is a fantastic writing format for things like articles, blog posts, or documentation pages.</p>\n<p>Jigsaw makes it painless to create a layout in Blade, and fill it with content written in Markdown.</p>\n<h3>Compile your assets using Laravel Mix.</h3>\n<p>Jigsaw bakes in support for Laravel Mix so you can compile your CSS and Javascript assets the same way you're used to in Laravel.</p>\n<p>We also preconfigure Mix to watch your Blade files so your site is rebuilt automatically when you make a change. Combined with out-of-the-box Browsersync support, previewing your changes quickly couldn't be easier.</p>\n"
  },
  {
    "title": "jssg",
    "repo": "agrison/jssg",
    "homepage": "https://github.com/agrison/jssg",
    "language": ["Java"],
    "license": ["MIT"],
    "templates": ["Freemarker"],
    "description": "A static site/blog generator in Java",
    "bodyContent": "Jssg is a simple static site generator like Jekyll, written in Java.\n\n* Supports Markdown, Textile and good HTML formatted content.\n* Freemarker based templates.\n* Syntax Highlighting through the use of Pygments, fallbacking to Jygments if unavailable.\n* Fast generation.\n* Bundled with a local server with auto-refresh on save.",
    "bodyHtml": "<p>Jssg is a simple static site generator like Jekyll, written in Java.</p>\n<ul>\n<li>Supports Markdown, Textile and good HTML formatted content.</li>\n<li>Freemarker based templates.</li>\n<li>Syntax Highlighting through the use of Pygments, fallbacking to Jygments if unavailable.</li>\n<li>Fast generation.</li>\n<li>Bundled with a local server with auto-refresh on save.</li>\n</ul>\n"
  },
  {
    "title": "jus",
    "repo": "jus/jus",
    "homepage": "http://jus.js.org",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "dev server and build tool with no configuration and no boilerplate code",
    "bodyContent": "jus is a development server and build tool for making static websites with no configuration and no boilerplate code. It has built-in support for [browserify](https://github.com/substack/browserify-handbook#readme), ES6 and ES2015 with [Babel](http://babeljs.io/), [React JSX](http://babeljs.io/docs/plugins/preset-react/), GitHub Flavored markdown, syntax highlighting, [Sass](http://sass-lang.com/), [Less](http://lesscss.org/), [Stylus](http://stylus-lang.com/), [Myth](http://www.myth.io/), [Handlebars](http://handlebarsjs.com/), [browsersync](https://browsersync.io/) and more.\n\n## Why?\n\nThe year is 2016 and you're building a new website. At first you just create a single HTML file with some inline scripts and style tags. This works for a bit, but soon your code grows and you decide to extract the styles and scripts into standalone files. This is slightly better, but eventually you want to do something more sophisticated, like writing your stylesheets in Sass, or concatenating and minifying assets, or using npm dependencies with [browserify](https://github.com/substack/browserify-handbook). These conveniences are essential to building a website of any magnitude, but setting them up is tedious and time-consuming. It's at this point in the project that your attention turns from the creative to the mundane. Rather than building, you're now configuring.\n\nIn this day and age, most developers would turn to [Gulp](http://gulpjs.com/), [npm scripts](http://substack.net/task_automation_with_npm_run), [Jekyll](https://www.staticgen.com/jekyll) or one of [dozens of static site tools](https://www.staticgen.com). This is where jus comes in as an alternative.\n\nThere is no setup with jus. It has just two commands: `serve` and `build`. Run `jus serve` in your project directory and you've got a live develpment server running, watching for file changes, autorefreshing your browser with [browsersync](https://browsersync.io/), and serving your content with [clean URLs](#clean-urls). Write a `foo.sass` file and it'll be served at `/foo.css`. Use an npm-style `require` statement in your script, and jus will serve it up as a browserified bundle. Write React's JSX syntax and it'll be transpiled to javascript on the fly. Write a GitHub-flavored `/markdown/file.md` and it'll be served as syntax-highlighted HTML at `/markdown/file`.\n\nWhen it's time to deploy, run `jus build` to compile your site down into plain old HTML, CSS, and Javascript files, ready for deployment to [GitHub Pages](#deployment-to-github-pages), [Surge](#deployment-to-surge), or any other static site host that supports clean URLs.\n\n## Getting Started\n\njus requires [node 4](https://nodejs.org/en/download/) or greater, because it uses some newer Javascript features. Install the command-line interface globally, then run it to see usage instructions:\n\n```sh\nnpm i -g jus && jus\n```\n\njus has a lot of dependencies, so it takes a while to install. Maybe go grab a :coffee: and read up\non [how to make npm faster](https://addyosmani.com/blog/using-npm-offline/).\n\nIf you like to learn by example, check out the repos of [sites using jus](#sites-using-jus). Otherwise, read on...\n\n## Pages\n\nPages are written in Markdown, HTML, Handlebars, or any combination thereof. At render time each page is passed a [Handlebars context object](#context) containing metadata about all the files in the directory.\n\n- Markdown parsing with [marky-markdown](http://npm.im/marky-markdown), the battle-tested [commonmark](http://commonmark.org/)-compliant parser used by [npmjs.com](https://npmjs.com).\n- GitHub-flavored Markdown support, including [fenced code blocks](https://help.github.com/articles/creating-and-highlighting-code-blocks/)\n- Syntax Highlighting powered by [Atom](https://atom.io)'s [highlights](npm.im/highlights) package.\n- Markdown headings (`H1`, `H2`, etc) are automatically converted to anchored hyperlinks.\n- Emoji support. Converts :emoji:-style shortcuts to unicode emojis.\n- [HTML frontmatter](#frontmatter) as page metadata\n\nExtensions: `html|hbs|handlebars|markdown|md`\n\n## Scripts\n\nAll javascript files in your project are automatically [browserified](https://github.com/substack/browserify-handbook#readme) and [babelified](https://www.npmjs.com/package/babelify) using the `es2015` and `react` presets.\n\nYou can use node-style `require` statements to include node and npm modules in your code:\n\n```js\nconst url = require('url').parse('https://example.com')\n\nconsole.log(`the domain is ${url.host}`)\n```\n\nYou can also use [ES6-style imports](http://babeljs.io/docs/learn-es2015/#modules), if you prefer:\n\n```js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport domready from 'domready'\n\ndomready(() => {\n  // do some React magic\n})\n```\n\nScripts are browserified using [`babel-preset-react`](https://babeljs.io/docs/plugins/preset-react/), so you\ncan write JSX in your scripts.\n\nExtensions: `js|jsx|es|es6`\n\n## Stylesheets\n\nStylesheets can be written in\n[Sass](http://sass-lang.com/),\n[SCSS](http://sass-lang.com/),\n[Less](http://lesscss.org/),\n[Stylus](http://stylus-lang.com/),\n[Myth](http://www.myth.io/),\nor plain old CSS. Use whatever preprocessor suits your fancy.\n\nExtensions: `css|less|sass|scss|styl`\n\n## Context\n\nWhen the jus server is initialized, it recursively finds all the files in the directory tree,\nignoring `node_modules`, `.git`, and other unwanted patterns. These files are then stored in\nmemory in an array called `files`. For convenience, this list of files is broken down\ninto smaller arrays by type: an array for `pages`, another array for `scripts`, etc.\n\n```js\n{\n  files: [...],\n  pages: [...]\n  scripts: [...]\n  stylesheets: [...]\n  images: [...]\n  datafiles: [...]\n}\n```\n\nWhen you request a page, the server renders the page on the fly, passing this object to the\ngiven page's template. This means every page has access to metadata about\nevery file in the site at render time.\n\nUsing handlebars in your pages is entirely optional. If your pages don't need to do any dynamic rendering at build time, that's okay. The context will simply be ignored at render time.\n\n## Frontmatter\n\njus supports [HTML frontmatter](https://github.com/zeke/html-frontmatter#readme). This allows you to add key-value metadata to your pages:\n\n```html\n<!--\ntitle: Alice in Wonderland\nyear: 1951\n-->\n```\n\nAny such values present in an HTML comment at the top of a page are made available in that page's [Handlebars context object](#context) at render time.\n\nNote: Jekyll uses YAML for frontmatter, but jus uses HTML, because it can be included in a file without adversely affecting the way it renders on github.com.\n\n## Templates\n\nHandlebars templates can be used to wrap layouts around your pages.\n\n- If a file named `/layout.(html|hbs|handlebars|markdown|md)` is present, it will be applied to all pages by default.\n- Templates must include a `{{{body}}}` string, to be used as a placeholder for where the main content should be rendered.\n- Templates must have the word `layout` in their filename.\n- Pages can specify a custom layout in their [frontmatter](#frontmatter). Specifying `layout: foo` will refer to the `/layout-foo.(html|hbs|handlebars|markdown|md)` layout file.\n- Pages can disable layout by setting `layout: false` in their frontmatter.\n\nExtensions: `html|hbs|handlebars|markdown|md|mdown`\n\n### Helpers\n\njus provides a number of helper functions you can use in your handlebars\ntemplates. All of the helpers are from [lobars](https://github.com/zeke/lobars),\na collection of utility functions plucked directly from\n[lodash](https://lodash.com/).\n\nlobars includes **comparison helpers** like\n[endsWith](https://lodash.com/docs#endsWith),\n[eq](https://lodash.com/docs#eq),\n[gt](https://lodash.com/docs#gt),\n[gte](https://lodash.com/docs#gte),\n[includes](https://lodash.com/docs#includes),\n[isArray](https://lodash.com/docs#isArray),\n[isBoolean](https://lodash.com/docs#isBoolean),\n[isDate](https://lodash.com/docs#isDate),\n[isEmpty](https://lodash.com/docs#isEmpty),\n[isMatch](https://lodash.com/docs#isMatch),\n[isNumber](https://lodash.com/docs#isNumber),\n[isString](https://lodash.com/docs#isString),\n[isSymbol](https://lodash.com/docs#isSymbol),\n[isUndefined](https://lodash.com/docs#isUndefined),\n[lt](https://lodash.com/docs#lt),\n[lte](https://lodash.com/docs#lte),\n[startsWith](https://lodash.com/docs#startsWith) and more.\n\nHere's an example use of the `gte` (greater than or equal to) helper:\n\n```handlebars\n\\{{#gte age 21}}\n  You are old enough to drink in the United States.\n\\{{/gte}}\n```\n\nlobars also provides helpers for manipulating input like\n[camelCase](https://lodash.com/docs#camelCase),\n[capitalize](https://lodash.com/docs#capitalize),\n[escape](https://lodash.com/docs#escape),\n[kebabCase](https://lodash.com/docs#kebabCase),\n[lowerCase](https://lodash.com/docs#lowerCase),\n[lowerFirst](https://lodash.com/docs#lowerFirst),\n[pad](https://lodash.com/docs#pad),\n[padEnd](https://lodash.com/docs#padEnd),\n[padStart](https://lodash.com/docs#padStart),\n[parseInt](https://lodash.com/docs#parseInt),\n[repeat](https://lodash.com/docs#repeat),\n[replace](https://lodash.com/docs#replace),\n[snakeCase](https://lodash.com/docs#snakeCase),\n[split](https://lodash.com/docs#split),\n[startCase](https://lodash.com/docs#startCase),\n[template](https://lodash.com/docs#template),\n[toLower](https://lodash.com/docs#toLower),\n[toUpper](https://lodash.com/docs#toUpper),\n[trim](https://lodash.com/docs#trim),\n[trimEnd](https://lodash.com/docs#trimEnd),\n[trimStart](https://lodash.com/docs#trimStart),\n[truncate](https://lodash.com/docs#truncate),\n[unescape](https://lodash.com/docs#unescape),\n[upperCase](https://lodash.com/docs#upperCase),\n[upperFirst](https://lodash.com/docs#upperFirst),\nand more.\n\nHere's how you use the string helpers:\n\n```handlebars\n\\{{lowerCase someString}}\n```\n\n### Images\n\nDelicious metadata is extracted from images and included in the [Handlebars context object](#context), which is accessible to every page.\n\n- Extracts [EXIF data](https://en.wikipedia.org/wiki/Exchangeable_image_file_format) from JPEGs, including [geolocation  data](https://en.wikipedia.org/wiki/Exchangeable_image_file_format#Geolocation).\n- Extracts [dimensions](https://www.npmjs.com/package/image-size)\n- Extracts [color palettes](https://www.npmjs.com/package/get-image-colors)\n\nExtensions: `png|jpg|gif|svg`\n\n## Datafiles\n\nJSON and YML files are slurped into the [Handlebars context object](#context), which is accessible to every page.\n\nExtensions: `json|yaml|yml`\n\n## Clean URLs\n\njus uses a clean URL strategy that is compatible with\n[GitHub Pages](http://aseemk.github.io/gh-pages-test/)\nand\n[surge.sh](https://surge.sh/help/using-clean-urls-automatically).\nIn essence, [pages](#pages) get their extension lopped off,\nand pages named `index` inherit the name of their directory.\n\n<table class=\"routes\">\n  <tr>\n    <th>Filename</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>index.html</td>\n    <td>/</td>\n  </td>\n  <tr>\n    <td>nested/index.html</td>\n    <td>/nested</td>\n  </td>\n  <tr>\n    <td>nested/page.html</td>\n    <td>/nested/page</td>\n  </td>\n  <tr>\n    <td>also/markdown.md</td>\n    <td>/also/markdown</td>\n  </td>\n  <tr>\n    <td>also/handlebars.hbs</td>\n    <td>/also/handlebars</td>\n  </td>\n  <tr>\n    <td>stylesheet.scss</td>\n    <td>/stylesheet.css</td>\n  </td>\n  <tr>\n    <td>stylesheet.sass</td>\n    <td>/stylesheet.css</td>\n  </td>\n  <tr>\n    <td>stylesheet.styl</td>\n    <td>/stylesheet.css</td>\n  </td>\n  <tr>\n    <td>stylesheet.styl</td>\n    <td>/stylesheet.css</td>\n  </td>\n</table>\n\n## Deployment to GitHub Pages\n\nAdd the following to your package.json:\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"jus serve\",\n    \"deploy\": \"npm run build && npm run commit && npm run push && npm run open\",\n    \"build\": \"jus build . dist\",\n    \"commit\": \"git add dist && git commit -m 'update dist'\",\n    \"push\": \"git subtree push --prefix dist origin gh-pages\",\n    \"open\": \"open http://zeke.sikelianos.com\"\n  }\n}\n```\n\nNow whenever you want to publish to GitHub Pages, run:\n\n```sh\nnpm run deploy\n```\n\nNote: GitHub's [User Pages](https://help.github.com/articles/user-organization-and-project-pages/#user--organization-pages) (like `yourname.github.io`) are built from the `master` branch,\nwhereas [Project Pages](https://help.github.com/articles/user-organization-and-project-pages/#project-pages) (like `yourname.github.io/project`) are built from the `gh-pages` branch.\nBe aware of this when setting up your npm scripts.\n\nNote: GitHub's CDN can take a minute to update, so you might have to refresh a few times when visiting.\n\n## Deployment to Surge\n\n[surge.sh](https://surge.sh/) is an awesome new platform for publishing static websites.\n\nInstall the Surge CLI:\n\n```sh\n npm i -g surge\n ```\n\nAdd the following to your package.json:\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"jus serve\",\n    \"deploy\": \"npm run build && npm run build && npm run open\",\n    \"build\": \"jus build . dist\",\n    \"push\": \"surge dist YOUR-URL\",\n    \"open\": \"open YOUR-URL\"\n  }\n}\n```\n\nNow whenever you want to publish to Surge, run:\n\n```sh\nnpm run deploy\n```\n\n## Prior Art\n\njus was inspired by a number of existing tools:\n\n- [Harp](http://harpjs.com/): The main inspiration for jus. It was the first static site tool to introduce the concept of an [in-place asset pipeline](http://harpjs.com/docs/development/rules).\n- [Jekyll](http://jekyllrb.com/): A blog-aware static site generator in Ruby. jus borrows the concept of frontmatter from Jekyll, but uses [HTML frontmatter](https://github.com/zeke/html-frontmatter#readme), unlike Jekyll's YAML frontmatter.\n- [Brunch](http://brunch.io/#why): A lightweight tool for building HTML5 applications with emphasis on elegance and simplicity. The jus development server uses the [chokidar](https://www.npmjs.com/package/chokidar) module from Brunch to watch the filesystem.\n- Ruby on Rails: The web development framework that helped popularize [Convention over Configuration](https://en.wikipedia.org/wiki/Convention_over_configuration)\n\n## Sites using jus\n\nSometimes real examples are the easiest way to learn. Check out these open-source sites built with jus:\n\n- [jus.js.org](https://github.com/zeke/jus.js.org), the site you're looking at now.\n- [zeke.sikelianos.com](http://github.com/zeke/zeke.sikelianos.com), a personal portfolio site.\n- [acrophony](https://github.com/zeke/acrophony#readme), an experimental React GUI for acrophonic alphabets.",
    "bodyHtml": "<p>jus is a development server and build tool for making static websites with no configuration and no boilerplate code. It has built-in support for <a href=\"https://github.com/substack/browserify-handbook#readme\">browserify</a>, ES6 and ES2015 with <a href=\"http://babeljs.io/\">Babel</a>, <a href=\"http://babeljs.io/docs/plugins/preset-react/\">React JSX</a>, GitHub Flavored markdown, syntax highlighting, <a href=\"http://sass-lang.com/\">Sass</a>, <a href=\"http://lesscss.org/\">Less</a>, <a href=\"http://stylus-lang.com/\">Stylus</a>, <a href=\"http://www.myth.io/\">Myth</a>, <a href=\"http://handlebarsjs.com/\">Handlebars</a>, <a href=\"https://browsersync.io/\">browsersync</a> and more.</p>\n<h2>Why?</h2>\n<p>The year is 2016 and you're building a new website. At first you just create a single HTML file with some inline scripts and style tags. This works for a bit, but soon your code grows and you decide to extract the styles and scripts into standalone files. This is slightly better, but eventually you want to do something more sophisticated, like writing your stylesheets in Sass, or concatenating and minifying assets, or using npm dependencies with <a href=\"https://github.com/substack/browserify-handbook\">browserify</a>. These conveniences are essential to building a website of any magnitude, but setting them up is tedious and time-consuming. It's at this point in the project that your attention turns from the creative to the mundane. Rather than building, you're now configuring.</p>\n<p>In this day and age, most developers would turn to <a href=\"http://gulpjs.com/\">Gulp</a>, <a href=\"http://substack.net/task_automation_with_npm_run\">npm scripts</a>, <a href=\"https://www.staticgen.com/jekyll\">Jekyll</a> or one of <a href=\"https://www.staticgen.com\">dozens of static site tools</a>. This is where jus comes in as an alternative.</p>\n<p>There is no setup with jus. It has just two commands: <code>serve</code> and <code>build</code>. Run <code>jus serve</code> in your project directory and you've got a live develpment server running, watching for file changes, autorefreshing your browser with <a href=\"https://browsersync.io/\">browsersync</a>, and serving your content with <a href=\"#clean-urls\">clean URLs</a>. Write a <code>foo.sass</code> file and it'll be served at <code>/foo.css</code>. Use an npm-style <code>require</code> statement in your script, and jus will serve it up as a browserified bundle. Write React's JSX syntax and it'll be transpiled to javascript on the fly. Write a GitHub-flavored <code>/markdown/file.md</code> and it'll be served as syntax-highlighted HTML at <code>/markdown/file</code>.</p>\n<p>When it's time to deploy, run <code>jus build</code> to compile your site down into plain old HTML, CSS, and Javascript files, ready for deployment to <a href=\"#deployment-to-github-pages\">GitHub Pages</a>, <a href=\"#deployment-to-surge\">Surge</a>, or any other static site host that supports clean URLs.</p>\n<h2>Getting Started</h2>\n<p>jus requires <a href=\"https://nodejs.org/en/download/\">node 4</a> or greater, because it uses some newer Javascript features. Install the command-line interface globally, then run it to see usage instructions:</p>\n<pre><code class=\"hljs\">npm i -g jus &amp;&amp; jus</code></pre><p>jus has a lot of dependencies, so it takes a while to install. Maybe go grab a :coffee: and read up\non <a href=\"https://addyosmani.com/blog/using-npm-offline/\">how to make npm faster</a>.</p>\n<p>If you like to learn by example, check out the repos of <a href=\"#sites-using-jus\">sites using jus</a>. Otherwise, read on...</p>\n<h2>Pages</h2>\n<p>Pages are written in Markdown, HTML, Handlebars, or any combination thereof. At render time each page is passed a <a href=\"#context\">Handlebars context object</a> containing metadata about all the files in the directory.</p>\n<ul>\n<li>Markdown parsing with <a href=\"http://npm.im/marky-markdown\">marky-markdown</a>, the battle-tested <a href=\"http://commonmark.org/\">commonmark</a>-compliant parser used by <a href=\"https://npmjs.com\">npmjs.com</a>.</li>\n<li>GitHub-flavored Markdown support, including <a href=\"https://help.github.com/articles/creating-and-highlighting-code-blocks/\">fenced code blocks</a></li>\n<li>Syntax Highlighting powered by <a href=\"https://atom.io\">Atom</a>'s <a href=\"npm.im/highlights\">highlights</a> package.</li>\n<li>Markdown headings (<code>H1</code>, <code>H2</code>, etc) are automatically converted to anchored hyperlinks.</li>\n<li>Emoji support. Converts :emoji:-style shortcuts to unicode emojis.</li>\n<li><a href=\"#frontmatter\">HTML frontmatter</a> as page metadata</li>\n</ul>\n<p>Extensions: <code>html|hbs|handlebars|markdown|md</code></p>\n<h2>Scripts</h2>\n<p>All javascript files in your project are automatically <a href=\"https://github.com/substack/browserify-handbook#readme\">browserified</a> and <a href=\"https://www.npmjs.com/package/babelify\">babelified</a> using the <code>es2015</code> and <code>react</code> presets.</p>\n<p>You can use node-style <code>require</code> statements to include node and npm modules in your code:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'url'</span>).parse(<span class=\"hljs-string\">'https://example.com'</span>)\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`the domain is <span class=\"hljs-subst\">${url.host}</span>`</span>)</code></pre><p>You can also use <a href=\"http://babeljs.io/docs/learn-es2015/#modules\">ES6-style imports</a>, if you prefer:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span>\n<span class=\"hljs-keyword\">import</span> domready <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'domready'</span>\n\ndomready(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// do some React magic</span>\n})</code></pre><p>Scripts are browserified using <a href=\"https://babeljs.io/docs/plugins/preset-react/\"><code>babel-preset-react</code></a>, so you\ncan write JSX in your scripts.</p>\n<p>Extensions: <code>js|jsx|es|es6</code></p>\n<h2>Stylesheets</h2>\n<p>Stylesheets can be written in\n<a href=\"http://sass-lang.com/\">Sass</a>,\n<a href=\"http://sass-lang.com/\">SCSS</a>,\n<a href=\"http://lesscss.org/\">Less</a>,\n<a href=\"http://stylus-lang.com/\">Stylus</a>,\n<a href=\"http://www.myth.io/\">Myth</a>,\nor plain old CSS. Use whatever preprocessor suits your fancy.</p>\n<p>Extensions: <code>css|less|sass|scss|styl</code></p>\n<h2>Context</h2>\n<p>When the jus server is initialized, it recursively finds all the files in the directory tree,\nignoring <code>node_modules</code>, <code>.git</code>, and other unwanted patterns. These files are then stored in\nmemory in an array called <code>files</code>. For convenience, this list of files is broken down\ninto smaller arrays by type: an array for <code>pages</code>, another array for <code>scripts</code>, etc.</p>\n<pre><code class=\"hljs\">{\n  files: [...],\n  pages: [...]\n  scripts: [...]\n  stylesheets: [...]\n  images: [...]\n  datafiles: [...]\n}</code></pre><p>When you request a page, the server renders the page on the fly, passing this object to the\ngiven page's template. This means every page has access to metadata about\nevery file in the site at render time.</p>\n<p>Using handlebars in your pages is entirely optional. If your pages don't need to do any dynamic rendering at build time, that's okay. The context will simply be ignored at render time.</p>\n<h2>Frontmatter</h2>\n<p>jus supports <a href=\"https://github.com/zeke/html-frontmatter#readme\">HTML frontmatter</a>. This allows you to add key-value metadata to your pages:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">&lt;!--\ntitle: Alice in Wonderland\nyear: 1951\n--&gt;</span></code></pre><p>Any such values present in an HTML comment at the top of a page are made available in that page's <a href=\"#context\">Handlebars context object</a> at render time.</p>\n<p>Note: Jekyll uses YAML for frontmatter, but jus uses HTML, because it can be included in a file without adversely affecting the way it renders on github.com.</p>\n<h2>Templates</h2>\n<p>Handlebars templates can be used to wrap layouts around your pages.</p>\n<ul>\n<li>If a file named <code>/layout.(html|hbs|handlebars|markdown|md)</code> is present, it will be applied to all pages by default.</li>\n<li>Templates must include a <code>{{{body}}}</code> string, to be used as a placeholder for where the main content should be rendered.</li>\n<li>Templates must have the word <code>layout</code> in their filename.</li>\n<li>Pages can specify a custom layout in their <a href=\"#frontmatter\">frontmatter</a>. Specifying <code>layout: foo</code> will refer to the <code>/layout-foo.(html|hbs|handlebars|markdown|md)</code> layout file.</li>\n<li>Pages can disable layout by setting <code>layout: false</code> in their frontmatter.</li>\n</ul>\n<p>Extensions: <code>html|hbs|handlebars|markdown|md|mdown</code></p>\n<h3>Helpers</h3>\n<p>jus provides a number of helper functions you can use in your handlebars\ntemplates. All of the helpers are from <a href=\"https://github.com/zeke/lobars\">lobars</a>,\na collection of utility functions plucked directly from\n<a href=\"https://lodash.com/\">lodash</a>.</p>\n<p>lobars includes <strong>comparison helpers</strong> like\n<a href=\"https://lodash.com/docs#endsWith\">endsWith</a>,\n<a href=\"https://lodash.com/docs#eq\">eq</a>,\n<a href=\"https://lodash.com/docs#gt\">gt</a>,\n<a href=\"https://lodash.com/docs#gte\">gte</a>,\n<a href=\"https://lodash.com/docs#includes\">includes</a>,\n<a href=\"https://lodash.com/docs#isArray\">isArray</a>,\n<a href=\"https://lodash.com/docs#isBoolean\">isBoolean</a>,\n<a href=\"https://lodash.com/docs#isDate\">isDate</a>,\n<a href=\"https://lodash.com/docs#isEmpty\">isEmpty</a>,\n<a href=\"https://lodash.com/docs#isMatch\">isMatch</a>,\n<a href=\"https://lodash.com/docs#isNumber\">isNumber</a>,\n<a href=\"https://lodash.com/docs#isString\">isString</a>,\n<a href=\"https://lodash.com/docs#isSymbol\">isSymbol</a>,\n<a href=\"https://lodash.com/docs#isUndefined\">isUndefined</a>,\n<a href=\"https://lodash.com/docs#lt\">lt</a>,\n<a href=\"https://lodash.com/docs#lte\">lte</a>,\n<a href=\"https://lodash.com/docs#startsWith\">startsWith</a> and more.</p>\n<p>Here's an example use of the <code>gte</code> (greater than or equal to) helper:</p>\n<pre><code class=\"hljs\"><span class=\"xml\">\\</span><span class=\"hljs-template-tag\">{{#<span class=\"hljs-name\">gte</span> age 21}}</span><span class=\"xml\">\n  You are old enough to drink in the United States.\n\\</span><span class=\"hljs-template-tag\">{{/<span class=\"hljs-name\">gte</span>}}</span><span class=\"xml\"></span></code></pre><p>lobars also provides helpers for manipulating input like\n<a href=\"https://lodash.com/docs#camelCase\">camelCase</a>,\n<a href=\"https://lodash.com/docs#capitalize\">capitalize</a>,\n<a href=\"https://lodash.com/docs#escape\">escape</a>,\n<a href=\"https://lodash.com/docs#kebabCase\">kebabCase</a>,\n<a href=\"https://lodash.com/docs#lowerCase\">lowerCase</a>,\n<a href=\"https://lodash.com/docs#lowerFirst\">lowerFirst</a>,\n<a href=\"https://lodash.com/docs#pad\">pad</a>,\n<a href=\"https://lodash.com/docs#padEnd\">padEnd</a>,\n<a href=\"https://lodash.com/docs#padStart\">padStart</a>,\n<a href=\"https://lodash.com/docs#parseInt\">parseInt</a>,\n<a href=\"https://lodash.com/docs#repeat\">repeat</a>,\n<a href=\"https://lodash.com/docs#replace\">replace</a>,\n<a href=\"https://lodash.com/docs#snakeCase\">snakeCase</a>,\n<a href=\"https://lodash.com/docs#split\">split</a>,\n<a href=\"https://lodash.com/docs#startCase\">startCase</a>,\n<a href=\"https://lodash.com/docs#template\">template</a>,\n<a href=\"https://lodash.com/docs#toLower\">toLower</a>,\n<a href=\"https://lodash.com/docs#toUpper\">toUpper</a>,\n<a href=\"https://lodash.com/docs#trim\">trim</a>,\n<a href=\"https://lodash.com/docs#trimEnd\">trimEnd</a>,\n<a href=\"https://lodash.com/docs#trimStart\">trimStart</a>,\n<a href=\"https://lodash.com/docs#truncate\">truncate</a>,\n<a href=\"https://lodash.com/docs#unescape\">unescape</a>,\n<a href=\"https://lodash.com/docs#upperCase\">upperCase</a>,\n<a href=\"https://lodash.com/docs#upperFirst\">upperFirst</a>,\nand more.</p>\n<p>Here's how you use the string helpers:</p>\n<pre><code class=\"hljs\"><span class=\"xml\">\\</span><span class=\"hljs-template-variable\">{{lowerCase someString}}</span><span class=\"xml\"></span></code></pre><h3>Images</h3>\n<p>Delicious metadata is extracted from images and included in the <a href=\"#context\">Handlebars context object</a>, which is accessible to every page.</p>\n<ul>\n<li>Extracts <a href=\"https://en.wikipedia.org/wiki/Exchangeable_image_file_format\">EXIF data</a> from JPEGs, including <a href=\"https://en.wikipedia.org/wiki/Exchangeable_image_file_format#Geolocation\">geolocation  data</a>.</li>\n<li>Extracts <a href=\"https://www.npmjs.com/package/image-size\">dimensions</a></li>\n<li>Extracts <a href=\"https://www.npmjs.com/package/get-image-colors\">color palettes</a></li>\n</ul>\n<p>Extensions: <code>png|jpg|gif|svg</code></p>\n<h2>Datafiles</h2>\n<p>JSON and YML files are slurped into the <a href=\"#context\">Handlebars context object</a>, which is accessible to every page.</p>\n<p>Extensions: <code>json|yaml|yml</code></p>\n<h2>Clean URLs</h2>\n<p>jus uses a clean URL strategy that is compatible with\n<a href=\"http://aseemk.github.io/gh-pages-test/\">GitHub Pages</a>\nand\n<a href=\"https://surge.sh/help/using-clean-urls-automatically\">surge.sh</a>.\nIn essence, <a href=\"#pages\">pages</a> get their extension lopped off,\nand pages named <code>index</code> inherit the name of their directory.</p>\n<p>&lt;table class=&quot;routes&quot;&gt;\n&lt;tr&gt;\n&lt;th&gt;Filename&lt;/th&gt;\n&lt;th&gt;URL&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;index.html&lt;/td&gt;\n&lt;td&gt;/&lt;/td&gt;\n&lt;/td&gt;\n&lt;tr&gt;\n&lt;td&gt;nested/index.html&lt;/td&gt;\n&lt;td&gt;/nested&lt;/td&gt;\n&lt;/td&gt;\n&lt;tr&gt;\n&lt;td&gt;nested/page.html&lt;/td&gt;\n&lt;td&gt;/nested/page&lt;/td&gt;\n&lt;/td&gt;\n&lt;tr&gt;\n&lt;td&gt;also/markdown.md&lt;/td&gt;\n&lt;td&gt;/also/markdown&lt;/td&gt;\n&lt;/td&gt;\n&lt;tr&gt;\n&lt;td&gt;also/handlebars.hbs&lt;/td&gt;\n&lt;td&gt;/also/handlebars&lt;/td&gt;\n&lt;/td&gt;\n&lt;tr&gt;\n&lt;td&gt;stylesheet.scss&lt;/td&gt;\n&lt;td&gt;/stylesheet.css&lt;/td&gt;\n&lt;/td&gt;\n&lt;tr&gt;\n&lt;td&gt;stylesheet.sass&lt;/td&gt;\n&lt;td&gt;/stylesheet.css&lt;/td&gt;\n&lt;/td&gt;\n&lt;tr&gt;\n&lt;td&gt;stylesheet.styl&lt;/td&gt;\n&lt;td&gt;/stylesheet.css&lt;/td&gt;\n&lt;/td&gt;\n&lt;tr&gt;\n&lt;td&gt;stylesheet.styl&lt;/td&gt;\n&lt;td&gt;/stylesheet.css&lt;/td&gt;\n&lt;/td&gt;\n&lt;/table&gt;</p>\n<h2>Deployment to GitHub Pages</h2>\n<p>Add the following to your package.json:</p>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"jus serve\"</span>,\n    <span class=\"hljs-attr\">\"deploy\"</span>: <span class=\"hljs-string\">\"npm run build &amp;&amp; npm run commit &amp;&amp; npm run push &amp;&amp; npm run open\"</span>,\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"jus build . dist\"</span>,\n    <span class=\"hljs-attr\">\"commit\"</span>: <span class=\"hljs-string\">\"git add dist &amp;&amp; git commit -m 'update dist'\"</span>,\n    <span class=\"hljs-attr\">\"push\"</span>: <span class=\"hljs-string\">\"git subtree push --prefix dist origin gh-pages\"</span>,\n    <span class=\"hljs-attr\">\"open\"</span>: <span class=\"hljs-string\">\"open http://zeke.sikelianos.com\"</span>\n  }\n}</code></pre><p>Now whenever you want to publish to GitHub Pages, run:</p>\n<pre><code class=\"hljs\">npm run deploy</code></pre><p>Note: GitHub's <a href=\"https://help.github.com/articles/user-organization-and-project-pages/#user--organization-pages\">User Pages</a> (like <code>yourname.github.io</code>) are built from the <code>master</code> branch,\nwhereas <a href=\"https://help.github.com/articles/user-organization-and-project-pages/#project-pages\">Project Pages</a> (like <code>yourname.github.io/project</code>) are built from the <code>gh-pages</code> branch.\nBe aware of this when setting up your npm scripts.</p>\n<p>Note: GitHub's CDN can take a minute to update, so you might have to refresh a few times when visiting.</p>\n<h2>Deployment to Surge</h2>\n<p><a href=\"https://surge.sh/\">surge.sh</a> is an awesome new platform for publishing static websites.</p>\n<p>Install the Surge CLI:</p>\n<pre><code class=\"hljs\">npm i -g surge</code></pre><p>Add the following to your package.json:</p>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"jus serve\"</span>,\n    <span class=\"hljs-attr\">\"deploy\"</span>: <span class=\"hljs-string\">\"npm run build &amp;&amp; npm run build &amp;&amp; npm run open\"</span>,\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"jus build . dist\"</span>,\n    <span class=\"hljs-attr\">\"push\"</span>: <span class=\"hljs-string\">\"surge dist YOUR-URL\"</span>,\n    <span class=\"hljs-attr\">\"open\"</span>: <span class=\"hljs-string\">\"open YOUR-URL\"</span>\n  }\n}</code></pre><p>Now whenever you want to publish to Surge, run:</p>\n<pre><code class=\"hljs\">npm run deploy</code></pre><h2>Prior Art</h2>\n<p>jus was inspired by a number of existing tools:</p>\n<ul>\n<li><a href=\"http://harpjs.com/\">Harp</a>: The main inspiration for jus. It was the first static site tool to introduce the concept of an <a href=\"http://harpjs.com/docs/development/rules\">in-place asset pipeline</a>.</li>\n<li><a href=\"http://jekyllrb.com/\">Jekyll</a>: A blog-aware static site generator in Ruby. jus borrows the concept of frontmatter from Jekyll, but uses <a href=\"https://github.com/zeke/html-frontmatter#readme\">HTML frontmatter</a>, unlike Jekyll's YAML frontmatter.</li>\n<li><a href=\"http://brunch.io/#why\">Brunch</a>: A lightweight tool for building HTML5 applications with emphasis on elegance and simplicity. The jus development server uses the <a href=\"https://www.npmjs.com/package/chokidar\">chokidar</a> module from Brunch to watch the filesystem.</li>\n<li>Ruby on Rails: The web development framework that helped popularize <a href=\"https://en.wikipedia.org/wiki/Convention_over_configuration\">Convention over Configuration</a></li>\n</ul>\n<h2>Sites using jus</h2>\n<p>Sometimes real examples are the easiest way to learn. Check out these open-source sites built with jus:</p>\n<ul>\n<li><a href=\"https://github.com/zeke/jus.js.org\">jus.js.org</a>, the site you're looking at now.</li>\n<li><a href=\"http://github.com/zeke/zeke.sikelianos.com\">zeke.sikelianos.com</a>, a personal portfolio site.</li>\n<li><a href=\"https://github.com/zeke/acrophony#readme\">acrophony</a>, an experimental React GUI for acrophonic alphabets.</li>\n</ul>\n"
  },
  {
    "title": "Kotsu",
    "repo": "LotusTM/Kotsu",
    "homepage": "https://github.com/LotusTM/Kotsu",
    "language": ["JavaScript"],
    "license": ["Apache 2.0"],
    "templates": ["Nunjucks"],
    "description": "An extremely simple, pluggable static site generator.",
    "startertemplaterepo": "LotusTM/Kotsu",
    "bodyContent": "Static site generator and opinionated advanced web starter kit. Silently powers both large and small commercial projects.\n\nWith Grunt and JSPM under the hood, it is simple, open and easy to expand.\n\nPacked with reasonable structure, HTML and CSS best practices, performance optimizations, structured data, i18n, automatic tests, Docker-based continuous deployment integration and other crucial features.",
    "bodyHtml": "<p>Static site generator and opinionated advanced web starter kit. Silently powers both large and small commercial projects.</p>\n<p>With Grunt and JSPM under the hood, it is simple, open and easy to expand.</p>\n<p>Packed with reasonable structure, HTML and CSS best practices, performance optimizations, structured data, i18n, automatic tests, Docker-based continuous deployment integration and other crucial features.</p>\n"
  },
  {
    "title": "Kulfon",
    "repo": "zaiste/kulfon",
    "homepage": "https://kulfon.net",
    "language": ["JavaScript"],
    "license": ["Apache 2.0"],
    "templates": ["Nunjucks"],
    "description": "Kulfon is a static site generator written in JavaScript and inspired by Hugo.",
    "twitter": "kulfonjs",
    "bodyContent": "Kulfon is a « one command », static site generator written entirely in JavaScript. It's fast, modern and simple.\n\n### Features\n\nThere is a ton of static site generators out there. Here are few points to\nconvince you to try **Kulfon**\n\n- one-command tool, similar to [Hugo][3], but written in [JavaScript][6], so\n  it's easier to integrate additional JavaScript libraries or stylesheets\n- Simple [npm][11] installation\n- Solid foundation with carefully selected tools to produce **smaller** websites\n  **faster** as [The Average Webpage Is Now the Size of the Original Doom][8]\n- [Rollup][7] for bundling javascripts\n- [Sass][2] for stylesheets\n- [Nunjucks][1] for views (a simple, designer friendly HTML-based syntax)\n- Written in ES6/ES2015\n- [Markdown][15] support\n- Unified approach to external dependencies management with either [unpkg][13] or [Yarn][4]\n- [HTTP/2][14] ready\n\n### Supported Pre-Processors\n\n|          | Language Superset | Whitespace Sensitive                          |\n| -------- | ----------------- | --------------------------------------------- |\n| **HTML** | [Nunjucks][1]     | [Markdown][15]                                |\n| **CSS**  | [Sass (SCSS)][2]   | [Stylus](http://learnboost.github.io/stylus/) |\n\n### Resources\n\n- **Server Documentation** - [Readme](https://github.com/zaiste/kulfon/blob/master/README.md)\n- **Source Code** - [github.com/zaiste/kulfon](https://github.com/zaiste/kulfon/)\n\n[1]: https://mozilla.github.io/nunjucks/\n[2]: http://sass-lang.com/\n[3]: https://gohugo.io/\n[4]: https://yarnpkg.com/\n[6]: https://en.wikipedia.org/wiki/JavaScript\n[7]: http://rollupjs.org/\n[8]: https://www.wired.com/2016/04/average-webpage-now-size-original-doom/\n[11]: https://www.npmjs.com/\n[13]: https://unpkg.com/#/\n[14]: https://en.wikipedia.org/wiki/HTTP/2\n[15]: https://en.wikipedia.org/wiki/Markdown",
    "bodyHtml": "<p>Kulfon is a « one command », static site generator written entirely in JavaScript. It's fast, modern and simple.</p>\n<h3>Features</h3>\n<p>There is a ton of static site generators out there. Here are few points to\nconvince you to try <strong>Kulfon</strong></p>\n<ul>\n<li>one-command tool, similar to <a href=\"https://gohugo.io/\">Hugo</a>, but written in <a href=\"https://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>, so\nit's easier to integrate additional JavaScript libraries or stylesheets</li>\n<li>Simple <a href=\"https://www.npmjs.com/\">npm</a> installation</li>\n<li>Solid foundation with carefully selected tools to produce <strong>smaller</strong> websites\n<strong>faster</strong> as <a href=\"https://www.wired.com/2016/04/average-webpage-now-size-original-doom/\">The Average Webpage Is Now the Size of the Original Doom</a></li>\n<li><a href=\"http://rollupjs.org/\">Rollup</a> for bundling javascripts</li>\n<li><a href=\"http://sass-lang.com/\">Sass</a> for stylesheets</li>\n<li><a href=\"https://mozilla.github.io/nunjucks/\">Nunjucks</a> for views (a simple, designer friendly HTML-based syntax)</li>\n<li>Written in ES6/ES2015</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a> support</li>\n<li>Unified approach to external dependencies management with either <a href=\"https://unpkg.com/#/\">unpkg</a> or <a href=\"https://yarnpkg.com/\">Yarn</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/HTTP/2\">HTTP/2</a> ready</li>\n</ul>\n<h3>Supported Pre-Processors</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Language Superset</th>\n<th>Whitespace Sensitive</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>HTML</strong></td>\n<td><a href=\"https://mozilla.github.io/nunjucks/\">Nunjucks</a></td>\n<td><a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a></td>\n</tr>\n<tr>\n<td><strong>CSS</strong></td>\n<td><a href=\"http://sass-lang.com/\">Sass (SCSS)</a></td>\n<td><a href=\"http://learnboost.github.io/stylus/\">Stylus</a></td>\n</tr>\n</tbody>\n</table>\n<h3>Resources</h3>\n<ul>\n<li><strong>Server Documentation</strong> - <a href=\"https://github.com/zaiste/kulfon/blob/master/README.md\">Readme</a></li>\n<li><strong>Source Code</strong> - <a href=\"https://github.com/zaiste/kulfon/\">github.com/zaiste/kulfon</a></li>\n</ul>\n"
  },
  {
    "title": "Lambda Pad",
    "repo": "gar1t/lambdapad",
    "homepage": "https://github.com/gar1t/lambdapad",
    "language": ["Erlang"],
    "license": ["Apache 2.0"],
    "templates": ["Django"],
    "description": "Static site generator using Erlang. Yes, Erlang.",
    "bodyContent": "Lambda Pad can be used to generate a static site. Here's the gist:\n\n- Maintain *data* in various formats\n- Maintain *templates* and related *static content*\n- Use an Erlang module to generate a static site\n\n# Why Another Tool?\n\nIt's fair to say that static site generation\n[is a solved problem](http://staticsitegenerators.net). Why would anyone want\nto created yet another static site generator when there are so many well\nestablished, robust, proven tools already?\n\nBecause the world *needs* a static site generator that embraces *functional\nthinking*. What does that mean?\n\n- Behavior should be obvious, or as obvious as possible without excessive\n  verbosity\n- Users should not be stupefied and confused by implicit or otherwise magical\n  behavior\n- Solutions should be small and focused to make them easier to understand ---\n  in general, the principle of\n  [separation of concerns](http://en.wikipedia.org/wiki/Separation_of_concerns)\n  should be evident when using the tool\n\nWhen the goodness of functional thinking is applied to static site generation,\nusers will have more fun and be more productive!\n\n# Why Erlang?\n\nErlang is a simple, easy-to-learn functional language that's incredibly\npowerful. It's known for building highly reliable, massively scalable systems\n(*shout-out to WhatsApp --- hey, what do you guys think of sponsoring a six\nweek Lambda Pad sprint in Fiji?*) but it's also terrific for tasks like site\ngeneration. Erlang [term syntax][] is low-noise and expressive. Erlang\n[functions][] are beautiful and maintainable.\n\nErlang is also [pretty dang fast][]!\n\n[term syntax]: https://github.com/gar1t/lambdapad/blob/master/docs/index.erl#L7-L12\n\n[functions]: https://github.com/gar1t/lambdapad/blob/master/docs/index.erl#L42-L43\n\n[pretty dang fast]: http://stackoverflow.com/questions/6964392/speed-comparison-with-project-euler-c-vs-python-vs-erlang-vs-haskell\n\nThe question is not so much *Why Erlang*, but *Why Not Erlang*?\n\nMost static site generators use so called \"human friendly\" languages for\nconfiguration and customization. A few of the more popular options include\nYAML, JSON, Ruby, and Python. Lambda Pad will show that Erlang --- yes,\nstraight up *Erlang* --- should be counted among the usual suspects for\nease-of-use, clarity, and productivity!",
    "bodyHtml": "<p>Lambda Pad can be used to generate a static site. Here's the gist:</p>\n<ul>\n<li>Maintain <em>data</em> in various formats</li>\n<li>Maintain <em>templates</em> and related <em>static content</em></li>\n<li>Use an Erlang module to generate a static site</li>\n</ul>\n<h1>Why Another Tool?</h1>\n<p>It's fair to say that static site generation\n<a href=\"http://staticsitegenerators.net\">is a solved problem</a>. Why would anyone want\nto created yet another static site generator when there are so many well\nestablished, robust, proven tools already?</p>\n<p>Because the world <em>needs</em> a static site generator that embraces <em>functional\nthinking</em>. What does that mean?</p>\n<ul>\n<li>Behavior should be obvious, or as obvious as possible without excessive\nverbosity</li>\n<li>Users should not be stupefied and confused by implicit or otherwise magical\nbehavior</li>\n<li>Solutions should be small and focused to make them easier to understand ---\nin general, the principle of\n<a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a>\nshould be evident when using the tool</li>\n</ul>\n<p>When the goodness of functional thinking is applied to static site generation,\nusers will have more fun and be more productive!</p>\n<h1>Why Erlang?</h1>\n<p>Erlang is a simple, easy-to-learn functional language that's incredibly\npowerful. It's known for building highly reliable, massively scalable systems\n(<em>shout-out to WhatsApp --- hey, what do you guys think of sponsoring a six\nweek Lambda Pad sprint in Fiji?</em>) but it's also terrific for tasks like site\ngeneration. Erlang <a href=\"https://github.com/gar1t/lambdapad/blob/master/docs/index.erl#L7-L12\">term syntax</a> is low-noise and expressive. Erlang\n<a href=\"https://github.com/gar1t/lambdapad/blob/master/docs/index.erl#L42-L43\">functions</a> are beautiful and maintainable.</p>\n<p>Erlang is also <a href=\"http://stackoverflow.com/questions/6964392/speed-comparison-with-project-euler-c-vs-python-vs-erlang-vs-haskell\">pretty dang fast</a>!</p>\n<p>The question is not so much <em>Why Erlang</em>, but <em>Why Not Erlang</em>?</p>\n<p>Most static site generators use so called &quot;human friendly&quot; languages for\nconfiguration and customization. A few of the more popular options include\nYAML, JSON, Ruby, and Python. Lambda Pad will show that Erlang --- yes,\nstraight up <em>Erlang</em> --- should be counted among the usual suspects for\nease-of-use, clarity, and productivity!</p>\n"
  },
  {
    "title": "Landspout",
    "repo": "gmr/landspout",
    "homepage": "https://github.com/gmr/landspout",
    "language": ["Python"],
    "license": ["BSD 3-Clause"],
    "templates": ["Tornado"],
    "description": "A simple static site generation tool",
    "bodyContent": "Landspout is a static website generation tool, using [Tornado Templates](http://www.tornadoweb.org/en/stable/). Create your template structure, and your content, and point landspout at it.\n\nLandspout has three operational modes:\n\n- **Build**: generate the static site\n- **Watch**: when working on the site, run a blocking process that watches for changes of content or templates and generates the static site\n- **Serve**: when working on the site, run a HTTP server that also watches for changes of content or templates and generates the static site\n\n## Installation\n\n```bash\npip3 install landspout\n```",
    "bodyHtml": "<p>Landspout is a static website generation tool, using <a href=\"http://www.tornadoweb.org/en/stable/\">Tornado Templates</a>. Create your template structure, and your content, and point landspout at it.</p>\n<p>Landspout has three operational modes:</p>\n<ul>\n<li><strong>Build</strong>: generate the static site</li>\n<li><strong>Watch</strong>: when working on the site, run a blocking process that watches for changes of content or templates and generates the static site</li>\n<li><strong>Serve</strong>: when working on the site, run a HTTP server that also watches for changes of content or templates and generates the static site</li>\n</ul>\n<h2>Installation</h2>\n<pre><code class=\"hljs\">pip3 install landspout</code></pre>"
  },
  {
    "title": "Last",
    "repo": "franzwilding/last",
    "homepage": "https://github.com/franzwilding/last",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig", "PHP", "Any Symfony"],
    "description": "Zero Configuration, Static Site Generator for any Symfony project.",
    "bodyContent": "Last is a minimalistic static site generator for Symfony 4 applications. Once installed, Last provides a command that will simply create requests for all of your routes and dumps the result as a static file to a dist folder.\n\n## Install\n\nJust add it to your existing symfony application and you are good to go!\n\n```sh\ncomposer require fw/last-bundle\n```\n\n## Build\n\nThats it! No configuration needed, just dump your Symfony application to ./dist\n\n```sh\nbin/console last:dump \n```\n\n## More advanced applications\n\nLast can also handle more advanced applications with dynamic routes and more \ncomplex stuff. Please see the [Github Repo](https://github.com/franzwilding/last) repo for more information.",
    "bodyHtml": "<p>Last is a minimalistic static site generator for Symfony 4 applications. Once installed, Last provides a command that will simply create requests for all of your routes and dumps the result as a static file to a dist folder.</p>\n<h2>Install</h2>\n<p>Just add it to your existing symfony application and you are good to go!</p>\n<pre><code class=\"hljs\">composer require fw/last-bundle</code></pre><h2>Build</h2>\n<p>Thats it! No configuration needed, just dump your Symfony application to ./dist</p>\n<pre><code class=\"hljs\">bin/console last:dump</code></pre><h2>More advanced applications</h2>\n<p>Last can also handle more advanced applications with dynamic routes and more\ncomplex stuff. Please see the <a href=\"https://github.com/franzwilding/last\">Github Repo</a> repo for more information.</p>\n"
  },
  {
    "title": "Lektor",
    "repo": "lektor/lektor",
    "homepage": "https://www.getlektor.com/",
    "language": ["Python"],
    "license": ["BSD 3-Clause"],
    "templates": ["Jinja2"],
    "description": "A static content management system that can deploy to any webserver.",
    "twitter": "getlektor",
    "bodyContent": "Lektor is a static content management system that runs offline, written in Python.\n\n* **Deploy Anywhere** Because Lektor builds out 100% static HTML you can deploy\n  them to any host (including S3, github pages, any web host, etc.).\n* **Cross Platform** It runs on Linux, OSX and Windows.\n* **100% File Based** All source data is well structured and can be tracked in\n  a version control system or cloud storage like Dropbox.\n* **Flat-File Database** All source data is stored in a flat-file tree database\n  and can be freely queried. The layout of that data is completely configurable.\n* **Customizable Admin** Lektor comes fully equipped with a flexible and\n  beautiful admin interface so you can edit your pages without having to touch\n  the raw sources.\n* **Dependency Tracking** The build process intelligently tracks page\n  dependencies such that it only rebuilds pages that have changed.\n* **Image Tools** Create thumbnails and give convenient access to EXIF data.\n* **Plugin System** Lektor supports loading plugins that can customize a wide\n  range of functionality.\n* **Python API** The build system is written in Python and provides a\n  documented API to extend it and integrate into other apps.\n* **Multilingual** We can speak multiple languages and allow you to easily\n  create localized websites.",
    "bodyHtml": "<p>Lektor is a static content management system that runs offline, written in Python.</p>\n<ul>\n<li><strong>Deploy Anywhere</strong> Because Lektor builds out 100% static HTML you can deploy\nthem to any host (including S3, github pages, any web host, etc.).</li>\n<li><strong>Cross Platform</strong> It runs on Linux, OSX and Windows.</li>\n<li><strong>100% File Based</strong> All source data is well structured and can be tracked in\na version control system or cloud storage like Dropbox.</li>\n<li><strong>Flat-File Database</strong> All source data is stored in a flat-file tree database\nand can be freely queried. The layout of that data is completely configurable.</li>\n<li><strong>Customizable Admin</strong> Lektor comes fully equipped with a flexible and\nbeautiful admin interface so you can edit your pages without having to touch\nthe raw sources.</li>\n<li><strong>Dependency Tracking</strong> The build process intelligently tracks page\ndependencies such that it only rebuilds pages that have changed.</li>\n<li><strong>Image Tools</strong> Create thumbnails and give convenient access to EXIF data.</li>\n<li><strong>Plugin System</strong> Lektor supports loading plugins that can customize a wide\nrange of functionality.</li>\n<li><strong>Python API</strong> The build system is written in Python and provides a\ndocumented API to extend it and integrate into other apps.</li>\n<li><strong>Multilingual</strong> We can speak multiple languages and allow you to easily\ncreate localized websites.</li>\n</ul>\n"
  },
  {
    "title": "Lerret",
    "repo": "jgrh/lerret",
    "homepage": "https://github.com/jgrh/lerret",
    "language": ["JavaScript"],
    "license": ["Apache 2.0"],
    "templates": ["Jade"],
    "description": "A static site generator for image galleries.",
    "bodyContent": "Lerret is a simple static site generator for image oriented sites, powered by [Node.js](http://nodejs.org). Whilst usable out of the box, Lerret's behaviour can be easily customised and extended through its plugin framework.\n\nLerret takes care of templating and image repurposing. Lerret doesn't come with any built in tools for generating stylesheets, minifying Javascript, or packaging and deploying your sites. Instead, it's recommended that you use your favourite tools directly to supplement what Lerret does well.",
    "bodyHtml": "<p>Lerret is a simple static site generator for image oriented sites, powered by <a href=\"http://nodejs.org\">Node.js</a>. Whilst usable out of the box, Lerret's behaviour can be easily customised and extended through its plugin framework.</p>\n<p>Lerret takes care of templating and image repurposing. Lerret doesn't come with any built in tools for generating stylesheets, minifying Javascript, or packaging and deploying your sites. Instead, it's recommended that you use your favourite tools directly to supplement what Lerret does well.</p>\n"
  },
  {
    "title": "Lingon",
    "repo": "spotify/lingon",
    "homepage": "http://www.lingon.io/",
    "language": ["JavaScript"],
    "license": ["Apache 2.0"],
    "templates": ["EJS"],
    "description": "Lingon is a performant single-page application dev tool that focuses on developer happiness.",
    "bodyContent": "Lingon is a build tool that favors convention over configuration. By employing a similar file structure across your projects you can minimize the amount of build configuration you need to write and maintain. We've borrowed this idea from middleman and Sprockets. If you already know these tools you'll feel right at home with Lingon.\n\nLingon is compatible with gulp.js plugins. It allows you to enjoy the productive workflows from Middleman while leveraging an existing community of great gulp.js plugins.",
    "bodyHtml": "<p>Lingon is a build tool that favors convention over configuration. By employing a similar file structure across your projects you can minimize the amount of build configuration you need to write and maintain. We've borrowed this idea from middleman and Sprockets. If you already know these tools you'll feel right at home with Lingon.</p>\n<p>Lingon is compatible with gulp.js plugins. It allows you to enjoy the productive workflows from Middleman while leveraging an existing community of great gulp.js plugins.</p>\n"
  },
  {
    "title": "LitePub",
    "repo": "mirovarga/litepub",
    "homepage": "https://github.com/mirovarga/litepub",
    "language": ["Go"],
    "license": ["MIT"],
    "templates": ["Go"],
    "description": "A Lightweight Static Blog Generator",
    "bodyContent": "LitePub is a static blog generator that tries to be as easy to use as possible.\n\nIt requires no software dependencies, needs no configuration files, uses no\ndatabases. All it needs is one binary, posts written in Markdown and a set\nof templates to render the posts to static HTML files.\n\nPosts don't have to include any special metadata (aka front matter) like title\nor date in them - the title, date and optional tags are parsed from\nthe natural flow of the posts.",
    "bodyHtml": "<p>LitePub is a static blog generator that tries to be as easy to use as possible.</p>\n<p>It requires no software dependencies, needs no configuration files, uses no\ndatabases. All it needs is one binary, posts written in Markdown and a set\nof templates to render the posts to static HTML files.</p>\n<p>Posts don't have to include any special metadata (aka front matter) like title\nor date in them - the title, date and optional tags are parsed from\nthe natural flow of the posts.</p>\n"
  },
  {
    "title": "Luapress",
    "repo": "Fizzadar/Luapress",
    "homepage": "http://luapress.org/",
    "language": ["Lua"],
    "license": ["MIT"],
    "templates": ["LHTML"],
    "description": "Luapress is *yet another* static blog generator, written in Lua.",
    "bodyContent": "# Luapress v1.1.0\n\nLuapress is *yet another* static blog generator, written in Lua, with posts in markdown.\n\n\n**How-To:**\n\n    #\n    # Luapress v1.1.0\n    # Usage: ./press.lua <optional url: \"http://example.com\">\n    # Example: ./press.lua\n    # Example: ./press.lua http://example.com\n    # Example: ./press.lua nocache http://example.com\n    # Example: ./press.lua clean http://example.com\n    # For more details: https://github.com/Fizzadar/Luapress\n    #",
    "bodyHtml": "<h1>Luapress v1.1.0</h1>\n<p>Luapress is <em>yet another</em> static blog generator, written in Lua, with posts in markdown.</p>\n<p><strong>How-To:</strong></p>\n<pre><code>#\n# Luapress v1.1.0\n# Usage: ./press.lua &lt;optional url: &quot;http://example.com&quot;&gt;\n# Example: ./press.lua\n# Example: ./press.lua http://example.com\n# Example: ./press.lua nocache http://example.com\n# Example: ./press.lua clean http://example.com\n# For more details: https://github.com/Fizzadar/Luapress\n#</code></pre>\n"
  },
  {
    "title": "Madoko",
    "repo": "koka-lang/madoko",
    "homepage": "https://www.madoko.net",
    "language": ["JavaScript"],
    "license": ["Apache 2.0"],
    "templates": ["HTML"],
    "description": "A fast processor for high quality academic and technical articles from Markdown and LaTeX.",
    "bodyContent": "The main design goal of Madoko is to enable light-weight creation of\nhigh-quality scholarly and industrial documents for the web and print,\nwhile maintaining John Gruber's Markdown philosophy of simplicity and\nfocus on plain text readability.\n\nWith Madoko you can write full-blown academic articles with internal references, mathematical formulas, and bibliographies completely in Markdown and LaTex to get beautiful PDF or HTML output.\n\nSupports \"including\" source files and referencing both CSS and javascript. Read the [reference manual] to learn more. An easy way to manage a large project is to split up the content and have one `index.md` including the chuncks:\n\n```md\ncss : lib/style.css\n\nscript: lib/myAweseomScriptsAndAnalytics.js\n\n[INCLUDE=\"whyWeDoIt.md\"]\n\n[INCLUDE=\"HowWeDoIt.md\"]\n\n[INCLUDE=\"WhatWeDo.md\"]\n\n```\n\nTo learn more about Madoko, check out the [reference manual]. To use it, simply:\n\n+ Install with:\n\n```sh\nnpm install madoko -g\n``` \n\n+ Translating a Markdown document to HTML is as simple as:\n\n```sh\nmadoko mydoc.mdk\n```\n\n+ To also generate a PDF file, use:\n\n```sh\nmadoko --pdf --odir=out mydoc\n```\n\n[reference manual]: http://madoko.org/reference.html",
    "bodyHtml": "<p>The main design goal of Madoko is to enable light-weight creation of\nhigh-quality scholarly and industrial documents for the web and print,\nwhile maintaining John Gruber's Markdown philosophy of simplicity and\nfocus on plain text readability.</p>\n<p>With Madoko you can write full-blown academic articles with internal references, mathematical formulas, and bibliographies completely in Markdown and LaTex to get beautiful PDF or HTML output.</p>\n<p>Supports &quot;including&quot; source files and referencing both CSS and javascript. Read the <a href=\"http://madoko.org/reference.html\">reference manual</a> to learn more. An easy way to manage a large project is to split up the content and have one <code>index.md</code> including the chuncks:</p>\n<pre><code class=\"hljs\">css : lib/style.css\n\nscript: lib/myAweseomScriptsAndAnalytics.js\n\n[INCLUDE=\"whyWeDoIt.md\"]\n\n[INCLUDE=\"HowWeDoIt.md\"]\n\n[INCLUDE=\"WhatWeDo.md\"]</code></pre><p>To learn more about Madoko, check out the <a href=\"http://madoko.org/reference.html\">reference manual</a>. To use it, simply:</p>\n<ul>\n<li>Install with:</li>\n</ul>\n<pre><code class=\"hljs\">npm install madoko -g</code></pre><ul>\n<li>Translating a Markdown document to HTML is as simple as:</li>\n</ul>\n<pre><code class=\"hljs\">madoko mydoc.mdk</code></pre><ul>\n<li>To also generate a PDF file, use:</li>\n</ul>\n<pre><code class=\"hljs\">madoko --pdf --odir=out mydoc</code></pre>"
  },
  {
    "title": "makesite.py",
    "repo": "sunainapai/makesite",
    "homepage": "https://github.com/sunainapai/makesite",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["HTML"],
    "description": "Simple, lightweight, and magic-free static site/blog generator for Python coders.",
    "bodyContent": "[makesite.py][repo] is a simple, lightweight, and magic-free static\nwebsite/blog generator written in Python for Python coders.\n\nWith [makesite.py][repo], you are in full control. There is no hidden\nmagic! There is no need to read any documentation to understand how it\nworks. There is no need to learn how to write configuration files to\nproduce some desired effect.\n\nWith [makesite.py][repo]:\n\n  - The [code][code] is the documentation.\n  - The [code][code] is the configuration.\n\nEverything is laid out as plain and simple Python code for you to read\nand enhance. It is less than 120 lines of code (excluding comments,\ndocstrings, and blank lines). It gets you off the ground pretty quickly.\nYou only need to execute `makesite.py`.\n\nYou can develop a decent website/blog within a few minutes and then you\ncan begin tinkering with the source code, the layout, and the stylesheet\nto customize the look and feel of your website to your satisfaction.\n\n[repo]: https://github.com/sunainapai/makesite\n[code]: https://github.com/sunainapai/makesite/blob/master/makesite.py",
    "bodyHtml": "<p><a href=\"https://github.com/sunainapai/makesite\">makesite.py</a> is a simple, lightweight, and magic-free static\nwebsite/blog generator written in Python for Python coders.</p>\n<p>With <a href=\"https://github.com/sunainapai/makesite\">makesite.py</a>, you are in full control. There is no hidden\nmagic! There is no need to read any documentation to understand how it\nworks. There is no need to learn how to write configuration files to\nproduce some desired effect.</p>\n<p>With <a href=\"https://github.com/sunainapai/makesite\">makesite.py</a>:</p>\n<ul>\n<li>The <a href=\"https://github.com/sunainapai/makesite/blob/master/makesite.py\">code</a> is the documentation.</li>\n<li>The <a href=\"https://github.com/sunainapai/makesite/blob/master/makesite.py\">code</a> is the configuration.</li>\n</ul>\n<p>Everything is laid out as plain and simple Python code for you to read\nand enhance. It is less than 120 lines of code (excluding comments,\ndocstrings, and blank lines). It gets you off the ground pretty quickly.\nYou only need to execute <code>makesite.py</code>.</p>\n<p>You can develop a decent website/blog within a few minutes and then you\ncan begin tinkering with the source code, the layout, and the stylesheet\nto customize the look and feel of your website to your satisfaction.</p>\n"
  },
  {
    "title": "Mangony",
    "repo": "Sebastian-Fitzner/mangony",
    "homepage": "http://mangony.veams.org/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "Yet another static site generator for Grunt, Gulp and Node.js - fast, simple and powerful.",
    "bodyContent": "![image](https://www.veams.org/downloads/logo.svg)\n\nMangony fulfills just one task: It takes handlebars templates and compiles them to an output directory.\n\n### Why Mangony?\n\n_Think of Assemble ([grunt-assemble](https://github.com/assemble/grunt-assemble)) with a smooth mango juice - yummy._\n\n1. Mangony can be used in Grunt, Gulp or standalone as npm module. It is easy to setup. \n2. By using the provided development server ([express](https://github.com/expressjs/express)) every change is completed in no time, no matter how many pages you have in your project.\n3. Only changed pages get compiled. \n4. Creation of deep ids is possible for all types. \n5. For every type (data, partials, layouts, pages) Mangony adds a watcher ([chokidar](https://github.com/paulmillr/chokidar)).\n6. [HJSON](https://github.com/laktak/hjson) is available.\n7. [Handlebars](https://github.com/wycats/handlebars.js/) version 4.x is integrated.\n8. Markdown pages with handlebars are supported.\n9. [Markdown-it](https://github.com/markdown-it/markdown-it), [markdown-it-attrs](https://github.com/arve0/markdown-it-attrs) and [markdown-it-named-headers](https://github.com/leff/markdown-it-named-headers) are available.\n10. Mangony provides many handlebars-helpers: \n - [handlebars-helpers](https://github.com/assemble/handlebars-helpers/)\n - [mangony-hbs-helpers](https://github.com/Sebastian-Fitzner/mangony-hbs-helpers)\n - [mangony-hbs-helper-wrap-with](https://github.com/Sebastian-Fitzner/mangony-hbs-helper-wrap-with)",
    "bodyHtml": "<p><img src=\"https://www.veams.org/downloads/logo.svg\" alt=\"image\"></p>\n<p>Mangony fulfills just one task: It takes handlebars templates and compiles them to an output directory.</p>\n<h3>Why Mangony?</h3>\n<p><em>Think of Assemble (<a href=\"https://github.com/assemble/grunt-assemble\">grunt-assemble</a>) with a smooth mango juice - yummy.</em></p>\n<ol>\n<li>Mangony can be used in Grunt, Gulp or standalone as npm module. It is easy to setup.</li>\n<li>By using the provided development server (<a href=\"https://github.com/expressjs/express\">express</a>) every change is completed in no time, no matter how many pages you have in your project.</li>\n<li>Only changed pages get compiled.</li>\n<li>Creation of deep ids is possible for all types.</li>\n<li>For every type (data, partials, layouts, pages) Mangony adds a watcher (<a href=\"https://github.com/paulmillr/chokidar\">chokidar</a>).</li>\n<li><a href=\"https://github.com/laktak/hjson\">HJSON</a> is available.</li>\n<li><a href=\"https://github.com/wycats/handlebars.js/\">Handlebars</a> version 4.x is integrated.</li>\n<li>Markdown pages with handlebars are supported.</li>\n<li><a href=\"https://github.com/markdown-it/markdown-it\">Markdown-it</a>, <a href=\"https://github.com/arve0/markdown-it-attrs\">markdown-it-attrs</a> and <a href=\"https://github.com/leff/markdown-it-named-headers\">markdown-it-named-headers</a> are available.</li>\n<li>Mangony provides many handlebars-helpers:</li>\n</ol>\n<ul>\n<li><a href=\"https://github.com/assemble/handlebars-helpers/\">handlebars-helpers</a></li>\n<li><a href=\"https://github.com/Sebastian-Fitzner/mangony-hbs-helpers\">mangony-hbs-helpers</a></li>\n<li><a href=\"https://github.com/Sebastian-Fitzner/mangony-hbs-helper-wrap-with\">mangony-hbs-helper-wrap-with</a></li>\n</ul>\n"
  },
  {
    "title": "markdown-styles",
    "repo": "mixu/markdown-styles",
    "homepage": "https://github.com/mixu/markdown-styles",
    "language": ["JavaScript"],
    "license": ["BSD 3-Clause"],
    "templates": ["Handlebars"],
    "description": "Markdown to static HTML generator and multiple CSS themes for Markdown",
    "bodyContent": "Converts Markdown files to HTML, with over a dozen builtin themes. \n\n## Features\n\n- Includes 15+ ready-made CSS stylesheets for Markdown, see the bottom of the readme for screenshots.\n- Reuse the stylesheets or use the `generate-md` tool to convert a folder of Markdown files to HTML using one of the built-in layouts or a custom layout.\n- Completely static output is easy to host anywhere.\n- Metadata support: Each file can include additional metadata in a header section, such as the page title and author name which can then be used in the layout.\n\n### Layout features\n\n- Built in support for code syntax highlighting via highlight.js; all layouts include a Github-style code highlighting theme by default.\n- Built in table of contents generation from Markdown headings, fully customizable by replacing the `{{> toc}}` partial in custom layout.\n- Built in header id and anchor generation for headings written in Markdown; all layouts support revealing the URL via header hover links.\n- Support for custom logic for rendering code blocks via `--highlight-*`; this can be used to implement custom blocks that render the content of the code block in some interesting way.\n- Automatically detects the document title from the first heading in the Markdown markup.\n- Create your own layout based on an existing layout via `--layout` with:\n  - Full [Handlebars](http://handlebarsjs.com/) support for layouts, helpers and partials\n  - Fully customizable table of contents template via the `toc` partial\n  - Support for relative path generation via the `{{asset 'path'}}` helper",
    "bodyHtml": "<p>Converts Markdown files to HTML, with over a dozen builtin themes.</p>\n<h2>Features</h2>\n<ul>\n<li>Includes 15+ ready-made CSS stylesheets for Markdown, see the bottom of the readme for screenshots.</li>\n<li>Reuse the stylesheets or use the <code>generate-md</code> tool to convert a folder of Markdown files to HTML using one of the built-in layouts or a custom layout.</li>\n<li>Completely static output is easy to host anywhere.</li>\n<li>Metadata support: Each file can include additional metadata in a header section, such as the page title and author name which can then be used in the layout.</li>\n</ul>\n<h3>Layout features</h3>\n<ul>\n<li>Built in support for code syntax highlighting via highlight.js; all layouts include a Github-style code highlighting theme by default.</li>\n<li>Built in table of contents generation from Markdown headings, fully customizable by replacing the <code>{{&gt; toc}}</code> partial in custom layout.</li>\n<li>Built in header id and anchor generation for headings written in Markdown; all layouts support revealing the URL via header hover links.</li>\n<li>Support for custom logic for rendering code blocks via <code>--highlight-*</code>; this can be used to implement custom blocks that render the content of the code block in some interesting way.</li>\n<li>Automatically detects the document title from the first heading in the Markdown markup.</li>\n<li>Create your own layout based on an existing layout via <code>--layout</code> with:\n<ul>\n<li>Full <a href=\"http://handlebarsjs.com/\">Handlebars</a> support for layouts, helpers and partials</li>\n<li>Fully customizable table of contents template via the <code>toc</code> partial</li>\n<li>Support for relative path generation via the <code>{{asset 'path'}}</code> helper</li>\n</ul>\n</li>\n</ul>\n"
  },
  {
    "title": "mdBook",
    "repo": "rust-lang-nursery/mdBook",
    "homepage": "https://github.com/rust-lang-nursery/mdBook",
    "language": ["Rust"],
    "license": ["Mozilla 2.0"],
    "templates": ["Handlebars"],
    "description": "GitBook alternative implemented in Rust.",
    "bodyContent": "Create book or documentation from markdown files as with GitBook.\n\nHighlights:\n\n* Handlebars templates\n* Math equations through [MathJax](https://www.mathjax.org/)\n* Can be used as a library\n* Runnable Rust code snippet using [Rust Playpen](https://github.com/rust-lang/rust-playpen)\n\nUsed by [\"The Rust Programming Language\"](https://github.com/rust-lang/book) book.",
    "bodyHtml": "<p>Create book or documentation from markdown files as with GitBook.</p>\n<p>Highlights:</p>\n<ul>\n<li>Handlebars templates</li>\n<li>Math equations through <a href=\"https://www.mathjax.org/\">MathJax</a></li>\n<li>Can be used as a library</li>\n<li>Runnable Rust code snippet using <a href=\"https://github.com/rust-lang/rust-playpen\">Rust Playpen</a></li>\n</ul>\n<p>Used by <a href=\"https://github.com/rust-lang/book\">&quot;The Rust Programming Language&quot;</a> book.</p>\n"
  },
  {
    "title": "Metabake",
    "repo": "metabake/MetaBake",
    "homepage": "https://mBake.org",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Pug", "Markdown"],
    "description": "MetaBake is the extensible open source low-code productivity tool for programmers; including dynamic apps and data binding.",
    "bodyContent": "## MetaBake is the extensible open source low-code productivity tool for programmers; including dynamic apps and data binding.\n\n#### MetaBake works via static generation; with Pug, Markdown and more; including dynamic apps and data binding. *'All. My. Friends. Know a low-coder.'*\n\nMetaBake mbake CLI lets you generate websites and dynamic webapps in Pug by leveraging low-code pillars for high development productivity.\n\n## Install\n\nEasy to install\n\n```sh\nyarn global add mbake\nmbake\n```\n\nInstall note:\n- If you get an error like 'Node Sass could not find a binding for your current environment' \nrun$: ``` yarn global upgrade ```\n\n## First Page\n\nCreate file index.pug\n```pug\nheader\nbody\n    p Hello #{key1}\n```\nand create file dat.yaml\n```yaml\nkey1: World\n```\n\n### Now make with mbake:\n\n```sh\nmbake .\n```\n\nThis will create index.html. \n\nOf course you can use regular Pug syntax to include other Pug files; or Markdown. MetaBake markdown flavor includes CSS support:\n```pug\n    include:metaMD comment.md\n```\n\n## More\n\nThere are many example apps, and shipped templates include include: an CMS module, a watcher, SPA, Blog, Website, Slides, Dashboard, CRUD, PWA, Electron, Hybrid mobile apps, server-less via AWS | GCP FireStore, RIOTjs, Ads and more. \n\n\nMetaBake supports CSS classes in Markdown, plus, because it uses Pug - it can also do any HTML layout. But MetaBake is not static only - it fully supports and has examples, shipped apps, and docs for dynamic and even mobile apps.\n\n\nPrimary focus is high development productivity (via \"low-code\") and being easy to adopt. It is also fully flexible to build any WebApp in any directory tree structure you like; anc use any CSS/SASS framework you like. Of course it is server-less, and it uses AWS S3 or GCP FireStore.\n\n\n[mBake.org](https://mBake.org)",
    "bodyHtml": "<h2>MetaBake is the extensible open source low-code productivity tool for programmers; including dynamic apps and data binding.</h2>\n<h4>MetaBake works via static generation; with Pug, Markdown and more; including dynamic apps and data binding. <em>'All. My. Friends. Know a low-coder.'</em></h4>\n<p>MetaBake mbake CLI lets you generate websites and dynamic webapps in Pug by leveraging low-code pillars for high development productivity.</p>\n<h2>Install</h2>\n<p>Easy to install</p>\n<pre><code class=\"hljs\">yarn global add mbake\nmbake</code></pre><p>Install note:</p>\n<ul>\n<li>If you get an error like 'Node Sass could not find a binding for your current environment'\nrun$: <code>yarn global upgrade</code></li>\n</ul>\n<h2>First Page</h2>\n<p>Create file index.pug</p>\n<pre><code class=\"hljs\">header\nbody\n    p Hello #{key1}</code></pre><p>and create file dat.yaml</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attr\">key1:</span> <span class=\"hljs-string\">World</span></code></pre><h3>Now make with mbake:</h3>\n<pre><code class=\"hljs\">mbake .</code></pre><p>This will create index.html.</p>\n<p>Of course you can use regular Pug syntax to include other Pug files; or Markdown. MetaBake markdown flavor includes CSS support:</p>\n<pre><code class=\"hljs\">include:metaMD comment.md</code></pre><h2>More</h2>\n<p>There are many example apps, and shipped templates include include: an CMS module, a watcher, SPA, Blog, Website, Slides, Dashboard, CRUD, PWA, Electron, Hybrid mobile apps, server-less via AWS | GCP FireStore, RIOTjs, Ads and more.</p>\n<p>MetaBake supports CSS classes in Markdown, plus, because it uses Pug - it can also do any HTML layout. But MetaBake is not static only - it fully supports and has examples, shipped apps, and docs for dynamic and even mobile apps.</p>\n<p>Primary focus is high development productivity (via &quot;low-code&quot;) and being easy to adopt. It is also fully flexible to build any WebApp in any directory tree structure you like; anc use any CSS/SASS framework you like. Of course it is server-less, and it uses AWS S3 or GCP FireStore.</p>\n<p><a href=\"https://mBake.org\">mBake.org</a></p>\n"
  },
  {
    "title": "Metalsmith",
    "repo": "segmentio/metalsmith",
    "homepage": "http://www.metalsmith.io/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars", "Any JS"],
    "description": "An extremely simple, pluggable static site generator.",
    "startertemplaterepo": "andreasvirkus/metalsmith-boilerplate",
    "bodyContent": "An extremely simple, _pluggable_ static site generator.\n\nIn Metalsmith, all of the logic is handled by plugins. You simply chain them together.\n\n### How does it work?\n\nMetalsmith works in three simple steps:\n\n  1. Read all the files in a source directory.\n  2. Invoke a series of plugins that manipulate the files.\n  3. Write the results to a destination directory!\n\nEach plugin is invoked with the contents of the source directory, and each file can contain YAML front-matter that will be attached as metadata, so a simple file like...\n\n    ---\n    title: A Catchy Title\n    date: 2014-12-01\n    ---\n\n    An informative article.\n\n  ...would be parsed into...\n\n```js\n{\n  'path/to/my-file.md': {\n    title: 'A Catchy Title',\n    date: new Date('2014-12-01'),\n    contents: new Buffer('An informative article.')\n  }\n}\n```\n\n...which any of the plugins can then manipulate however they want. And writing the plugins is incredibly simple, just take a look at the [example drafts plugin](https://github.com/segmentio/metalsmith-drafts/blob/master/lib/index.js).\n\nOf course they can get a lot more complicated too. That's what makes Metalsmith powerful; the plugins can do anything you want!\n\n### The secret...\n\nWe keep referring to Metalsmith as a \"static site generator\", but it's a lot more than that. Since everything is a plugin, the core library is actually just an abstraction for manipulating a directory of files.",
    "bodyHtml": "<p>An extremely simple, <em>pluggable</em> static site generator.</p>\n<p>In Metalsmith, all of the logic is handled by plugins. You simply chain them together.</p>\n<h3>How does it work?</h3>\n<p>Metalsmith works in three simple steps:</p>\n<ol>\n<li>Read all the files in a source directory.</li>\n<li>Invoke a series of plugins that manipulate the files.</li>\n<li>Write the results to a destination directory!</li>\n</ol>\n<p>Each plugin is invoked with the contents of the source directory, and each file can contain YAML front-matter that will be attached as metadata, so a simple file like...</p>\n<pre><code>---\ntitle: A Catchy Title\ndate: 2014-12-01\n---\n\nAn informative article.\n</code></pre>\n<p>...would be parsed into...</p>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-string\">'path/to/my-file.md'</span>: {\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'A Catchy Title'</span>,\n    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'2014-12-01'</span>),\n    <span class=\"hljs-attr\">contents</span>: <span class=\"hljs-keyword\">new</span> Buffer(<span class=\"hljs-string\">'An informative article.'</span>)\n  }\n}</code></pre><p>...which any of the plugins can then manipulate however they want. And writing the plugins is incredibly simple, just take a look at the <a href=\"https://github.com/segmentio/metalsmith-drafts/blob/master/lib/index.js\">example drafts plugin</a>.</p>\n<p>Of course they can get a lot more complicated too. That's what makes Metalsmith powerful; the plugins can do anything you want!</p>\n<h3>The secret...</h3>\n<p>We keep referring to Metalsmith as a &quot;static site generator&quot;, but it's a lot more than that. Since everything is a plugin, the core library is actually just an abstraction for manipulating a directory of files.</p>\n"
  },
  {
    "title": "Middleman",
    "repo": "middleman/middleman",
    "homepage": "http://middlemanapp.com",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["ERB", "Tilt", "Haml"],
    "description": "Hand-crafted, modern frontend development.",
    "startertemplaterepo": "wallin/middleman-template",
    "twitter": "middlemanapp",
    "bodyContent": "**Middleman** is a static site generator using all the shortcuts and tools in modern web development. Check out [middlemanapp.com](http://middlemanapp.com/) for detailed tutorials, including a [getting started guide](http://middlemanapp.com/basics/getting-started/). You can also follow [@middlemanapp](https://twitter.com/middlemanapp) for updates.\n\n### Why Middleman?\n\nThe last few years have seen an explosion in the amount and variety of tools developers can use to build web applications. Ruby on Rails selects a handful of these tools:\n\n* [Sass](http://sass-lang.com/) for DRY stylesheets\n* [CoffeeScript](http://coffeescript.org/) for safer and less verbose javascript\n* Multiple asset management solutions, including [Sprockets](https://github.com/sstephenson/sprockets)\n* [ERb](http://ruby-doc.org/stdlib-2.0.0/libdoc/erb/rdoc/ERB.html) & [Haml](http://haml.info/) for dynamic pages and simplified HTML syntax\n\n**Middleman** gives the stand-alone developer access to all these tools and many, many more. Why would you use a stand-alone framework instead of Ruby on Rails?\n\nThese days, many websites are built with an API in mind. Rather than package the frontend and the backend together, both can be built and deployed independently using the public API to pull data from the backend and display it on the frontend. Static websites are incredibly fast and require very little RAM. A front-end built to stand-alone can be deployed directly to the cloud or a CDN. Many designers and developers simply deliver static HTML/JS/CSS to their clients.",
    "bodyHtml": "<p><strong>Middleman</strong> is a static site generator using all the shortcuts and tools in modern web development. Check out <a href=\"http://middlemanapp.com/\">middlemanapp.com</a> for detailed tutorials, including a <a href=\"http://middlemanapp.com/basics/getting-started/\">getting started guide</a>. You can also follow <a href=\"https://twitter.com/middlemanapp\">@middlemanapp</a> for updates.</p>\n<h3>Why Middleman?</h3>\n<p>The last few years have seen an explosion in the amount and variety of tools developers can use to build web applications. Ruby on Rails selects a handful of these tools:</p>\n<ul>\n<li><a href=\"http://sass-lang.com/\">Sass</a> for DRY stylesheets</li>\n<li><a href=\"http://coffeescript.org/\">CoffeeScript</a> for safer and less verbose javascript</li>\n<li>Multiple asset management solutions, including <a href=\"https://github.com/sstephenson/sprockets\">Sprockets</a></li>\n<li><a href=\"http://ruby-doc.org/stdlib-2.0.0/libdoc/erb/rdoc/ERB.html\">ERb</a> &amp; <a href=\"http://haml.info/\">Haml</a> for dynamic pages and simplified HTML syntax</li>\n</ul>\n<p><strong>Middleman</strong> gives the stand-alone developer access to all these tools and many, many more. Why would you use a stand-alone framework instead of Ruby on Rails?</p>\n<p>These days, many websites are built with an API in mind. Rather than package the frontend and the backend together, both can be built and deployed independently using the public API to pull data from the backend and display it on the frontend. Static websites are incredibly fast and require very little RAM. A front-end built to stand-alone can be deployed directly to the cloud or a CDN. Many designers and developers simply deliver static HTML/JS/CSS to their clients.</p>\n"
  },
  {
    "title": "Mimogear",
    "repo": "mimoduo/mimogear",
    "homepage": "http://mimoduo.github.io/mimogear/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Pug"],
    "description": "A super simple static site generator and web development boilerplate.",
    "bodyContent": "**Mimogear** is a complete web development boilerplate for developing static sites. By pairing with **gulp**, a powerful node based task runner, Mimogear automatically compiles a responsive **sass** skeleton boilerplate, renders a **pug** template boilerplate, concatenates & uglifies an optional javascript module bundle, and begins watching assets for changes. Newcomers and professionals alike will feel right at home with a solid start for any static site!\n\n### Philosophy\n\nIn the heart of Mimogear lies **simplicity**, **speed**, and **flexibility**. This foundation builds on the constant thought and revision of markup, styles, and modules that hold true to most use cases without blasting through the learning curve roof. As a result, Mimogear serves as a reliable base for front end web development.",
    "bodyHtml": "<p><strong>Mimogear</strong> is a complete web development boilerplate for developing static sites. By pairing with <strong>gulp</strong>, a powerful node based task runner, Mimogear automatically compiles a responsive <strong>sass</strong> skeleton boilerplate, renders a <strong>pug</strong> template boilerplate, concatenates &amp; uglifies an optional javascript module bundle, and begins watching assets for changes. Newcomers and professionals alike will feel right at home with a solid start for any static site!</p>\n<h3>Philosophy</h3>\n<p>In the heart of Mimogear lies <strong>simplicity</strong>, <strong>speed</strong>, and <strong>flexibility</strong>. This foundation builds on the constant thought and revision of markup, styles, and modules that hold true to most use cases without blasting through the learning curve roof. As a result, Mimogear serves as a reliable base for front end web development.</p>\n"
  },
  {
    "title": "Minerl",
    "repo": "neevek/minerl",
    "homepage": "https://github.com/neevek/minerl",
    "language": ["Perl"],
    "license": ["Artistic 2.0"],
    "templates": ["HTML::Template"],
    "description": "Minerl is a blog-aware static site generator written in Perl.",
    "bodyContent": "Minerl is a blog-aware static site generator written in Perl, it supports tagging, automatic archiving, post, page and layout inheritance.\n\n### Minerl\n\nVisit [https://github.com/neevek/minerl](https://github.com/neevek/minerl) for more details.",
    "bodyHtml": "<p>Minerl is a blog-aware static site generator written in Perl, it supports tagging, automatic archiving, post, page and layout inheritance.</p>\n<h3>Minerl</h3>\n<p>Visit <a href=\"https://github.com/neevek/minerl\">https://github.com/neevek/minerl</a> for more details.</p>\n"
  },
  {
    "title": "Mini Site Generator",
    "repo": "ijmccallum/Mini-Site-Generator",
    "homepage": "https://ijmccallum.github.io/Mini-Site-Generator/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["JavaScript"],
    "description": "It's just javascript!",
    "startertemplaterepo": "ijmccallum/msg-starter",
    "bodyContent": "MSG is used in the food industry as a flavor enhancer with an umami taste that intensifies the meaty, savory flavor of - jkjkjk! I kid. It's literally just JavaScript.\n\n## High level:\n\n____.page.js ->  ____.html\n\n## Low level:\n\n```js\n//Inside ___.page.js\nmodule.exports = function(){\n    return html`\n        <p>I'm honestly not kidding,<br />\n        It's just JavaScript!</p>\n    `\n}\n```",
    "bodyHtml": "<p>MSG is used in the food industry as a flavor enhancer with an umami taste that intensifies the meaty, savory flavor of - jkjkjk! I kid. It's literally just JavaScript.</p>\n<h2>High level:</h2>\n<p>____.page.js -&gt;  ____.html</p>\n<h2>Low level:</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">//Inside ___.page.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> html<span class=\"hljs-string\">`\n        &lt;p&gt;I'm honestly not kidding,&lt;br /&gt;\n        It's just JavaScript!&lt;/p&gt;\n    `</span>\n}</code></pre>"
  },
  {
    "title": "Minimal",
    "repo": "lutzroeder/Minimal",
    "homepage": "https://github.com/lutzroeder/Minimal",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Mustache"],
    "description": "A fast personal website and blog generator for Go, Node.js and Python without external dependencies.",
    "bodyContent": "Minimal is a personal static website and blog generator for Go, Node.js and Python. \n\nIt has no external dependencies and requires only a few hundred lines of code to run.\n\nEverything is minimal, easy to take appart and rewrite.",
    "bodyHtml": "<p>Minimal is a personal static website and blog generator for Go, Node.js and Python.</p>\n<p>It has no external dependencies and requires only a few hundred lines of code to run.</p>\n<p>Everything is minimal, easy to take appart and rewrite.</p>\n"
  },
  {
    "title": "Misaki",
    "repo": "liquidz/misaki",
    "homepage": "http://liquidz.github.io/misaki/",
    "language": ["Clojure"],
    "license": ["EPL 1.0"],
    "templates": ["Hiccup"],
    "description": "A Jekyll inspired static site generator in Clojure.",
    "bodyContent": "misaki is a [Jekyll](https://github.com/mojombo/jekyll) inspired static site generator in Clojure.\n\n### What's new in Beta\n\n * Clojurescript\n * Output customize\n * Viewable with smartphone\n * Expand built-in functions\n\n### Demo\n\n * [Blog demo](http://liquidz.github.com/misaki/demo/blog/)\n * [Presentation demo](http://liquidz.github.com/misaki/demo/presentation/)",
    "bodyHtml": "<p>misaki is a <a href=\"https://github.com/mojombo/jekyll\">Jekyll</a> inspired static site generator in Clojure.</p>\n<h3>What's new in Beta</h3>\n<ul>\n<li>Clojurescript</li>\n<li>Output customize</li>\n<li>Viewable with smartphone</li>\n<li>Expand built-in functions</li>\n</ul>\n<h3>Demo</h3>\n<ul>\n<li><a href=\"http://liquidz.github.com/misaki/demo/blog/\">Blog demo</a></li>\n<li><a href=\"http://liquidz.github.com/misaki/demo/presentation/\">Presentation demo</a></li>\n</ul>\n"
  },
  {
    "title": "MkDocs",
    "repo": "mkdocs/mkdocs",
    "homepage": "http://www.mkdocs.org/",
    "language": ["Python"],
    "license": ["BSD 3-Clause"],
    "templates": ["Jinja2"],
    "description": "Project documentation with Markdown.",
    "startertemplaterepo": "netlify-templates/mkdocs-base",
    "twitter": "MkDocsProject",
    "bodyContent": "MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.\n\n*   Host anywhere.\n\n    Builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose.\n\n*   Great themes available.\n\n    There's a stack of good looking themes included by default. Choose from bootstrap, readthedocs, ghostwriter, or any of the 12 bootswatch themes.\n\n*   Preview your site as you work.\n\n    The built-in devserver allows you to preview your documentation as your writing it. It will even auto-reload whenever you save any changes, so all you need to do to see your latest edits is refresh your browser.\n\n*   Easy to customize.\n\n    Get your project documentation looking just the way you want it by customizing the theme.\n\n*   Cross-reference your documentation.\n\n    Create richly cross-referenced documents, using the MkDocs interlinking syntax.",
    "bodyHtml": "<p>MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p>\n<ul>\n<li>\n<p>Host anywhere.</p>\n<p>Builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose.</p>\n</li>\n<li>\n<p>Great themes available.</p>\n<p>There's a stack of good looking themes included by default. Choose from bootstrap, readthedocs, ghostwriter, or any of the 12 bootswatch themes.</p>\n</li>\n<li>\n<p>Preview your site as you work.</p>\n<p>The built-in devserver allows you to preview your documentation as your writing it. It will even auto-reload whenever you save any changes, so all you need to do to see your latest edits is refresh your browser.</p>\n</li>\n<li>\n<p>Easy to customize.</p>\n<p>Get your project documentation looking just the way you want it by customizing the theme.</p>\n</li>\n<li>\n<p>Cross-reference your documentation.</p>\n<p>Create richly cross-referenced documents, using the MkDocs interlinking syntax.</p>\n</li>\n</ul>\n"
  },
  {
    "title": "Monkeyman",
    "repo": "wspringer/monkeyman",
    "homepage": "https://github.com/wspringer/monkeyman",
    "language": ["Scala"],
    "license": ["GNU GPL v2.0"],
    "templates": ["Haml"],
    "description": "Simple static site generator for Scala and middleman lovers",
    "bodyContent": "Monkeyman is a Scala static web site generator, similar to\nMiddleman. At this stage, it doesn't even come close to the features\nMiddleman has to offer, but it has one major advantage for Scala\nprogrammers: it's written in Scala.\n\nMonkeyman was created out of unease with the existing blogging\nsolutions. I know, that sounds weird, because there's an abundance of\nBlogging solutions out there, and this certainly isn't the first\nstatic web site generator. However, this tool would not have been\ncreated if there _would_ have been a solution that supports:\n\n* Layouts in HAML (or in this case, SCAML)\n* Content pages in Markdown\n* Nice permalinks\n* Offline editing and preview\n* Scala extensions\n\nIf ever such a solution arrives, then there is a chance Monkeyman will\nno longer be maintained.\n\n### Features\n\n* Jade, HAML (SCAML), Mustache, SSP for layouts\n* LESS and ZUSS to CSS transformation\n* Live preview (web server running on port 4567)\n* Live updates (monitoring file system changes)\n* Static web site generation\n* Content management through tags",
    "bodyHtml": "<p>Monkeyman is a Scala static web site generator, similar to\nMiddleman. At this stage, it doesn't even come close to the features\nMiddleman has to offer, but it has one major advantage for Scala\nprogrammers: it's written in Scala.</p>\n<p>Monkeyman was created out of unease with the existing blogging\nsolutions. I know, that sounds weird, because there's an abundance of\nBlogging solutions out there, and this certainly isn't the first\nstatic web site generator. However, this tool would not have been\ncreated if there <em>would</em> have been a solution that supports:</p>\n<ul>\n<li>Layouts in HAML (or in this case, SCAML)</li>\n<li>Content pages in Markdown</li>\n<li>Nice permalinks</li>\n<li>Offline editing and preview</li>\n<li>Scala extensions</li>\n</ul>\n<p>If ever such a solution arrives, then there is a chance Monkeyman will\nno longer be maintained.</p>\n<h3>Features</h3>\n<ul>\n<li>Jade, HAML (SCAML), Mustache, SSP for layouts</li>\n<li>LESS and ZUSS to CSS transformation</li>\n<li>Live preview (web server running on port 4567)</li>\n<li>Live updates (monitoring file system changes)</li>\n<li>Static web site generation</li>\n<li>Content management through tags</li>\n</ul>\n"
  },
  {
    "title": "Motyl",
    "repo": "fcambus/motyl",
    "homepage": "https://github.com/fcambus/motyl",
    "language": ["Ruby"],
    "license": ["BSD 2-Clause"],
    "templates": ["Mustache"],
    "description": "Opinionated static site generator written in Lua.",
    "bodyContent": "Motyl is an opinionated blog-aware static site generator written in Ruby.\n\nIt uses Mustache as templating system, and all content is written in Markdown.\n\n## Features\n\n- Small and easy to understand codebase\n- Minimal dependencies (only three gems)\n- Pages and posts written in Markdown\n- Templates are logic-less and use Mustache\n- Support for multiple categories per post\n- Syntax highlighting (using Rouge)\n- Customizable URLs (constructed from filename)\n- Atom feed generator",
    "bodyHtml": "<p>Motyl is an opinionated blog-aware static site generator written in Ruby.</p>\n<p>It uses Mustache as templating system, and all content is written in Markdown.</p>\n<h2>Features</h2>\n<ul>\n<li>Small and easy to understand codebase</li>\n<li>Minimal dependencies (only three gems)</li>\n<li>Pages and posts written in Markdown</li>\n<li>Templates are logic-less and use Mustache</li>\n<li>Support for multiple categories per post</li>\n<li>Syntax highlighting (using Rouge)</li>\n<li>Customizable URLs (constructed from filename)</li>\n<li>Atom feed generator</li>\n</ul>\n"
  },
  {
    "title": "Muleify",
    "repo": "AlexanderElias/muleify",
    "homepage": "https://github.com/AlexanderElias/muleify",
    "language": ["JavaScript"],
    "license": ["Mozilla 2.0"],
    "templates": ["Custom"],
    "description": "A zero configuration static site generator and asset preprocessor compiler.",
    "bodyContent": "**Static Site Generator | Website Bundler | Asset Compiler | HTML Templates | Preprocessor**\n\n## Overview ##\nMuleify is the one stop shop for your web front end needs, it is a command line tool that handles all your website development needs. Muleify has a unique no configuration required interface. It automatically handles many tasks such as compiling Sass, Scss, Less, Css, ES6 to ES5, bundling, and minifying. Muleify uses extensions and sub-extensions to automatically handle these tasks. With almost zero configuration or changes to existing projects you can get started.\n\n## Features ##\nAnother static asset generator you might say.\n- quick and easy\n- no learning curve\n- zero configuration\n- based on extensions and sub-extensions\n- imports, includes, partials, and layouts",
    "bodyHtml": "<p><strong>Static Site Generator | Website Bundler | Asset Compiler | HTML Templates | Preprocessor</strong></p>\n<h2>Overview</h2>\n<p>Muleify is the one stop shop for your web front end needs, it is a command line tool that handles all your website development needs. Muleify has a unique no configuration required interface. It automatically handles many tasks such as compiling Sass, Scss, Less, Css, ES6 to ES5, bundling, and minifying. Muleify uses extensions and sub-extensions to automatically handle these tasks. With almost zero configuration or changes to existing projects you can get started.</p>\n<h2>Features</h2>\n<p>Another static asset generator you might say.</p>\n<ul>\n<li>quick and easy</li>\n<li>no learning curve</li>\n<li>zero configuration</li>\n<li>based on extensions and sub-extensions</li>\n<li>imports, includes, partials, and layouts</li>\n</ul>\n"
  },
  {
    "title": "Nanoc",
    "repo": "nanoc/nanoc",
    "homepage": "http://nanoc.ws/",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["eRuby"],
    "description": "Simple but very flexible static site generator",
    "bodyContent": "nanoc is a flexible static site generator written in Ruby. See the [nanoc web site](http://nanoc.ws) for more information.\n\n### Contributing\n\nContributions are greatly appreciated! Consult the [Development guidelines](http://nanoc.ws/development/) for information on how you can contribute.\n\n### Contributors\n\nMany thanks to everyone who has contributed to nanoc in one way or another:\n\nAle Muñoz, Alexander Mankuta, Arnau Siches, Ben Armston, Bil Bas, Brian Candler, Bruno Dufour, Chris Eppstein, Christian Plessl, Colin Barrett, Damien Pollet, Dan Callahan, Daniel Hofstetter, Daniel Mendler, Daniel Wollschlaeger, David Everitt, Dennis Sutch, Devon Luke Buchanan, Dmitry Bilunov, Eric Sunshine, Erik Hollensbe, Fabian Buch, Felix Hanley, Go Maeda, Gregory Pakosz, Grégory Karékinian, Guilherme Garnier, Jack Chu, Jake Benilov, Jasper Van der Jeugt, Jeff Forcier, John Nishinaga, Justin Clift, Justin Hileman, Kevin Lynagh, Louis T., Mathias Bynens, Matt Keveney, Matthew Frazier, Matthias Beyer, Matthias Reitinger, Matthias Vallentin, Michal Cichra, Nelson Chen, Nicky Peeters, Nikhil Marathe, Oliver Byford, Peter Aronoff, Raphael von der Grün, Remko Tronçon, Riley Goodside, Ruben Verborgh, Scott Vokes, Simon South, Spencer Whitt, Stanley Rost, Starr Horne, Stefan Bühler, Stuart Montgomery, Takashi Uchibe, Toon Willems, Tuomas Kareinen, Ursula Kallio, Vincent Driessen, Xavier Shay, Zaiste de Grengolada, Šime Ramov",
    "bodyHtml": "<p>nanoc is a flexible static site generator written in Ruby. See the <a href=\"http://nanoc.ws\">nanoc web site</a> for more information.</p>\n<h3>Contributing</h3>\n<p>Contributions are greatly appreciated! Consult the <a href=\"http://nanoc.ws/development/\">Development guidelines</a> for information on how you can contribute.</p>\n<h3>Contributors</h3>\n<p>Many thanks to everyone who has contributed to nanoc in one way or another:</p>\n<p>Ale Muñoz, Alexander Mankuta, Arnau Siches, Ben Armston, Bil Bas, Brian Candler, Bruno Dufour, Chris Eppstein, Christian Plessl, Colin Barrett, Damien Pollet, Dan Callahan, Daniel Hofstetter, Daniel Mendler, Daniel Wollschlaeger, David Everitt, Dennis Sutch, Devon Luke Buchanan, Dmitry Bilunov, Eric Sunshine, Erik Hollensbe, Fabian Buch, Felix Hanley, Go Maeda, Gregory Pakosz, Grégory Karékinian, Guilherme Garnier, Jack Chu, Jake Benilov, Jasper Van der Jeugt, Jeff Forcier, John Nishinaga, Justin Clift, Justin Hileman, Kevin Lynagh, Louis T., Mathias Bynens, Matt Keveney, Matthew Frazier, Matthias Beyer, Matthias Reitinger, Matthias Vallentin, Michal Cichra, Nelson Chen, Nicky Peeters, Nikhil Marathe, Oliver Byford, Peter Aronoff, Raphael von der Grün, Remko Tronçon, Riley Goodside, Ruben Verborgh, Scott Vokes, Simon South, Spencer Whitt, Stanley Rost, Starr Horne, Stefan Bühler, Stuart Montgomery, Takashi Uchibe, Toon Willems, Tuomas Kareinen, Ursula Kallio, Vincent Driessen, Xavier Shay, Zaiste de Grengolada, Šime Ramov</p>\n"
  },
  {
    "title": "Nanogen",
    "repo": "doug2k1/nanogen",
    "homepage": "https://doug2k1.github.io/nanogen/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["EJS"],
    "description": "A minimalist static site generator in Node.js.",
    "startertemplaterepo": "doug2k1/nanogen-template",
    "bodyContent": "Minimalist static site generator written in Node.js.\n\n## Features\n\n* EJS, Markdown (with front matter) and HTML templates\n* Multiple layouts\n* Reusable partials\n* Store settings in JSON files\n* \"init\" command to create a new site",
    "bodyHtml": "<p>Minimalist static site generator written in Node.js.</p>\n<h2>Features</h2>\n<ul>\n<li>EJS, Markdown (with front matter) and HTML templates</li>\n<li>Multiple layouts</li>\n<li>Reusable partials</li>\n<li>Store settings in JSON files</li>\n<li>&quot;init&quot; command to create a new site</li>\n</ul>\n"
  },
  {
    "title": "Next",
    "repo": "zeit/next.js",
    "homepage": "https://learnnextjs.com/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["JavaScript"],
    "description": "A framework for statically-exported React apps",
    "bodyContent": "Next.js is a minimalistic framework for server-rendered React applications.\n\n## Install\n\nIt's easy to install\n\n```sh\nnpm install --save next react react-dom\n```\n\n## Build\n\nAdd a build script\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n## Run\n\nAfter that, the file-system is the main API. Every `.js` file becomes a route that gets automatically processed and rendered.\n\n## Example\n\nCreating a website only takes a minute.\n[Examples](https://github.com/zeit/next.js/tree/canary/examples)",
    "bodyHtml": "<p>Next.js is a minimalistic framework for server-rendered React applications.</p>\n<h2>Install</h2>\n<p>It's easy to install</p>\n<pre><code class=\"hljs\">npm install --save next react react-dom</code></pre><h2>Build</h2>\n<p>Add a build script</p>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"dev\"</span>: <span class=\"hljs-string\">\"next\"</span>,\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"next build\"</span>,\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"next start\"</span>\n  }\n}</code></pre><h2>Run</h2>\n<p>After that, the file-system is the main API. Every <code>.js</code> file becomes a route that gets automatically processed and rendered.</p>\n<h2>Example</h2>\n<p>Creating a website only takes a minute.\n<a href=\"https://github.com/zeit/next.js/tree/canary/examples\">Examples</a></p>\n"
  },
  {
    "title": "Nikola",
    "repo": "getnikola/nikola",
    "homepage": "http://www.getnikola.com",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2", "Mako"],
    "twitter": "GetNikola",
    "description": "A static website and blog generator",
    "bodyContent": "Nikola is a Static Site and Blog Generator\n\nIn goes content, out comes a website, ready to deploy.\n\n### What Can Nikola Do?\n\nIt has many features, but here are some of the nicer ones:\n\n* Blogs, with tags, feeds, archives, comments, etc.\n* Themable\n* Fast builds, thanks to doit\n* Flexible, extensible via plugins\n* Small codebase (programmers can understand all of Nikola core in a day)\n* reStructuredText [Cheatsheet] or Markdown as input language (also Wiki, BBCode, Textile, AsciiDoc, Python Notebooks, Misaka, Pandoc, txt2tags, orgmode, and HTML)\n* Easy image galleries (just drop files in a folder!)\n* Syntax highlighting for almost any programming language or markup\n* Multilingual sites, translated to 18 languages.\n* Doesn't reinvent wheels, leverages existing tools.\n* Python 2 and 3 compatible.",
    "bodyHtml": "<p>Nikola is a Static Site and Blog Generator</p>\n<p>In goes content, out comes a website, ready to deploy.</p>\n<h3>What Can Nikola Do?</h3>\n<p>It has many features, but here are some of the nicer ones:</p>\n<ul>\n<li>Blogs, with tags, feeds, archives, comments, etc.</li>\n<li>Themable</li>\n<li>Fast builds, thanks to doit</li>\n<li>Flexible, extensible via plugins</li>\n<li>Small codebase (programmers can understand all of Nikola core in a day)</li>\n<li>reStructuredText [Cheatsheet] or Markdown as input language (also Wiki, BBCode, Textile, AsciiDoc, Python Notebooks, Misaka, Pandoc, txt2tags, orgmode, and HTML)</li>\n<li>Easy image galleries (just drop files in a folder!)</li>\n<li>Syntax highlighting for almost any programming language or markup</li>\n<li>Multilingual sites, translated to 18 languages.</li>\n<li>Doesn't reinvent wheels, leverages existing tools.</li>\n<li>Python 2 and 3 compatible.</li>\n</ul>\n"
  },
  {
    "title": "Nuxt",
    "repo": "nuxt/nuxt.js",
    "homepage": "https://nuxtjs.org/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Vue"],
    "description": "A minimalistic framework for serverless Vue.js applications.",
    "startertemplaterepo": "martinx3/nuxt-starter",
    "twitter": "nuxt_js",
    "bodyContent": "An easy way to export your Vue.js Web Application into a static website.\n\n## Easy to use\n\nWrite your content in [Vue](https://github.com/vuejs/vue) files only.\nNo configuration is needed, just write your Application with Vue.js components.\n\n## Customisable\n\nIf you want to write you content in markdown files, its super easy with the [vue markdown filter](https://vuejs.org/v2/examples/)\n\nYou can extend your Application, Blog or Website with some packages on the [NPM ecosystem](http://npmjs.org/).\n\nNuxt will help you generate and deploy a Vue.js Web Application faster than before.\n\n## Static and dynamic\n\n[Vue SSR](https://vuejs.org/v2/guide/ssr.html) is used to generate pages for both client and server;\nIt's called Isomorphic/ Universal rendering.\n\nThen you can run `nuxt generate` to generate your static website into a ./dist forlder and deploy it everywhere:\nNetlify, Githup pages, Gitlab, AWS3, etc.\n\n## Setup a project in a minute\n\nCreating a website based on Nuxt only takes a minute.\n[Quick introduction of Nuxt : 1 minute](http://nuxtjs.org/examples)",
    "bodyHtml": "<p>An easy way to export your Vue.js Web Application into a static website.</p>\n<h2>Easy to use</h2>\n<p>Write your content in <a href=\"https://github.com/vuejs/vue\">Vue</a> files only.\nNo configuration is needed, just write your Application with Vue.js components.</p>\n<h2>Customisable</h2>\n<p>If you want to write you content in markdown files, its super easy with the <a href=\"https://vuejs.org/v2/examples/\">vue markdown filter</a></p>\n<p>You can extend your Application, Blog or Website with some packages on the <a href=\"http://npmjs.org/\">NPM ecosystem</a>.</p>\n<p>Nuxt will help you generate and deploy a Vue.js Web Application faster than before.</p>\n<h2>Static and dynamic</h2>\n<p><a href=\"https://vuejs.org/v2/guide/ssr.html\">Vue SSR</a> is used to generate pages for both client and server;\nIt's called Isomorphic/ Universal rendering.</p>\n<p>Then you can run <code>nuxt generate</code> to generate your static website into a ./dist forlder and deploy it everywhere:\nNetlify, Githup pages, Gitlab, AWS3, etc.</p>\n<h2>Setup a project in a minute</h2>\n<p>Creating a website based on Nuxt only takes a minute.\n<a href=\"http://nuxtjs.org/examples\">Quick introduction of Nuxt : 1 minute</a></p>\n"
  },
  {
    "title": "Obelisk",
    "repo": "BennyHallett/obelisk",
    "homepage": "https://github.com/BennyHallett/obelisk",
    "language": ["Elixir"],
    "license": ["MIT"],
    "templates": ["EEx", "Haml"],
    "description": "Static Site Generator written in Elixir.",
    "bodyContent": "Obelisk is a static site generator written in [Elixir Programming Language](http://elixir-lang.org).\n#### Goals\n* **Fast**. Static websites can take a long time to generate when they start to grow large. obelisk should take advantage of Elixir's processes to increase this speed.\n* **Simple, Obvious.** It should be very straight forward to add new content and modify the way that your site works.\n* **Templatable.** It should be possible to store templates in github repos and reference them directly, allowing modification of the look and feel of a site instantaneously with no manual installation.",
    "bodyHtml": "<p>Obelisk is a static site generator written in <a href=\"http://elixir-lang.org\">Elixir Programming Language</a>.</p>\n<h4>Goals</h4>\n<ul>\n<li><strong>Fast</strong>. Static websites can take a long time to generate when they start to grow large. obelisk should take advantage of Elixir's processes to increase this speed.</li>\n<li><strong>Simple, Obvious.</strong> It should be very straight forward to add new content and modify the way that your site works.</li>\n<li><strong>Templatable.</strong> It should be possible to store templates in github repos and reference them directly, allowing modification of the look and feel of a site instantaneously with no manual installation.</li>\n</ul>\n"
  },
  {
    "title": "Octopress",
    "repo": "octopress/octopress",
    "homepage": "http://octopress.org",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Liquid"],
    "description": "A blogging framework for hackers based on Jekyll.",
    "twitter": "octopress",
    "bodyContent": "Octopress is Jekyll blogging at its finest.\n\n* Octopress sports a clean responsive theme written in semantic HTML5, focused on readability and friendliness toward mobile devices.\n* Code blogging is easy and beautiful. Embed code (with Solarized styling) in your posts from gists, jsFiddle or from your filesystem.\n* Third party integration is simple with built-in support for Pinboard, Delicious, GitHub Repositories, Disqus Comments and Google Analytics.\n* It's easy to use. A collection of rake tasks simplifies development and makes deploying a cinch.\n* Ships with great plug-ins some original and others from the Jekyll community — tested and improved.",
    "bodyHtml": "<p>Octopress is Jekyll blogging at its finest.</p>\n<ul>\n<li>Octopress sports a clean responsive theme written in semantic HTML5, focused on readability and friendliness toward mobile devices.</li>\n<li>Code blogging is easy and beautiful. Embed code (with Solarized styling) in your posts from gists, jsFiddle or from your filesystem.</li>\n<li>Third party integration is simple with built-in support for Pinboard, Delicious, GitHub Repositories, Disqus Comments and Google Analytics.</li>\n<li>It's easy to use. A collection of rake tasks simplifies development and makes deploying a cinch.</li>\n<li>Ships with great plug-ins some original and others from the Jekyll community — tested and improved.</li>\n</ul>\n"
  },
  {
    "title": "onessg",
    "repo": "RyanZim/onessg",
    "homepage": "https://github.com/RyanZim/onessg",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Any JS"],
    "description": "The Static Site Generator that does only one thing: compile your html and markdown.",
    "bodyContent": "onessg (One Static Site Generator) is the Static Site Generator that does only one thing: compile your html and markdown. It won't minify your JS, concat your CSS, or optimize your images. Why? You most likely already have a favorite tool for doing that.\n\n> The Javascript pendulum has swung from restrictive, monolithic frameworks to modular, boilerplate-hindered libraries.\n>\n>-- [@ericclemmons](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.7xcwmnave)\n\nonessg changes that. We believe in the unix philosophy: do one thing and do it well.\n\nWe also believe in setting useful, but overridable defaults. Because of this, onessg requires no configuration files to get started.",
    "bodyHtml": "<p>onessg (One Static Site Generator) is the Static Site Generator that does only one thing: compile your html and markdown. It won't minify your JS, concat your CSS, or optimize your images. Why? You most likely already have a favorite tool for doing that.</p>\n<blockquote>\n<p>The Javascript pendulum has swung from restrictive, monolithic frameworks to modular, boilerplate-hindered libraries.</p>\n<p>-- <a href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.7xcwmnave\">@ericclemmons</a></p>\n</blockquote>\n<p>onessg changes that. We believe in the unix philosophy: do one thing and do it well.</p>\n<p>We also believe in setting useful, but overridable defaults. Because of this, onessg requires no configuration files to get started.</p>\n"
  },
  {
    "title": "Orchid",
    "repo": "JavaEden/Orchid",
    "homepage": "https://orchid.netlify.com",
    "language": ["Java", "Kotlin"],
    "license": ["GNU LGPL v3.0"],
    "templates": ["Pebble"],
    "description": "A beautiful and truly unique documentation engine and static site generator.",
    "startertemplaterepo": "JavaEden/OrchidStarter",
    "twitter": "OrchidSSG",
    "bodyContent": "Orchid is a general-purpose static site generator with a focus on extensibility, and aimed at developers looking to improve their technical documentation. Orchid was born out of a desire for better-looking Javadocs and frustration with how difficult is it to manage large Jekyll sites and keep it up-to-date with your code.\n\nOrchid supports a variety of plugins, including a wiki, static pages, blogs, and much more. It aims to have high compatibility with many of the existing static site generators, such as Jekyll, Gitbook, and Hugo, so that migration to Orchid is painless. And if you can't find a plugin to do what you need, Orchid provides an intuitive way to add your own private plugins and a rich API so you can make your site as beautiful and unique as an Orchid.\n\nFeatures\n\n- Plugin-driven Architecture\n- Multi-theme support\n- Admin interface to manage your content and gain deep insights into your build\n- Link to other Orchid sites\n- Powerful and flexible indexing, unique to Orchid\n- Fully replaces Jekyll, Gitbook, Javadocs, and more!",
    "bodyHtml": "<p>Orchid is a general-purpose static site generator with a focus on extensibility, and aimed at developers looking to improve their technical documentation. Orchid was born out of a desire for better-looking Javadocs and frustration with how difficult is it to manage large Jekyll sites and keep it up-to-date with your code.</p>\n<p>Orchid supports a variety of plugins, including a wiki, static pages, blogs, and much more. It aims to have high compatibility with many of the existing static site generators, such as Jekyll, Gitbook, and Hugo, so that migration to Orchid is painless. And if you can't find a plugin to do what you need, Orchid provides an intuitive way to add your own private plugins and a rich API so you can make your site as beautiful and unique as an Orchid.</p>\n<p>Features</p>\n<ul>\n<li>Plugin-driven Architecture</li>\n<li>Multi-theme support</li>\n<li>Admin interface to manage your content and gain deep insights into your build</li>\n<li>Link to other Orchid sites</li>\n<li>Powerful and flexible indexing, unique to Orchid</li>\n<li>Fully replaces Jekyll, Gitbook, Javadocs, and more!</li>\n</ul>\n"
  },
  {
    "title": "Ornate",
    "repo": "szeiger/ornate",
    "homepage": "https://szeiger.github.io/ornate-doc/",
    "language": ["Scala"],
    "license": ["Apache 2.0"],
    "templates": [],
    "description": "Ornate is a tool for building multi-page HTML sites from Markdown sources.",
    "bodyContent": "*Ornate* is a tool for building multi-page HTML sites from Markdown sources. The design goals are:\n\n- Runs on the JVM; No installation required: Resolve the versioned dependencies in your build process for reproducible documentation builds with no external dependencies.\n- Based on CommonMark, a standardized version of Markdown.\n- Use well-established extensions: In particular, many developers are already familiar with Github-flavored Markdown.\n- Graceful degradation: Some features require proprietary syntax extensions. They should degrade gracefully when processed with a pure CommonMark engine.\n- Configuration based on Typesafe Config.\n- Modular design: Themes, templates, highlighters, extensions - everything can be customized with Scala code.\n- Clean, modern default theme using responsive design for a good user experience on all device from mobile phones to desktop PCs.\n\nDocumentation can be found at http://szeiger.github.io/ornate-doc/",
    "bodyHtml": "<p><em>Ornate</em> is a tool for building multi-page HTML sites from Markdown sources. The design goals are:</p>\n<ul>\n<li>Runs on the JVM; No installation required: Resolve the versioned dependencies in your build process for reproducible documentation builds with no external dependencies.</li>\n<li>Based on CommonMark, a standardized version of Markdown.</li>\n<li>Use well-established extensions: In particular, many developers are already familiar with Github-flavored Markdown.</li>\n<li>Graceful degradation: Some features require proprietary syntax extensions. They should degrade gracefully when processed with a pure CommonMark engine.</li>\n<li>Configuration based on Typesafe Config.</li>\n<li>Modular design: Themes, templates, highlighters, extensions - everything can be customized with Scala code.</li>\n<li>Clean, modern default theme using responsive design for a good user experience on all device from mobile phones to desktop PCs.</li>\n</ul>\n<p>Documentation can be found at http://szeiger.github.io/ornate-doc/</p>\n"
  },
  {
    "title": "Pagegen",
    "repo": "oliverfields/pagegen_v2",
    "homepage": "http://pagegen.phnd.net",
    "language": ["Python"],
    "license": ["GNU GPL v3.0"],
    "templates": ["Pagegen"],
    "description": "Manage sites and blogs, SEO friendly.",
    "bodyContent": "Pagegen aims to provide a basic configurable foundation for a site. Basically add content and CSS styling and you should be good to go.\n\nExtensions are available via hooks for pre or post processing. Page content is either static reStructuredText or may be reStructuredText output from executable at generation time (any language).\n\nCore Pagegen includes blog aware features, a complete hierarchical site menu and web friendly URL's. RSS feed and sitemap also available.\n\nOnly requirement is Python, installation via .deb available.",
    "bodyHtml": "<p>Pagegen aims to provide a basic configurable foundation for a site. Basically add content and CSS styling and you should be good to go.</p>\n<p>Extensions are available via hooks for pre or post processing. Page content is either static reStructuredText or may be reStructuredText output from executable at generation time (any language).</p>\n<p>Core Pagegen includes blog aware features, a complete hierarchical site menu and web friendly URL's. RSS feed and sitemap also available.</p>\n<p>Only requirement is Python, installation via .deb available.</p>\n"
  },
  {
    "title": "Pelican",
    "repo": "getpelican/pelican",
    "homepage": "http://blog.getpelican.com/",
    "language": ["Python"],
    "license": ["AGPL v3.0"],
    "templates": ["Jinja2"],
    "description": "A static site generator, imports from Wordpress, multi-lang publishing.",
    "twitter": "getpelican",
    "bodyContent": "Pelican is a static site generator, written in Python.\n\n* Write your weblog entries directly with your editor of choice (vim!) in reStructuredText or Markdown\n* Includes a simple CLI tool to (re)generate the weblog\n* Easy to interface with DVCSes and web hooks\n* Completely static output is easy to host anywhere\n\n### Features\n\nPelican currently supports:\n\n* Blog articles and pages\n* Comments, via an external service (Disqus). (Please note that while useful, Disqus is an external service, and thus the comment data will be somewhat outside of your control and potentially subject to data loss.)\n* Theming support (themes are created using Jinja2 templates)\n* PDF generation of the articles/pages (optional)\n* Publication of articles in multiple languages\n* Atom/RSS feeds\n* Code syntax highlighting\n* Import from WordPress, Dotclear, or RSS feeds\n* Integration with external tools: Twitter, Google Analytics, etc. (optional)\n* Fast rebuild times thanks to content caching and selective output writing.\n\n### Why the name \"Pelican\"?\n\n\"Pelican\" is an anagram for calepin, which means \"notebook\" in French. ;)",
    "bodyHtml": "<p>Pelican is a static site generator, written in Python.</p>\n<ul>\n<li>Write your weblog entries directly with your editor of choice (vim!) in reStructuredText or Markdown</li>\n<li>Includes a simple CLI tool to (re)generate the weblog</li>\n<li>Easy to interface with DVCSes and web hooks</li>\n<li>Completely static output is easy to host anywhere</li>\n</ul>\n<h3>Features</h3>\n<p>Pelican currently supports:</p>\n<ul>\n<li>Blog articles and pages</li>\n<li>Comments, via an external service (Disqus). (Please note that while useful, Disqus is an external service, and thus the comment data will be somewhat outside of your control and potentially subject to data loss.)</li>\n<li>Theming support (themes are created using Jinja2 templates)</li>\n<li>PDF generation of the articles/pages (optional)</li>\n<li>Publication of articles in multiple languages</li>\n<li>Atom/RSS feeds</li>\n<li>Code syntax highlighting</li>\n<li>Import from WordPress, Dotclear, or RSS feeds</li>\n<li>Integration with external tools: Twitter, Google Analytics, etc. (optional)</li>\n<li>Fast rebuild times thanks to content caching and selective output writing.</li>\n</ul>\n<h3>Why the name &quot;Pelican&quot;?</h3>\n<p>&quot;Pelican&quot; is an anagram for calepin, which means &quot;notebook&quot; in French. ;)</p>\n"
  },
  {
    "title": "Perun",
    "repo": "hashobject/perun",
    "homepage": "https://perun.io/",
    "language": ["Clojure"],
    "license": ["EPL 1.0"],
    "templates": ["Hiccup"],
    "description": "Composable static site generator build with Clojure and Boot",
    "bodyContent": "Simple, composable static site generator inspired by [Boot](http://boot-clj.com/) task model and [Metalsmith](http://www.metalsmith.io/). \nPerun is a collection of Boot tasks/plugins that you can chain together and build something custom that suits your needs.\n\n## Plugins system\n\nEverything in Perun is build like independent task. The simplest blog engine will look like:\n\n```clojure\n(deftask build\n  \"Build blog.\"\n  []\n  (comp (markdown)\n        (render :renderer renderer)))\n\n```\n\nBut if you want to make permalinks, generate sitemap and rss feed, hide unfinished posts, add time to read to each post then you will do:\n\n```clojure\n(deftask build\n  \"Build blog.\"\n  []\n  (comp (markdown)\n        (draft)\n        (ttr)\n        (slug)\n        (permalink)\n        (render :renderer renderer)\n        (sitemap :filename \"sitemap.xml\")\n        (rss :title \"Hashobject\" :description \"Hashobject blog\" :link \"http://blog.hashobject.com\")\n        (atom-feed :title \"Hashobject\" :subtitle \"Hashobject blog\" :link \"http://blog.hashobject.com\")\n        (notify)))\n```\n\n## 3d-party plugins\n\nThere are plenty of Boot plugins that can be useful in the when you are using perun:\n\n - [boot-http](https://github.com/pandeiro/boot-http) - serve generated site locally using web server\n - [boot-gzip](https://github.com/martinklepsch/boot-gzip) - gzip files\n - [boot-s3](https://github.com/hashobject/boot-s3) - sync generated site to the Amazon S3\n - [boot-less](https://github.com/Deraen/boot-less) - task to compile Less to CSS\n - [boot-sassc](https://github.com/mathias/boot-sassc) - task to compile Sass to CSS\n - [boot-garden](https://github.com/martinklepsch/boot-garden) - task to compile Garden stylesheets to CSS\n - [boot-autoprefixer](https://github.com/danielsz/boot-autoprefixer) - add vendor prefixes to your CSS\n - [boot-reload](https://github.com/adzerk-oss/boot-reload) - live-reload of browser css, images, etc.",
    "bodyHtml": "<p>Simple, composable static site generator inspired by <a href=\"http://boot-clj.com/\">Boot</a> task model and <a href=\"http://www.metalsmith.io/\">Metalsmith</a>.\nPerun is a collection of Boot tasks/plugins that you can chain together and build something custom that suits your needs.</p>\n<h2>Plugins system</h2>\n<p>Everything in Perun is build like independent task. The simplest blog engine will look like:</p>\n<pre><code class=\"hljs\">(<span class=\"hljs-name\">deftask</span> build\n  <span class=\"hljs-string\">\"Build blog.\"</span>\n  []\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">comp</span></span> (<span class=\"hljs-name\">markdown</span>)\n        (<span class=\"hljs-name\">render</span> <span class=\"hljs-symbol\">:renderer</span> renderer)))</code></pre><p>But if you want to make permalinks, generate sitemap and rss feed, hide unfinished posts, add time to read to each post then you will do:</p>\n<pre><code class=\"hljs\">(<span class=\"hljs-name\">deftask</span> build\n  <span class=\"hljs-string\">\"Build blog.\"</span>\n  []\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">comp</span></span> (<span class=\"hljs-name\">markdown</span>)\n        (<span class=\"hljs-name\">draft</span>)\n        (<span class=\"hljs-name\">ttr</span>)\n        (<span class=\"hljs-name\">slug</span>)\n        (<span class=\"hljs-name\">permalink</span>)\n        (<span class=\"hljs-name\">render</span> <span class=\"hljs-symbol\">:renderer</span> renderer)\n        (<span class=\"hljs-name\">sitemap</span> <span class=\"hljs-symbol\">:filename</span> <span class=\"hljs-string\">\"sitemap.xml\"</span>)\n        (<span class=\"hljs-name\">rss</span> <span class=\"hljs-symbol\">:title</span> <span class=\"hljs-string\">\"Hashobject\"</span> <span class=\"hljs-symbol\">:description</span> <span class=\"hljs-string\">\"Hashobject blog\"</span> <span class=\"hljs-symbol\">:link</span> <span class=\"hljs-string\">\"http://blog.hashobject.com\"</span>)\n        (<span class=\"hljs-name\">atom-feed</span> <span class=\"hljs-symbol\">:title</span> <span class=\"hljs-string\">\"Hashobject\"</span> <span class=\"hljs-symbol\">:subtitle</span> <span class=\"hljs-string\">\"Hashobject blog\"</span> <span class=\"hljs-symbol\">:link</span> <span class=\"hljs-string\">\"http://blog.hashobject.com\"</span>)\n        (<span class=\"hljs-name\">notify</span>)))</code></pre><h2>3d-party plugins</h2>\n<p>There are plenty of Boot plugins that can be useful in the when you are using perun:</p>\n<ul>\n<li><a href=\"https://github.com/pandeiro/boot-http\">boot-http</a> - serve generated site locally using web server</li>\n<li><a href=\"https://github.com/martinklepsch/boot-gzip\">boot-gzip</a> - gzip files</li>\n<li><a href=\"https://github.com/hashobject/boot-s3\">boot-s3</a> - sync generated site to the Amazon S3</li>\n<li><a href=\"https://github.com/Deraen/boot-less\">boot-less</a> - task to compile Less to CSS</li>\n<li><a href=\"https://github.com/mathias/boot-sassc\">boot-sassc</a> - task to compile Sass to CSS</li>\n<li><a href=\"https://github.com/martinklepsch/boot-garden\">boot-garden</a> - task to compile Garden stylesheets to CSS</li>\n<li><a href=\"https://github.com/danielsz/boot-autoprefixer\">boot-autoprefixer</a> - add vendor prefixes to your CSS</li>\n<li><a href=\"https://github.com/adzerk-oss/boot-reload\">boot-reload</a> - live-reload of browser css, images, etc.</li>\n</ul>\n"
  },
  {
    "title": "PFT",
    "repo": "dacav/App-PFT",
    "homepage": "http://dacav.roundhousecode.com/pages/pft.html",
    "language": ["Perl"],
    "license": ["GNU GPL v3.0"],
    "templates": ["TT3"],
    "description": "PFT is a Static, Unicode-ready, Hacker-friendly, Free-as-in-freedom, Privacy-preserving website generator written in Perl.",
    "bodyContent": "PFT It is yet another _Static_, _Unicode-ready_, _Hacker-friendly_,\n_Free-as-in-freedom_, _Privacy-preserving_ website generator written in\nPerl.\n\n`PFT` stands for *Plain F. Text*, where the meaning of *F.* is up to\npersonal interpretation. Like *Fancy* or *Fantastic*.\n\nI started it from scratch because as I was not entirely satisfied with the\nsimilar products I tried, but also because I wanted to learn another\nlanguage (Perl) with a side project. I got initially inspired by\n[Dapper][], which is similar in the spirit, but maybe a bit *too raw*,\neven for my needs.\n\n## Unicode-ready\n\nWhile writing PFT I also learned how how to handle Unicode. As a result,\nPFT can seamlessly handle your UTF-8 text, with ☺ emoticons and\nsimilar 💩.\n\n## Hacker Friendly\n\nPFT is designed to be Hacker Friendly: it's a command-line application\nwhich handles your website's boilerplate, hides you nothing, but stays out\nof the way.\n\nIt is designed as a toolkit, and comes with a number of commands:\n\n* `pft init`: Initialize a PFT site in the current directory;\n\n* `pft edit`: Create a content text (e.g. page or blog entry);\n\n* `pft make`: Build the website;\n\n* `pft pub`: Publish the website;\n\n* `pft clean`: Clear built tree;\n\n* `pft grab`: Grab a file as attachment or picture;\n\n* `pft ls`: List content and properties;\n\n* `pft show`: Show the compiled site in a web browser;\n\nThe manual of each sub-command is available in form of Unix Manual page,\nand by invoking it with the `--help` flag.\n\nContent pages are simple locale-encoded [Markdown][] text-files wrapped\nwith a [YAML][] header.  Everything is transformed into HTML thanks to the\n[Template::Alloy][Alloy] engine. \n\n## Free as in Freedom\n\nPFT is [Free as in Freedom][Free] and licensed as [GNU GPL v3][GPL3].\nContributions and suggestions are welcome.\n\nPFT is also Free as in Free Beer. Which means you can *offer me a beer* if\nyou feel like doing it.\n\n## Privacy preserving:\n\nBy default, PFT comes with some simple templates, which do not rely on\nclient-side scripts, cookies or trackers. This means a PFT site respects\nyour privacy by default.\n\n(Of course nothing prevents you from modifying it and provide something\nmore fancy, or even serve it with cookies. As you would do for tea,\nreally.)\n\n# Running PFT\n\nPFT is released as *CPAN* distribution named [App::PFT][]. If CPAN is\ninstalled on your system you can simply install PFT by running the\nfollowing command:\n\n    cpan App::PFT\n\n## Requirements\n\nThe output of PFT is a directory containing a set of inter-connected HTML\npages. The pages are linked by relative links, so the whole output site is\nrelocatable. It can optionally be loaded online and served through any web\nserver.\n\nCurrently only [RSync][] over [SSH][] is supported for uploading content\non websites, RSync must be therefore installed on your source system, and\nyour hosting provider should support [SSH][].\n\n# Hacking\n\nPFT is currently composed by:\n\n- A Perl library named [PFT][github_pft] which abstracts the filesystem\n  access\n\n- A toolkit of Perl scripts named [App::PFT][github_app_pft] which\n  provides a command-line interface to the _PFT_ structure.\n\nFeel free to fork or to ping me with suggestion, proposals or pull\nrequests.\n\n[App::PFT]: https://metacpan.org/release/App-PFT\n[Static]: https://www.staticgen.com/\n[Free]: https://en.wikipedia.org/wiki/Free_software_movement\n[GPL3]: https://www.gnu.org/licenses/gpl.html\n[Dapper]: https://www.staticgen.com/dapper\n[Alloy]: https://metacpan.org/pod/Template::Alloy\n[Markdown]: https://daringfireball.net/projects/markdown/\n[YAML]: http://yaml.org/\n[RSync]: https://rsync.samba.org/\n[SSH]: http://www.openssh.com/\n[CPAN]: http://cpan.org/\n[github_pft]: https://github.com/dacav/pft\n[github_app_pft]: https://github.com/dacav/app-pft",
    "bodyHtml": "<p>PFT It is yet another <em>Static</em>, <em>Unicode-ready</em>, <em>Hacker-friendly</em>,\n<em>Free-as-in-freedom</em>, <em>Privacy-preserving</em> website generator written in\nPerl.</p>\n<p><code>PFT</code> stands for <em>Plain F. Text</em>, where the meaning of <em>F.</em> is up to\npersonal interpretation. Like <em>Fancy</em> or <em>Fantastic</em>.</p>\n<p>I started it from scratch because as I was not entirely satisfied with the\nsimilar products I tried, but also because I wanted to learn another\nlanguage (Perl) with a side project. I got initially inspired by\n<a href=\"https://www.staticgen.com/dapper\">Dapper</a>, which is similar in the spirit, but maybe a bit <em>too raw</em>,\neven for my needs.</p>\n<h2>Unicode-ready</h2>\n<p>While writing PFT I also learned how how to handle Unicode. As a result,\nPFT can seamlessly handle your UTF-8 text, with ☺ emoticons and\nsimilar 💩.</p>\n<h2>Hacker Friendly</h2>\n<p>PFT is designed to be Hacker Friendly: it's a command-line application\nwhich handles your website's boilerplate, hides you nothing, but stays out\nof the way.</p>\n<p>It is designed as a toolkit, and comes with a number of commands:</p>\n<ul>\n<li>\n<p><code>pft init</code>: Initialize a PFT site in the current directory;</p>\n</li>\n<li>\n<p><code>pft edit</code>: Create a content text (e.g. page or blog entry);</p>\n</li>\n<li>\n<p><code>pft make</code>: Build the website;</p>\n</li>\n<li>\n<p><code>pft pub</code>: Publish the website;</p>\n</li>\n<li>\n<p><code>pft clean</code>: Clear built tree;</p>\n</li>\n<li>\n<p><code>pft grab</code>: Grab a file as attachment or picture;</p>\n</li>\n<li>\n<p><code>pft ls</code>: List content and properties;</p>\n</li>\n<li>\n<p><code>pft show</code>: Show the compiled site in a web browser;</p>\n</li>\n</ul>\n<p>The manual of each sub-command is available in form of Unix Manual page,\nand by invoking it with the <code>--help</code> flag.</p>\n<p>Content pages are simple locale-encoded <a href=\"https://daringfireball.net/projects/markdown/\">Markdown</a> text-files wrapped\nwith a <a href=\"http://yaml.org/\">YAML</a> header.  Everything is transformed into HTML thanks to the\n<a href=\"https://metacpan.org/pod/Template::Alloy\">Template::Alloy</a> engine.</p>\n<h2>Free as in Freedom</h2>\n<p>PFT is <a href=\"https://en.wikipedia.org/wiki/Free_software_movement\">Free as in Freedom</a> and licensed as <a href=\"https://www.gnu.org/licenses/gpl.html\">GNU GPL v3</a>.\nContributions and suggestions are welcome.</p>\n<p>PFT is also Free as in Free Beer. Which means you can <em>offer me a beer</em> if\nyou feel like doing it.</p>\n<h2>Privacy preserving:</h2>\n<p>By default, PFT comes with some simple templates, which do not rely on\nclient-side scripts, cookies or trackers. This means a PFT site respects\nyour privacy by default.</p>\n<p>(Of course nothing prevents you from modifying it and provide something\nmore fancy, or even serve it with cookies. As you would do for tea,\nreally.)</p>\n<h1>Running PFT</h1>\n<p>PFT is released as <em>CPAN</em> distribution named <a href=\"https://metacpan.org/release/App-PFT\">App::PFT</a>. If CPAN is\ninstalled on your system you can simply install PFT by running the\nfollowing command:</p>\n<pre><code>cpan App::PFT\n</code></pre>\n<h2>Requirements</h2>\n<p>The output of PFT is a directory containing a set of inter-connected HTML\npages. The pages are linked by relative links, so the whole output site is\nrelocatable. It can optionally be loaded online and served through any web\nserver.</p>\n<p>Currently only <a href=\"https://rsync.samba.org/\">RSync</a> over <a href=\"http://www.openssh.com/\">SSH</a> is supported for uploading content\non websites, RSync must be therefore installed on your source system, and\nyour hosting provider should support <a href=\"http://www.openssh.com/\">SSH</a>.</p>\n<h1>Hacking</h1>\n<p>PFT is currently composed by:</p>\n<ul>\n<li>\n<p>A Perl library named <a href=\"https://github.com/dacav/pft\">PFT</a> which abstracts the filesystem\naccess</p>\n</li>\n<li>\n<p>A toolkit of Perl scripts named <a href=\"https://github.com/dacav/app-pft\">App::PFT</a> which\nprovides a command-line interface to the <em>PFT</em> structure.</p>\n</li>\n</ul>\n<p>Feel free to fork or to ping me with suggestion, proposals or pull\nrequests.</p>\n"
  },
  {
    "title": "Phenomic",
    "repo": "phenomic/phenomic",
    "homepage": "https://phenomic.io",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["React"],
    "description": "A modern static website generator to create dynamic website using React components.",
    "startertemplaterepo": "capriosa/phenomic-cms",
    "twitter": "Phenomic_app",
    "bodyContent": "> Modern static website generator for creating dynamic websites using React\ncomponents.\n\n## Easy to use\n\nWrite your content in [Markdown](https://en.wikipedia.org/wiki/Markdown) files.\nImplement your design with JavaScript files, using [React](http://facebook.github.io/react/).\n\n**No template language to learn. Just JavaScript** (and JSX if you like it).\n\nYou can just grab some packages on the [NPM ecosystem](http://npmjs.org/)\nto help you build your website, blog or even a small app.\n\n_Phenomic_ will help you generate and deploy a website in a heartbeat.\n\n## Static and dynamic\n\n[React](http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome)\nis used to generate pages for both client and server; it's called ~~Isomorphic~~\n[Universal rendering](https://medium.com/@mjackson/universal-javascript-4761051b7ae9).\n\nA pre-rendered, *static* version of your website is generated first; then when\na user browses your website, **they can get the same UX as an app by grabbing\nthe minimal amount of data for each new page**\n(a single file that only contains your page data).\n\n## Setup a website in a flash\n\nCreating a website based on Phenomic only takes a minute.\n[Why not give it a try?](https://phenomic.io/docs/setup/)\n\n## Awesome DX (Developer Experience)\n\nDuring development, enjoy the benefit of hot loading with visual errors in your\nlayout! That means you won't have to refresh your page during development when\nyou edit your website. You will also see compilation & runtime errors.\n\n### Choose your Phenomic flavor\n\n_Phenomic_ is easily customizable; choose your own Markdown engine\n(with your own plugins), your own CSS preprocessor etc, thanks to the\nflexibility of Webpack and its loaders.",
    "bodyHtml": "<blockquote>\n<p>Modern static website generator for creating dynamic websites using React\ncomponents.</p>\n</blockquote>\n<h2>Easy to use</h2>\n<p>Write your content in <a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a> files.\nImplement your design with JavaScript files, using <a href=\"http://facebook.github.io/react/\">React</a>.</p>\n<p><strong>No template language to learn. Just JavaScript</strong> (and JSX if you like it).</p>\n<p>You can just grab some packages on the <a href=\"http://npmjs.org/\">NPM ecosystem</a>\nto help you build your website, blog or even a small app.</p>\n<p><em>Phenomic</em> will help you generate and deploy a website in a heartbeat.</p>\n<h2>Static and dynamic</h2>\n<p><a href=\"http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome\">React</a>\nis used to generate pages for both client and server; it's called <s>Isomorphic</s>\n<a href=\"https://medium.com/@mjackson/universal-javascript-4761051b7ae9\">Universal rendering</a>.</p>\n<p>A pre-rendered, <em>static</em> version of your website is generated first; then when\na user browses your website, <strong>they can get the same UX as an app by grabbing\nthe minimal amount of data for each new page</strong>\n(a single file that only contains your page data).</p>\n<h2>Setup a website in a flash</h2>\n<p>Creating a website based on Phenomic only takes a minute.\n<a href=\"https://phenomic.io/docs/setup/\">Why not give it a try?</a></p>\n<h2>Awesome DX (Developer Experience)</h2>\n<p>During development, enjoy the benefit of hot loading with visual errors in your\nlayout! That means you won't have to refresh your page during development when\nyou edit your website. You will also see compilation &amp; runtime errors.</p>\n<h3>Choose your Phenomic flavor</h3>\n<p><em>Phenomic</em> is easily customizable; choose your own Markdown engine\n(with your own plugins), your own CSS preprocessor etc, thanks to the\nflexibility of Webpack and its loaders.</p>\n"
  },
  {
    "title": "Photish",
    "repo": "henrylawson/photish",
    "homepage": "https://github.com/henrylawson/photish",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Slim"],
    "description": "Fast, simple, configurable photo portfolio website generator.",
    "bodyContent": "Photish is a simple, convention based (but configurable) static photo site generator. Photish allows you to group your photo collections by folder. Metadata can be written alongside the photo in a [YAML](http://yaml.org/) file with the same name as the photo.\n\nPhotish will crawl through your directory of photos and metadata, and render the information in your website templates. Photish supports all template engines implemented by [Tilt](https://github.com/rtomayko/tilt) (currently over 30 formats). It will also read your configuration and automatically convert your images to your configured size, dimensions, colourscheme, etc using [ImageMagick](http://www.imagemagick.org/script/index.php). Using this information, Photish creates a complete static website that can be hosted on an [NGINX](http://nginx.org/), [Apache HTTP Server](https://httpd.apache.org/), or even on [Github Pages](https://pages.github.com/).\n\nPhotish has been created with speed and efficiency in mind. Threads are used to parallelize image transcoding to achieve maximum utilization of your CPU during generation. A cache file is then used to ensure that unless the image has changed, it is not needlessly regenerated. This results in a responsive and fast local development environment, making it easy to perfect the design of your photo based website without having to wait for regeneration.",
    "bodyHtml": "<p>Photish is a simple, convention based (but configurable) static photo site generator. Photish allows you to group your photo collections by folder. Metadata can be written alongside the photo in a <a href=\"http://yaml.org/\">YAML</a> file with the same name as the photo.</p>\n<p>Photish will crawl through your directory of photos and metadata, and render the information in your website templates. Photish supports all template engines implemented by <a href=\"https://github.com/rtomayko/tilt\">Tilt</a> (currently over 30 formats). It will also read your configuration and automatically convert your images to your configured size, dimensions, colourscheme, etc using <a href=\"http://www.imagemagick.org/script/index.php\">ImageMagick</a>. Using this information, Photish creates a complete static website that can be hosted on an <a href=\"http://nginx.org/\">NGINX</a>, <a href=\"https://httpd.apache.org/\">Apache HTTP Server</a>, or even on <a href=\"https://pages.github.com/\">Github Pages</a>.</p>\n<p>Photish has been created with speed and efficiency in mind. Threads are used to parallelize image transcoding to achieve maximum utilization of your CPU during generation. A cache file is then used to ensure that unless the image has changed, it is not needlessly regenerated. This results in a responsive and fast local development environment, making it easy to perfect the design of your photo based website without having to wait for regeneration.</p>\n"
  },
  {
    "title": "Cecil",
    "repo": "Cecilapp/Cecil",
    "homepage": "https://cecil.app",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig"],
    "description": "Your content driven static site generator.",
    "startertemplaterepo": "Cecilapp/starter-blog",
    "twitter": "Cecil_Static",
    "bodyContent": "Cecil is a CLI application that merges plain text files (written in [Markdown](http://daringfireball.net/projects/markdown/)), images and [Twig](http://twig.sensiolabs.org/) templates to generate a [static website](https://en.wikipedia.org/wiki/Static_web_page).\n\n- [Documentation](https://cecil.app/documentation)\n- [Issue tracker](https://github.com/Cecilapp/Cecil/issues)",
    "bodyHtml": "<p>Cecil is a CLI application that merges plain text files (written in <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>), images and <a href=\"http://twig.sensiolabs.org/\">Twig</a> templates to generate a <a href=\"https://en.wikipedia.org/wiki/Static_web_page\">static website</a>.</p>\n<ul>\n<li><a href=\"https://cecil.app/documentation\">Documentation</a></li>\n<li><a href=\"https://github.com/Cecilapp/Cecil/issues\">Issue tracker</a></li>\n</ul>\n"
  },
  {
    "title": "PieCrust2",
    "repo": "ludovicchabant/PieCrust2",
    "homepage": "http://bolt80.com/piecrust",
    "language": ["Python"],
    "license": ["Apache 2.0"],
    "templates": ["Jinja"],
    "description": "PieCrust is a static website generator and flat-file CMS",
    "bodyContent": "PieCrust is a static website generator and flat-file CMS. No complex setup,\ndatabases, or administrative panels  its all text files. Simple, beautiful,\nand yummy.\n\nPieCrust makes creating and maintaining a website as easy as pie:\n\n- Simple filling: it’s all just text files!\n- Store in the cellar: your whole website fits nicely in a revision control\n  system.\n- Bake and serve: generate a completely static website that will run with\n  minimum resources for maximum scalability.\n- Taste while you cook: preview your website instantly during authoring.\n\nPieCrust uses all the ingredients you already like:\n\n- Markdown and Textile for formatting.\n- Jinja for writing layouts and re-usable bits of markup.\n- Less, Sass and Compass for your CSS needs.",
    "bodyHtml": "<p>PieCrust is a static website generator and flat-file CMS. No complex setup,\ndatabases, or administrative panels  its all text files. Simple, beautiful,\nand yummy.</p>\n<p>PieCrust makes creating and maintaining a website as easy as pie:</p>\n<ul>\n<li>Simple filling: it’s all just text files!</li>\n<li>Store in the cellar: your whole website fits nicely in a revision control\nsystem.</li>\n<li>Bake and serve: generate a completely static website that will run with\nminimum resources for maximum scalability.</li>\n<li>Taste while you cook: preview your website instantly during authoring.</li>\n</ul>\n<p>PieCrust uses all the ingredients you already like:</p>\n<ul>\n<li>Markdown and Textile for formatting.</li>\n<li>Jinja for writing layouts and re-usable bits of markup.</li>\n<li>Less, Sass and Compass for your CSS needs.</li>\n</ul>\n"
  },
  {
    "title": "Platframe",
    "repo": "platframe/platframe",
    "homepage": "https://platframe.com",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Pug, Jade"],
    "description": "A structured, scalable and modular platform for web and frontend development.",
    "startertemplaterepo": "platframe/platframe",
    "twitter": "platframe",
    "bodyContent": "Whether it's bespoke development, building a JAMstack app, or making it your blog's static site generator, *Platframe* grounds your next project with a resilient foundation.\n\n## Setup\n\nOption 1: hit the **Deploy to netlify** button  \nOption 2: run the following in your shell, optionally chaning \"my-app\" to a preferred name\n```bash\nnpx degit platframe/new my-app && cd $_ && git init && yarn\n```\nOption 3: [clone](https://github.com/platframe/platframe.git) or [download](https://github.com/platframe/platframe/releases/latest) the latest release and follow the remaining installation steps",
    "bodyHtml": "<p>Whether it's bespoke development, building a JAMstack app, or making it your blog's static site generator, <em>Platframe</em> grounds your next project with a resilient foundation.</p>\n<h2>Setup</h2>\n<p>Option 1: hit the <strong>Deploy to netlify</strong> button<br>\nOption 2: run the following in your shell, optionally chaning &quot;my-app&quot; to a preferred name</p>\n<pre><code class=\"hljs\">npx degit platframe/new my-app &amp;&amp; <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$_</span> &amp;&amp; git init &amp;&amp; yarn</code></pre><p>Option 3: <a href=\"https://github.com/platframe/platframe.git\">clone</a> or <a href=\"https://github.com/platframe/platframe/releases/latest\">download</a> the latest release and follow the remaining installation steps</p>\n"
  },
  {
    "title": "Plerd",
    "repo": "jmacdotorg/plerd",
    "homepage": "http://jmac.org/plerd/",
    "language": ["Perl"],
    "license": ["MIT"],
    "templates": ["TT2"],
    "description": "Ultralight Dropbox-friendly Markdown-based blogging.",
    "bodyContent": "Plerd is a minimalist blogging platform for people who love writing with <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a> using their favorite text editors, and who wish to host their own blogs as simple, attractive, static websites wholly under their own control.\n\n<a href=\"https://github.com/jmacdotorg/plerd\">Plerd is free and open-source software</a>, regularly used and actively maintained by its creator. All bloggers everywhere may use Plerd themselves at no cost, however they see fit.\n\n<h2 id=\"aliveexample\">A live example</h2>\n\nPlerd&#8217;s creator, Jason McIntosh, publishes <a href=\"http://fogknife.com\">his blog</a> entirely with Plerd. It&#8217;s just a static website. Every time Jason adds or edits a post, Plerd&#8217;s daemon processes modify the site&#8217;s files as needed.\n\n<h2 id=\"features\">Features</h2>\n\nPlerd&#8217;s strength comes from its minimalism. It gives you the ability to turn a folder of Markdown files on your computer into a beautiful, easy-to-edit website, and leaves the rest up to you.\n\n<ul>\n<li>Support for exactly one user per blog. No authentication to worry about, nor multi-user complexities to set up.</li>\n<li>Outputs completely static websites. No server-side scripting to tangle with.</li>\n<li>No user interface at all, other than your favorite text editor and your own computer&#8217;s file system.\n\n<ul>\n<li>Create posts by adding Markdown files into a designated directory.</li>\n<li>Edit posts by editing the files within that directory using any text editor you wish. Plerd will update your blog every time you save changes to your file.</li>\n<li>Delete posts by moving files outside of that directory.</li>\n<li><strong>Works great with Dropbox!</strong> If you keep your blog-source directory in Dropbox, then you can edit posts as local files on your laptop.</li>\n</ul></li>\n<li>Requires no extra database setup. Your one directory of directly-editable Markdown files represents the entirety of your blog&#8217;s data source.</li>\n<li>Minimal metadata: no categories, no tags. Just your posts, their titles, and their timestamps.</li>\n<li>Gives your blog an RSS feed and an archives page, both always kept up to date.</li>\n<li>Your blog&#8217;s static HTML is generated by completely customizable <a href=\"http://template-toolkit.org\">Template Toolkit</a> files.\n\n<ul>\n<li>The default templates are based on <a href=\"http://getbootstrap.com\">Bootstrap</a>, capable of generating a beautiful, modern, responsive website out of the box.</li>\n<li>The default templates also give your blog a search engine, via <a href=\"http://duckduckgo.com\">DuckDuckGo</a>.</li>\n<li>You can add external features like Disqus comments, Google Analytics, and Twitter widgets simply by pasting them into your templates.</li>\n</ul></li>\n</ul>\n\n<h2 id=\"howplerdworks\">How Plerd works</h2>\n\nPlerd includes a daemon-style program called &#8220;plerdwatcher&#8221; which monitors a specific directory for changes. Every time it sees a change, it treats all the Markdown files inside at directory as blog posts, applying them to a set of templates. Within moments, it has generated a complete blog website, including an updated RSS feed.\n\nThat&#8217;s it.\n\n<h2 id=\"installationanddocumentation\">Installation and documentation</h2>\n\nInstalling Plerd involves downloading the software, running a single command-line invocation to get all its prerequisites into place, and then configuring it to taste.\n\nFor now, you may find all Plerd documentation on <a href=\"https://github.com/jmacdotorg/plerd#readme\">the project&#8217;s GitHub page</a>. Installation assumes access to a Unix command line.\n\n<h2 id=\"support\">Support</h2>\n\nYou can file bugs or feature requests &#8211; or propose software patches &#8211; on <a href=\"https://github.com/jmacdotorg/plerd\">Plerd&#8217;s GitHub page</a>.\n\n<h2 id=\"authorcontact\">Author contact</h2>\n\nThe Plerd project was created and is maintained by Jason McIntosh (<a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x6a;&#x6d;&#x61;&#x63;&#64;&#106;&#109;&#x61;&#99;&#46;&#111;&#114;&#103;\">&#106;&#109;&#x61;&#99;&#x40;&#106;&#x6d;&#97;&#x63;&#x2e;&#x6f;&#x72;&#x67;</a>), who always welcomes comments and feedback.",
    "bodyHtml": "<p>Plerd is a minimalist blogging platform for people who love writing with &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; using their favorite text editors, and who wish to host their own blogs as simple, attractive, static websites wholly under their own control.</p>\n<p>&lt;a href=&quot;https://github.com/jmacdotorg/plerd&quot;&gt;Plerd is free and open-source software&lt;/a&gt;, regularly used and actively maintained by its creator. All bloggers everywhere may use Plerd themselves at no cost, however they see fit.</p>\n<p>&lt;h2 id=&quot;aliveexample&quot;&gt;A live example&lt;/h2&gt;</p>\n<p>Plerd’s creator, Jason McIntosh, publishes &lt;a href=&quot;http://fogknife.com&quot;&gt;his blog&lt;/a&gt; entirely with Plerd. It’s just a static website. Every time Jason adds or edits a post, Plerd’s daemon processes modify the site’s files as needed.</p>\n<p>&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;</p>\n<p>Plerd’s strength comes from its minimalism. It gives you the ability to turn a folder of Markdown files on your computer into a beautiful, easy-to-edit website, and leaves the rest up to you.</p>\n<p>&lt;ul&gt;\n&lt;li&gt;Support for exactly one user per blog. No authentication to worry about, nor multi-user complexities to set up.&lt;/li&gt;\n&lt;li&gt;Outputs completely static websites. No server-side scripting to tangle with.&lt;/li&gt;\n&lt;li&gt;No user interface at all, other than your favorite text editor and your own computer’s file system.</p>\n<p>&lt;ul&gt;\n&lt;li&gt;Create posts by adding Markdown files into a designated directory.&lt;/li&gt;\n&lt;li&gt;Edit posts by editing the files within that directory using any text editor you wish. Plerd will update your blog every time you save changes to your file.&lt;/li&gt;\n&lt;li&gt;Delete posts by moving files outside of that directory.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Works great with Dropbox!&lt;/strong&gt; If you keep your blog-source directory in Dropbox, then you can edit posts as local files on your laptop.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Requires no extra database setup. Your one directory of directly-editable Markdown files represents the entirety of your blog’s data source.&lt;/li&gt;\n&lt;li&gt;Minimal metadata: no categories, no tags. Just your posts, their titles, and their timestamps.&lt;/li&gt;\n&lt;li&gt;Gives your blog an RSS feed and an archives page, both always kept up to date.&lt;/li&gt;\n&lt;li&gt;Your blog’s static HTML is generated by completely customizable &lt;a href=&quot;http://template-toolkit.org&quot;&gt;Template Toolkit&lt;/a&gt; files.</p>\n<p>&lt;ul&gt;\n&lt;li&gt;The default templates are based on &lt;a href=&quot;http://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt;, capable of generating a beautiful, modern, responsive website out of the box.&lt;/li&gt;\n&lt;li&gt;The default templates also give your blog a search engine, via &lt;a href=&quot;http://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;You can add external features like Disqus comments, Google Analytics, and Twitter widgets simply by pasting them into your templates.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;</p>\n<p>&lt;h2 id=&quot;howplerdworks&quot;&gt;How Plerd works&lt;/h2&gt;</p>\n<p>Plerd includes a daemon-style program called “plerdwatcher” which monitors a specific directory for changes. Every time it sees a change, it treats all the Markdown files inside at directory as blog posts, applying them to a set of templates. Within moments, it has generated a complete blog website, including an updated RSS feed.</p>\n<p>That’s it.</p>\n<p>&lt;h2 id=&quot;installationanddocumentation&quot;&gt;Installation and documentation&lt;/h2&gt;</p>\n<p>Installing Plerd involves downloading the software, running a single command-line invocation to get all its prerequisites into place, and then configuring it to taste.</p>\n<p>For now, you may find all Plerd documentation on &lt;a href=&quot;https://github.com/jmacdotorg/plerd#readme&quot;&gt;the project’s GitHub page&lt;/a&gt;. Installation assumes access to a Unix command line.</p>\n<p>&lt;h2 id=&quot;support&quot;&gt;Support&lt;/h2&gt;</p>\n<p>You can file bugs or feature requests – or propose software patches – on &lt;a href=&quot;https://github.com/jmacdotorg/plerd&quot;&gt;Plerd’s GitHub page&lt;/a&gt;.</p>\n<p>&lt;h2 id=&quot;authorcontact&quot;&gt;Author contact&lt;/h2&gt;</p>\n<p>The Plerd project was created and is maintained by Jason McIntosh (&lt;a href=&quot;mailto:jmac@jmac.org&quot;&gt;jmac@jmac.org&lt;/a&gt;), who always welcomes comments and feedback.</p>\n"
  },
  {
    "title": "Poet",
    "repo": "jsantell/poet",
    "homepage": "http://jsantell.github.io/poet/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Jade"],
    "description": "A node.js blog engine.",
    "bodyContent": "Poet has your code-blogging back. Renders markdown, jade, or any templated files as posts, tag it up with metadata that's passed into any view engine you want, instant pagination, tag and category views, and home in time for dinner.\n\nView the source for [jsantell.com](https://github.com/jsantell/jsantell.com) to see an example of Poet in use. Much `<3` to [Brittany Fedor](http://bfedor.com/) for the sweet art!\n\n![The Node Poet](https://raw.github.com/jsantell/poet/gh-pages/img/poet.png)",
    "bodyHtml": "<p>Poet has your code-blogging back. Renders markdown, jade, or any templated files as posts, tag it up with metadata that's passed into any view engine you want, instant pagination, tag and category views, and home in time for dinner.</p>\n<p>View the source for <a href=\"https://github.com/jsantell/jsantell.com\">jsantell.com</a> to see an example of Poet in use. Much <code>&lt;3</code> to <a href=\"http://bfedor.com/\">Brittany Fedor</a> for the sweet art!</p>\n<p><img src=\"https://raw.github.com/jsantell/poet/gh-pages/img/poet.png\" alt=\"The Node Poet\"></p>\n"
  },
  {
    "title": "Pollen",
    "repo": "mbutterick/pollen",
    "homepage": "http://pollenpub.com",
    "language": ["Racket"],
    "license": ["GNU LGPL v3.0"],
    "templates": [],
    "description": "A web book-publishing system written in Racket with static html as default output target.",
    "bodyContent": "A book-publishing system written in [Racket](http://racket-lang.org). This is the software used to publish & maintain the web-based books [Practical Typography](http://practicaltypography.com), [Typography for Lawyers](http://typographyforlawyers.com), and the forthcoming [Beautiful Racket](http://beautifulracket.com).\n\nIf you think documents should be programmable, you’ll love it.  \nIf not, you can move along.\n\nPollen gives you access to a full programming language (Racket) with a text-based syntax that makes it easy to embed code within your documents.\n\n* [Quick tour](http://pkg-build.racket-lang.org/doc/pollen/quick-tour.html)\n* [Pollen as a text preprocessor (for CSS, etc.)](http://pkg-build.racket-lang.org/doc/pollen/first-tutorial.html)\n* [Pollen for Markdown authoring](http://pkg-build.racket-lang.org/doc/pollen/second-tutorial.html)\n* [Pollen for free-form markup authoring](http://pkg-build.racket-lang.org/doc/pollen/third-tutorial.html)\n* [Pollen for multiple-output publishing](http://pkg-build.racket-lang.org/doc/pollen/fourth-tutorial.html)\n* [Full docs](http://pkg-build.racket-lang.org/doc/pollen)\n\n\nUsing Racket 6.0+, install from the command line:\n\n    raco pkg install pollen\n    \nAnd update like so:\n\n    raco pkg update --update-deps pollen\n    \nOfficial mailing list: http://groups.google.com/forum/#!forum/pollenpub",
    "bodyHtml": "<p>A book-publishing system written in <a href=\"http://racket-lang.org\">Racket</a>. This is the software used to publish &amp; maintain the web-based books <a href=\"http://practicaltypography.com\">Practical Typography</a>, <a href=\"http://typographyforlawyers.com\">Typography for Lawyers</a>, and the forthcoming <a href=\"http://beautifulracket.com\">Beautiful Racket</a>.</p>\n<p>If you think documents should be programmable, you’ll love it.<br>\nIf not, you can move along.</p>\n<p>Pollen gives you access to a full programming language (Racket) with a text-based syntax that makes it easy to embed code within your documents.</p>\n<ul>\n<li><a href=\"http://pkg-build.racket-lang.org/doc/pollen/quick-tour.html\">Quick tour</a></li>\n<li><a href=\"http://pkg-build.racket-lang.org/doc/pollen/first-tutorial.html\">Pollen as a text preprocessor (for CSS, etc.)</a></li>\n<li><a href=\"http://pkg-build.racket-lang.org/doc/pollen/second-tutorial.html\">Pollen for Markdown authoring</a></li>\n<li><a href=\"http://pkg-build.racket-lang.org/doc/pollen/third-tutorial.html\">Pollen for free-form markup authoring</a></li>\n<li><a href=\"http://pkg-build.racket-lang.org/doc/pollen/fourth-tutorial.html\">Pollen for multiple-output publishing</a></li>\n<li><a href=\"http://pkg-build.racket-lang.org/doc/pollen\">Full docs</a></li>\n</ul>\n<p>Using Racket 6.0+, install from the command line:</p>\n<pre><code>raco pkg install pollen\n</code></pre>\n<p>And update like so:</p>\n<pre><code>raco pkg update --update-deps pollen\n</code></pre>\n<p>Official mailing list: http://groups.google.com/forum/#!forum/pollenpub</p>\n"
  },
  {
    "title": "Polo",
    "repo": "agonzalezro/polo",
    "homepage": "https://github.com/agonzalezro/polo#just-markdown",
    "language": ["Go"],
    "license": ["MIT"],
    "templates": ["Go"],
    "description": "Static site generator written in Go and \"compatible\" with Jekyll & Pelican content",
    "bodyContent": "polo is a static blog rendering tool created with Golang.\n\nI'm happily using it on my blog: http://agonzalezro.github.io, which means that\nworks fine :)\n\nYes, I know that there a lot of them out there but I just want mine to learn a\nlittle bit of Go coding.\n\n### Key features\n\n- Markdown support with Metadata parsing compatible with Jekyll, Pelican & others\n- Embedded daemon with autoregeneration of the htmls in case of any change on\n  the input files.\n- Archive, tags, RSS & pages support\n- Disqus comments\n- Google Analytics support with just a change on the settings\n- Share this support as well\n- Cool & easy way to re-template it, check\n  [the documentation](https://github.com/agonzalezro/polo#templating) or\n  [my blog post about it](http://agonzalezro.github.io/polo-supports-theming-now.html)\n- Quick!\n\n### Quickstart\n\n1. Download your version from\n   [Gobuild](http://gobuild.io/github.com/agonzalezro/polo)\n2. Get a JSON config\n   [from here](https://github.com/agonzalezro/polo/blob/master/config.json)\n3. Run\n   `polo -config [path_to_your_conf] [your_folder_with_mds] [your_output_path]`\n\nIf the config is called `config.json` and it's on your current directory, you\ndon't even need to specify it.\n\n### One more thing\n\nYou can run polo with the `-daemon` option which will start a server serving\nyour generated content and in case that you change any of the files in the\ninput folder it's going to autoregenerate the site.",
    "bodyHtml": "<p>polo is a static blog rendering tool created with Golang.</p>\n<p>I'm happily using it on my blog: http://agonzalezro.github.io, which means that\nworks fine :)</p>\n<p>Yes, I know that there a lot of them out there but I just want mine to learn a\nlittle bit of Go coding.</p>\n<h3>Key features</h3>\n<ul>\n<li>Markdown support with Metadata parsing compatible with Jekyll, Pelican &amp; others</li>\n<li>Embedded daemon with autoregeneration of the htmls in case of any change on\nthe input files.</li>\n<li>Archive, tags, RSS &amp; pages support</li>\n<li>Disqus comments</li>\n<li>Google Analytics support with just a change on the settings</li>\n<li>Share this support as well</li>\n<li>Cool &amp; easy way to re-template it, check\n<a href=\"https://github.com/agonzalezro/polo#templating\">the documentation</a> or\n<a href=\"http://agonzalezro.github.io/polo-supports-theming-now.html\">my blog post about it</a></li>\n<li>Quick!</li>\n</ul>\n<h3>Quickstart</h3>\n<ol>\n<li>Download your version from\n<a href=\"http://gobuild.io/github.com/agonzalezro/polo\">Gobuild</a></li>\n<li>Get a JSON config\n<a href=\"https://github.com/agonzalezro/polo/blob/master/config.json\">from here</a></li>\n<li>Run\n<code>polo -config [path_to_your_conf] [your_folder_with_mds] [your_output_path]</code></li>\n</ol>\n<p>If the config is called <code>config.json</code> and it's on your current directory, you\ndon't even need to specify it.</p>\n<h3>One more thing</h3>\n<p>You can run polo with the <code>-daemon</code> option which will start a server serving\nyour generated content and in case that you change any of the files in the\ninput folder it's going to autoregenerate the site.</p>\n"
  },
  {
    "title": "Poltergeist",
    "repo": "pillars/poltergeist",
    "homepage": "https://github.com/pillars/poltergeist",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Nunjucks"],
    "description": "Build fast websites with HTML/Markdown/Sass deployed to S3 & CloudFront",
    "bodyContent": "Welcome to Poltergeist, yet another static site generator based on Gulp. Here is a quick summary of what it does:\n\n- Static and simple\n- Supports HTML with inline Markdown\n- Supports Markdown with inline html\n- Supports FrontMatter to add meta-data\n- Supports advanced layouts and templates\n- Supports SASS\n- Concatenates, minifies, versions and gzip assets (images, fonts, css, js and html)\n- Generates a RSS feed\n- One command to develop for with `gulp`\n- One command deploy to S3 with `gulp deploy`\n- Supports Cloudfront distributions and manage cache invalidation",
    "bodyHtml": "<p>Welcome to Poltergeist, yet another static site generator based on Gulp. Here is a quick summary of what it does:</p>\n<ul>\n<li>Static and simple</li>\n<li>Supports HTML with inline Markdown</li>\n<li>Supports Markdown with inline html</li>\n<li>Supports FrontMatter to add meta-data</li>\n<li>Supports advanced layouts and templates</li>\n<li>Supports SASS</li>\n<li>Concatenates, minifies, versions and gzip assets (images, fonts, css, js and html)</li>\n<li>Generates a RSS feed</li>\n<li>One command to develop for with <code>gulp</code></li>\n<li>One command deploy to S3 with <code>gulp deploy</code></li>\n<li>Supports Cloudfront distributions and manage cache invalidation</li>\n</ul>\n"
  },
  {
    "title": "Poole",
    "repo": "obensonne/poole",
    "homepage": "https://bitbucket.org/obensonne/poole/",
    "language": ["Python"],
    "license": ["GNU GPL v3.0"],
    "templates": ["HTML"],
    "description": "A simple Markdown static site generator.",
    "bodyContent": "Poole is an easy to use Markdown driven static website generator. You write the content of your pages in Markdown and Poole creates a nice and simple site with a navigation menu. You don't need to learn a template or preprocessing engine.\n\n### Philosophy\n\nPoole is made for simple sites. Its simplicity means it has minimal technical requirements and doesn't require the user to learn any templating system.",
    "bodyHtml": "<p>Poole is an easy to use Markdown driven static website generator. You write the content of your pages in Markdown and Poole creates a nice and simple site with a navigation menu. You don't need to learn a template or preprocessing engine.</p>\n<h3>Philosophy</h3>\n<p>Poole is made for simple sites. Its simplicity means it has minimal technical requirements and doesn't require the user to learn any templating system.</p>\n"
  },
  {
    "title": "pretzel",
    "repo": "Code52/pretzel",
    "homepage": "http://code52.org/pretzel.html",
    "language": [".Net"],
    "license": ["Microsoft"],
    "templates": ["Liquid"],
    "description": "A site generation tool (and then some) for .NET platforms.",
    "bodyContent": "A simple, pluggable site generation tool for .NET developers and Windows users (with Mono support planned I think)\n\nPretzel follows the same convensions as Jekyll and should be compatible with basic Jekyll websites. If you are not familiar with Jekyll, have a read at https://github.com/mojombo/jekyll/wiki/Usage",
    "bodyHtml": "<p>A simple, pluggable site generation tool for .NET developers and Windows users (with Mono support planned I think)</p>\n<p>Pretzel follows the same convensions as Jekyll and should be compatible with basic Jekyll websites. If you are not familiar with Jekyll, have a read at https://github.com/mojombo/jekyll/wiki/Usage</p>\n"
  },
  {
    "title": "Prosopopee",
    "repo": "Psycojoker/prosopopee",
    "homepage": "https://github.com/Psycojoker/prosopopee",
    "language": ["Python"],
    "license": ["GNU GPL v3.0"],
    "templates": ["Jinja2"],
    "description": "A static website generator that allows you to tell a story with your pictures",
    "bodyContent": "Prosopopee. Static site generator for your story.\n\nMake beautiful customizable pictures galleries that tell a story using a static website generator written in Python. You don't need care about css, code and presentation, manage your contents in YAML file and Prosopopee will take care about the rest.\n\n### Features\n\nProsopopee currently supports:\n\n * Lightweight\n * Thumbnails & multiple resolutions for fast previews (JPEG progressive)\n * Videos support\n * Mobile friendly\n * Caching for fast rendering\n * Multi level gallery\n * Support themes (default, material, light)\n * Password access (encrypt page)\n * Image lazy loading\n * Night Mode\n * Completely static output is easy to host anywhere\n * Hackable",
    "bodyHtml": "<p>Prosopopee. Static site generator for your story.</p>\n<p>Make beautiful customizable pictures galleries that tell a story using a static website generator written in Python. You don't need care about css, code and presentation, manage your contents in YAML file and Prosopopee will take care about the rest.</p>\n<h3>Features</h3>\n<p>Prosopopee currently supports:</p>\n<ul>\n<li>Lightweight</li>\n<li>Thumbnails &amp; multiple resolutions for fast previews (JPEG progressive)</li>\n<li>Videos support</li>\n<li>Mobile friendly</li>\n<li>Caching for fast rendering</li>\n<li>Multi level gallery</li>\n<li>Support themes (default, material, light)</li>\n<li>Password access (encrypt page)</li>\n<li>Image lazy loading</li>\n<li>Night Mode</li>\n<li>Completely static output is easy to host anywhere</li>\n<li>Hackable</li>\n</ul>\n"
  },
  {
    "title": "pub-server",
    "repo": "jldec/pub-server",
    "homepage": "http://jldec.github.io/pub-doc/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Handlebars"],
    "description": "static HTML generator + editor with npm-based themes",
    "bodyContent": "## pub-server\n\n**pub-server**, or **pub** for short is an HTML generator+editor entirely written in javascript.\n\nThe generator+editor can run in-browser, providing a serverless-CMS for non-technical users to edit markdown _source_ text fragments, and instantly preview the generated HTML, without first having to install pub-server themselves.\n\nWhen you publish onto a static hosting service like [**netlify**](https://www.netlify.com/), you can include the generator+editor together with the published HTML.\n\nTo see this in action, check out the docs at http://jldec.github.io/pub-doc/. The editor appears when you click on the [edit](http://jldec.github.io/pub-doc/pub/?page=%2F) button at the top right.\nFeel free to play around - in this instance, your changes will not be recorded.\n\nOther examples include a [presentation theme](https://github.com/jldec/pub-sample-deck), a [flexbox design](https://github.com/jldec/pub-theme-brief), and a [blog](http://blog.pubblz.com/).\n\n\n### installation\n\nrunning **pub-server** locally requires node.js.\n\n```sh\nnpm install -g pub-server\n```\n\nOSX and Linux are working, Windows support is coming - PRs welcome.\n\n\n### usage\n\n- `pub` (with no options) serves `*.md` in the current directory or looks for a `pub-config.js`. The default theme is useful for previewing Github README.md files. The server will watch for changes and update http://localhost:3001/ whenever markdown files or CSS or other static files are saved.\n\n- `pub -O` generates .html and other static files (including generator + editor) to `./out`.\n\n- `pub -S <dir>` serves static files from any directory. It will mimic the behavior of Github Pages, looking for index.html files in folders, and redirecting from /folder-name to /folder-name/\n\n- `pub -h` shows usage summary.",
    "bodyHtml": "<h2>pub-server</h2>\n<p><strong>pub-server</strong>, or <strong>pub</strong> for short is an HTML generator+editor entirely written in javascript.</p>\n<p>The generator+editor can run in-browser, providing a serverless-CMS for non-technical users to edit markdown <em>source</em> text fragments, and instantly preview the generated HTML, without first having to install pub-server themselves.</p>\n<p>When you publish onto a static hosting service like <a href=\"https://www.netlify.com/\"><strong>netlify</strong></a>, you can include the generator+editor together with the published HTML.</p>\n<p>To see this in action, check out the docs at http://jldec.github.io/pub-doc/. The editor appears when you click on the <a href=\"http://jldec.github.io/pub-doc/pub/?page=%2F\">edit</a> button at the top right.\nFeel free to play around - in this instance, your changes will not be recorded.</p>\n<p>Other examples include a <a href=\"https://github.com/jldec/pub-sample-deck\">presentation theme</a>, a <a href=\"https://github.com/jldec/pub-theme-brief\">flexbox design</a>, and a <a href=\"http://blog.pubblz.com/\">blog</a>.</p>\n<h3>installation</h3>\n<p>running <strong>pub-server</strong> locally requires node.js.</p>\n<pre><code class=\"hljs\">npm install -g pub-server</code></pre><p>OSX and Linux are working, Windows support is coming - PRs welcome.</p>\n<h3>usage</h3>\n<ul>\n<li>\n<p><code>pub</code> (with no options) serves <code>*.md</code> in the current directory or looks for a <code>pub-config.js</code>. The default theme is useful for previewing Github README.md files. The server will watch for changes and update http://localhost:3001/ whenever markdown files or CSS or other static files are saved.</p>\n</li>\n<li>\n<p><code>pub -O</code> generates .html and other static files (including generator + editor) to <code>./out</code>.</p>\n</li>\n<li>\n<p><code>pub -S &lt;dir&gt;</code> serves static files from any directory. It will mimic the behavior of Github Pages, looking for index.html files in folders, and redirecting from /folder-name to /folder-name/</p>\n</li>\n<li>\n<p><code>pub -h</code> shows usage summary.</p>\n</li>\n</ul>\n"
  },
  {
    "title": "Publii",
    "repo": "GetPublii/Publii",
    "homepage": "https://getpublii.com",
    "language": ["JavaScript"],
    "license": ["GNU GPL v3.0"],
    "templates": ["Handlebars"],
    "description": "Desktop-based CMS for creating static websites.",
    "twitter": "getpublii",
    "bodyContent": "Publii is a desktop-based CMS for Windows and Mac that makes creating static websites fast and hassle-free, even for beginners.\n\nUnlike static-site generators that are often unwieldy and difficult to use, Publii provides an easy-to-understand UI much like server-based CMSs such as WordPress or Joomla!, where users can create posts and other site content, and style their site using a variety of built-in themes and options. Users can enjoy the benefits of a super-fast and secure static website, with all the convenience that a CMS provides.\n\nWhat makes Publii even more unique is that the app runs locally on your desktop rather than on the site's server. Available for both Windows and Mac, once the app has been installed you can create a site in minutes, even without internet access; since Publii is a desktop app you can create, update and modify your site offline, then upload the site changes to your server at the click of a button. \n\n### Supported hostings\n\nPublii supports multiple upload options, including standard HTTP/HTTPS servers, Netlify, Amazon S3, GitHub Pages and Google Cloud or SFTP.",
    "bodyHtml": "<p>Publii is a desktop-based CMS for Windows and Mac that makes creating static websites fast and hassle-free, even for beginners.</p>\n<p>Unlike static-site generators that are often unwieldy and difficult to use, Publii provides an easy-to-understand UI much like server-based CMSs such as WordPress or Joomla!, where users can create posts and other site content, and style their site using a variety of built-in themes and options. Users can enjoy the benefits of a super-fast and secure static website, with all the convenience that a CMS provides.</p>\n<p>What makes Publii even more unique is that the app runs locally on your desktop rather than on the site's server. Available for both Windows and Mac, once the app has been installed you can create a site in minutes, even without internet access; since Publii is a desktop app you can create, update and modify your site offline, then upload the site changes to your server at the click of a button.</p>\n<h3>Supported hostings</h3>\n<p>Publii supports multiple upload options, including standard HTTP/HTTPS servers, Netlify, Amazon S3, GitHub Pages and Google Cloud or SFTP.</p>\n"
  },
  {
    "title": "Punch",
    "repo": "laktek/punch",
    "homepage": "http://laktek.github.io/punch/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Mustache"],
    "description": "Simple, intuitive. It delights designers and developers alike.",
    "bodyContent": "Punch is a simple, intuitive web publishing framework that will delight both designers and developers.\n\n### With Punch you can...\n\n* Use boilerplates to quickly setup a site.\n* Write minimal templates with Mustache.\n* Create flexible site structures with inheritable layouts and partials.\n* Define page contents in JSON.\n* Use Markdown to write formatted content.\n* Use CoffeeScript and LESS if that's your thing.\n* Minify and bundle assets before serving.\n* Preview changes on the fly, while you develop.\n* Set cache headers and compress responses. (play nice with CDNs)\n* Easily publish to Amazon S3 or to a custom server with SFTP.\n\n### Wait, There's more...\n\n* Use any data source for content (eg. Relational databases, Document stores or REST APIs).\n* Don't like Mustache? Switch to a different template engine of your choice.\n* Write helpers to add run-time behaviour.\n* Add custom content parsers, pre-compilers, minifiers and publishers.\n* Add hooks to run after generating a page or site.\n* Define your own publishing strategy.",
    "bodyHtml": "<p>Punch is a simple, intuitive web publishing framework that will delight both designers and developers.</p>\n<h3>With Punch you can...</h3>\n<ul>\n<li>Use boilerplates to quickly setup a site.</li>\n<li>Write minimal templates with Mustache.</li>\n<li>Create flexible site structures with inheritable layouts and partials.</li>\n<li>Define page contents in JSON.</li>\n<li>Use Markdown to write formatted content.</li>\n<li>Use CoffeeScript and LESS if that's your thing.</li>\n<li>Minify and bundle assets before serving.</li>\n<li>Preview changes on the fly, while you develop.</li>\n<li>Set cache headers and compress responses. (play nice with CDNs)</li>\n<li>Easily publish to Amazon S3 or to a custom server with SFTP.</li>\n</ul>\n<h3>Wait, There's more...</h3>\n<ul>\n<li>Use any data source for content (eg. Relational databases, Document stores or REST APIs).</li>\n<li>Don't like Mustache? Switch to a different template engine of your choice.</li>\n<li>Write helpers to add run-time behaviour.</li>\n<li>Add custom content parsers, pre-compilers, minifiers and publishers.</li>\n<li>Add hooks to run after generating a page or site.</li>\n<li>Define your own publishing strategy.</li>\n</ul>\n"
  },
  {
    "title": "PyKwiki",
    "repo": "nullism/pykwiki",
    "homepage": "http://pykwiki.nullism.com",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "Markdown based authoring with static search.",
    "bodyContent": "PyKwiki is a Python based content engine that outputs 100% static content, with JavaScript based weighted keyword searching. \n\n### With PyKwiki you can...\n\n* Use Markdown to author pages\n* Use a built-in Bootstrap 3 theme or roll your own.\n* Generate a static JavaScript search index.\n* Search static pages with weighted keyword searching.\n* Browse pages by date, post order, or tags / categories.\n* Use any Python Markdown2 extension, or write your own.\n* Create and use the built-in templating for reusable wiki-like sections.",
    "bodyHtml": "<p>PyKwiki is a Python based content engine that outputs 100% static content, with JavaScript based weighted keyword searching.</p>\n<h3>With PyKwiki you can...</h3>\n<ul>\n<li>Use Markdown to author pages</li>\n<li>Use a built-in Bootstrap 3 theme or roll your own.</li>\n<li>Generate a static JavaScript search index.</li>\n<li>Search static pages with weighted keyword searching.</li>\n<li>Browse pages by date, post order, or tags / categories.</li>\n<li>Use any Python Markdown2 extension, or write your own.</li>\n<li>Create and use the built-in templating for reusable wiki-like sections.</li>\n</ul>\n"
  },
  {
    "title": "pystatic",
    "repo": "zedelghem/pystatic",
    "homepage": "https://github.com/Zedelghem/pystatic",
    "language": ["Python"],
    "license": ["GNU GPL v3.0"],
    "templates": ["HTML"],
    "description": "Dead simple, one-line, few options static website generator. Just write your stuff instead of learning generators.",
    "bodyContent": "There are multiple Python-based static site generators but I wanted something extremely simple, even primitive; something you could use knowing zero Python and perhaps never even having to tweak options. A tool for everyone not willing to struggle with servers or learn a CMS just to write stuff. Lo and behold, here comes pystatic.",
    "bodyHtml": "<p>There are multiple Python-based static site generators but I wanted something extremely simple, even primitive; something you could use knowing zero Python and perhaps never even having to tweak options. A tool for everyone not willing to struggle with servers or learn a CMS just to write stuff. Lo and behold, here comes pystatic.</p>\n"
  },
  {
    "title": "Qgoda",
    "repo": "gflohr/qgoda",
    "homepage": "http://www.qgoda.net/",
    "language": ["Perl"],
    "license": ["MIT"],
    "templates": ["Template Toolkit 2"],
    "description": "A sophisticated, blog-aware static site generator with unprecedented multi-language features",
    "startertemplaterepo": "gflohr/qgoda-multilang",
    "bodyContent": "Qgoda is a sophisticated static site generator following the Do-The-Right-Thing&trade; philosophy.  Micro-sites require zero-configuration, a blog is easily started with one of the sample themes, but you can always grow with your needs and create arbitrarily complex sites with Qgoda.\n\n## Multi-Language\n\nQgoda offers multi-lingualism for free:\n\n* Template translation based on [GNU gettext](https://www.gnu.org/software/gettext/).\n* Built-in I18N-aware links and listings\n* File-based translation facilities, *or*\n* Complete website translation based on PO-files (see GNU gettext](https://www.gnu.org/software/gettext/))\n\n## Arbitrary Taxonomies\n\nTags, categories, languages, sections, ... it's up to you.\n\n## Language and Platform Agnostic\n\nYou can extend Qgoda in Perl, Python, Ruby, Java, other languages may follow.\n\nDevelopment web server or build system is completely up to you.  The Qgoda default themes are based on [Webpack](https://webpack.js.org/) but go with Makefiles, shell scripts, ant or Maven if [NodeJS](https://nodejs.org/) is not your comfort zone.\n\n## The Ideal Project Portal\n\nThe [Qgoda website](http://www.qgoda.net/) is an open-source, multi-lingual portal site for the open source project Qgoda, containing a [landing page](http://www.qgoda.net/), a [multi-lingual blog](http://www.qgoda.net/en/news/), and [extensive software documentation](http://www.qgoda.net/en/docs/).  Qgoda is the ideal software for your open source project or community.\n\n## Pronunciation\n\nIt is pronounced \"yagoda\" and it means strawberry in Bulgarian and other Slavic languages. The cyrillic letter \"ya\" is commonly transcribed as \"q\" because it resembles the original cyrillic letter \"я\".\n\n## Getting Started\n\nAfter [installing Qgoda](http://www.qgoda.net/en/docs/installation/) or getting the [Docker image](https://github.com/gflohr/qgoda#user-content-run-qgoda-in-docker-container) going, try one of the following inside an empty(!) directory of your choice:\n\n* `qgoda init gflohr/essential`: a complete blog without any styling\n* `qgoda init gflohr/default`: same as above but with development web server, webpack, ...\n* `qgoda init gflohr/multilang`: same as above but multi-lingual\n* `qgoda init gflohr/minimal`: if all of the above is just too much and you want to control everything yourself",
    "bodyHtml": "<p>Qgoda is a sophisticated static site generator following the Do-The-Right-Thing™ philosophy.  Micro-sites require zero-configuration, a blog is easily started with one of the sample themes, but you can always grow with your needs and create arbitrarily complex sites with Qgoda.</p>\n<h2>Multi-Language</h2>\n<p>Qgoda offers multi-lingualism for free:</p>\n<ul>\n<li>Template translation based on <a href=\"https://www.gnu.org/software/gettext/\">GNU gettext</a>.</li>\n<li>Built-in I18N-aware links and listings</li>\n<li>File-based translation facilities, <em>or</em></li>\n<li>Complete website translation based on PO-files (see GNU gettext](https://www.gnu.org/software/gettext/))</li>\n</ul>\n<h2>Arbitrary Taxonomies</h2>\n<p>Tags, categories, languages, sections, ... it's up to you.</p>\n<h2>Language and Platform Agnostic</h2>\n<p>You can extend Qgoda in Perl, Python, Ruby, Java, other languages may follow.</p>\n<p>Development web server or build system is completely up to you.  The Qgoda default themes are based on <a href=\"https://webpack.js.org/\">Webpack</a> but go with Makefiles, shell scripts, ant or Maven if <a href=\"https://nodejs.org/\">NodeJS</a> is not your comfort zone.</p>\n<h2>The Ideal Project Portal</h2>\n<p>The <a href=\"http://www.qgoda.net/\">Qgoda website</a> is an open-source, multi-lingual portal site for the open source project Qgoda, containing a <a href=\"http://www.qgoda.net/\">landing page</a>, a <a href=\"http://www.qgoda.net/en/news/\">multi-lingual blog</a>, and <a href=\"http://www.qgoda.net/en/docs/\">extensive software documentation</a>.  Qgoda is the ideal software for your open source project or community.</p>\n<h2>Pronunciation</h2>\n<p>It is pronounced &quot;yagoda&quot; and it means strawberry in Bulgarian and other Slavic languages. The cyrillic letter &quot;ya&quot; is commonly transcribed as &quot;q&quot; because it resembles the original cyrillic letter &quot;я&quot;.</p>\n<h2>Getting Started</h2>\n<p>After <a href=\"http://www.qgoda.net/en/docs/installation/\">installing Qgoda</a> or getting the <a href=\"https://github.com/gflohr/qgoda#user-content-run-qgoda-in-docker-container\">Docker image</a> going, try one of the following inside an empty(!) directory of your choice:</p>\n<ul>\n<li><code>qgoda init gflohr/essential</code>: a complete blog without any styling</li>\n<li><code>qgoda init gflohr/default</code>: same as above but with development web server, webpack, ...</li>\n<li><code>qgoda init gflohr/multilang</code>: same as above but multi-lingual</li>\n<li><code>qgoda init gflohr/minimal</code>: if all of the above is just too much and you want to control everything yourself</li>\n</ul>\n"
  },
  {
    "title": "QPage",
    "repo": "sepandhaghighi/qpage",
    "homepage": "http://www.qpage.ir",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["None"],
    "description": "QPage or QuickPage is a free project for creating academic homepage without any code",
    "bodyContent": "QPage or QuickPage is a free project for creating academic homepage without any programming or markup languages.\nQPage is suitable for non-developers to generate static web pages for resume and portfolio without any code and in short time.\nWe developed QPage on Windows but it also run in Linux and Mac-OSX.\n\n\nhttp://www.qpage.ir",
    "bodyHtml": "<p>QPage or QuickPage is a free project for creating academic homepage without any programming or markup languages.\nQPage is suitable for non-developers to generate static web pages for resume and portfolio without any code and in short time.\nWe developed QPage on Windows but it also run in Linux and Mac-OSX.</p>\n<p>http://www.qpage.ir</p>\n"
  },
  {
    "title": "React Static",
    "repo": "nozzle/react-static",
    "homepage": "https://react-static.js.org/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["React"],
    "description": "A progressive static-site framework for React.",
    "startertemplaterepo": "tannerlinsley/react-static-starter",
    "bodyContent": "React-Static is a fast, lightweight, and powerful toolkit for building static-progressive React applications and websites. Inspired by create-react-app, it's been carefully designed to meet the highest standards of **SEO, site performance, and user/developer experience**. [**Read the introduction article on Medium**](https://medium.com/@tannerlinsley/%EF%B8%8F-introducing-react-static-a-progressive-static-site-framework-for-react-3470d2a51ebc)\n\n## Features\n\n- ⚛️ 100% React (or Preact!)\n- 🚀 Blazing fast builds and performance.\n- 🚚 Data Agnostic. Supply your site with data from anywhere, **however you want**.\n- 💥 Near-instant page views via [PRPL](https://developers.google.com/web/fundamentals/performance/prpl-pattern/) pattern.\n- 🎯 Built for **SEO**.\n- 🥇 React-first developer experience.\n- 😌 Painless project setup & migration.\n- 💯 Supports 100% of the React ecosystem. Including CSS-in-JS libraries, custom Query layers like GraphQL, and even Redux.\n- 🔥 Hot Reloadable out-of-the-box. Edit React components & styles in real-time.\n- 📲 LAN accessible dev environmentfor testing on other devices like phones and tablets.\n\n## Videos & Tutorials\n\n- [Get started in 5 minutes! (create-react-app template)](https://youtu.be/1pBzh7IM1s8) (5 min)\n- [Introducing React-Static! How it works and why we built it!](https://www.youtube.com/watch?v=OqbJ5swVpDQ) (80 min)\n- [Walkthrough - Installing and creating a new project with Styled Components](https://www.youtube.com/watch?v=KvlTVZPlmgs) (20 min)",
    "bodyHtml": "<p>React-Static is a fast, lightweight, and powerful toolkit for building static-progressive React applications and websites. Inspired by create-react-app, it's been carefully designed to meet the highest standards of <strong>SEO, site performance, and user/developer experience</strong>. <a href=\"https://medium.com/@tannerlinsley/%EF%B8%8F-introducing-react-static-a-progressive-static-site-framework-for-react-3470d2a51ebc\"><strong>Read the introduction article on Medium</strong></a></p>\n<h2>Features</h2>\n<ul>\n<li>⚛️ 100% React (or Preact!)</li>\n<li>🚀 Blazing fast builds and performance.</li>\n<li>🚚 Data Agnostic. Supply your site with data from anywhere, <strong>however you want</strong>.</li>\n<li>💥 Near-instant page views via <a href=\"https://developers.google.com/web/fundamentals/performance/prpl-pattern/\">PRPL</a> pattern.</li>\n<li>🎯 Built for <strong>SEO</strong>.</li>\n<li>🥇 React-first developer experience.</li>\n<li>😌 Painless project setup &amp; migration.</li>\n<li>💯 Supports 100% of the React ecosystem. Including CSS-in-JS libraries, custom Query layers like GraphQL, and even Redux.</li>\n<li>🔥 Hot Reloadable out-of-the-box. Edit React components &amp; styles in real-time.</li>\n<li>📲 LAN accessible dev environmentfor testing on other devices like phones and tablets.</li>\n</ul>\n<h2>Videos &amp; Tutorials</h2>\n<ul>\n<li><a href=\"https://youtu.be/1pBzh7IM1s8\">Get started in 5 minutes! (create-react-app template)</a> (5 min)</li>\n<li><a href=\"https://www.youtube.com/watch?v=OqbJ5swVpDQ\">Introducing React-Static! How it works and why we built it!</a> (80 min)</li>\n<li><a href=\"https://www.youtube.com/watch?v=KvlTVZPlmgs\">Walkthrough - Installing and creating a new project with Styled Components</a> (20 min)</li>\n</ul>\n"
  },
  {
    "title": "Reem",
    "repo": "andrejewski/reem",
    "homepage": "http://github.com/andrejewski/reem",
    "language": ["JavaScript"],
    "license": ["ISC"],
    "templates": ["Consolidate"],
    "description": "JavaScript static site generator for anything",
    "bodyContent": "Reem is different from other static site generators in the amount of control\ndevelopers are allowed during the build phase. The source directory is expanded\ninto a tree data structure that can be traversed and manipulated in ideally\nany way desired and then is written to the output directory. Plugins are added to Reem like middleware in Express\nand Reem seperates files into four middleware stacks, one each for posts, pages,\nfiles, and lists (folders). Reem really is quite feature rich and should not be\nsummed up in a paragraph.\n\nMore information can be found on the [wiki pages](https://github.com/andrejewski/reem/wiki).",
    "bodyHtml": "<p>Reem is different from other static site generators in the amount of control\ndevelopers are allowed during the build phase. The source directory is expanded\ninto a tree data structure that can be traversed and manipulated in ideally\nany way desired and then is written to the output directory. Plugins are added to Reem like middleware in Express\nand Reem seperates files into four middleware stacks, one each for posts, pages,\nfiles, and lists (folders). Reem really is quite feature rich and should not be\nsummed up in a paragraph.</p>\n<p>More information can be found on the <a href=\"https://github.com/andrejewski/reem/wiki\">wiki pages</a>.</p>\n"
  },
  {
    "title": "Reptar",
    "repo": "reptar/reptar",
    "homepage": "http://reptar.github.io/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Nunjucks"],
    "description": "A modern static site generator written in next generation (ES2015+) JavaScript.",
    "bodyContent": "Reptar was built to have feature parity with most mature blogging software. Out of the box Reptar can paginate your posts along with create tag pages.\n\nYou can configure your Reptar site anyway you like. That means migrating from other systems is possible without a full re-write.\n\nThere's also theme support that is expressive, flexible, and sharable. You can use all the modern front-end tools to create rich and beautiful designs.",
    "bodyHtml": "<p>Reptar was built to have feature parity with most mature blogging software. Out of the box Reptar can paginate your posts along with create tag pages.</p>\n<p>You can configure your Reptar site anyway you like. That means migrating from other systems is possible without a full re-write.</p>\n<p>There's also theme support that is expressive, flexible, and sharable. You can use all the modern front-end tools to create rich and beautiful designs.</p>\n"
  },
  {
    "title": "Rinco",
    "repo": "rincojs/rinco-sg",
    "homepage": "https://github.com/rincojs/rinco-sg",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Mustache"],
    "description": "A simple static site generator.",
    "bodyContent": "**Rinco** is a simple static generator that allows you to create a static site faster. Rinco has some syntax helpers to improve your development and supports many CSS extension languages like sass, less, stylus and JS transpilers like coffeescript, typescript and **ES6(BABEL)** language as well.",
    "bodyHtml": "<p><strong>Rinco</strong> is a simple static generator that allows you to create a static site faster. Rinco has some syntax helpers to improve your development and supports many CSS extension languages like sass, less, stylus and JS transpilers like coffeescript, typescript and <strong>ES6(BABEL)</strong> language as well.</p>\n"
  },
  {
    "title": "Roots",
    "repo": "jescalan/roots",
    "homepage": "http://roots.netlify.com",
    "language": ["CoffeeScript"],
    "license": ["MIT"],
    "templates": ["Jade"],
    "description": "roots is a toolbox for building simple, beautiful, and efficient products for the web.",
    "bodyContent": "Roots is a toolkit built on best practices for advanced front-end web development. It has a very large number of features, which I’ll attempt to list below. Roots comes in the form of a static site build tool by default, but also includes templates and plugins for express and rails.\n\n* extremely simple installation\n* clean and minimal default project template\n* clean and intuitive app settings file\n* jade, stylus, and coffeescript default stack\n* easy to add languages with a simple and well-documented plugin interface\n* super fast live reload implementation\n* compile errors displayed as a flash message, doesn’t break workflow\n* layouts and partials fully supported\n* coffeescript and markdown can be written directly in views\n* global variables and functions (view helpers)\n* extremely robust, modular, and powerful css helper library built in\n* single command deploy to heroku, nodejitsu, or github pages\n* intelligently minifies html, css, and js on deploy\n* efficient client-side js management through bower and require.js\n* automatically precompiles jade templates for use in client-side MVCs like backbone\n* use dynamic content to create collections, blogs, etc\n* compile a single file for multiple languages",
    "bodyHtml": "<p>Roots is a toolkit built on best practices for advanced front-end web development. It has a very large number of features, which I’ll attempt to list below. Roots comes in the form of a static site build tool by default, but also includes templates and plugins for express and rails.</p>\n<ul>\n<li>extremely simple installation</li>\n<li>clean and minimal default project template</li>\n<li>clean and intuitive app settings file</li>\n<li>jade, stylus, and coffeescript default stack</li>\n<li>easy to add languages with a simple and well-documented plugin interface</li>\n<li>super fast live reload implementation</li>\n<li>compile errors displayed as a flash message, doesn’t break workflow</li>\n<li>layouts and partials fully supported</li>\n<li>coffeescript and markdown can be written directly in views</li>\n<li>global variables and functions (view helpers)</li>\n<li>extremely robust, modular, and powerful css helper library built in</li>\n<li>single command deploy to heroku, nodejitsu, or github pages</li>\n<li>intelligently minifies html, css, and js on deploy</li>\n<li>efficient client-side js management through bower and require.js</li>\n<li>automatically precompiles jade templates for use in client-side MVCs like backbone</li>\n<li>use dynamic content to create collections, blogs, etc</li>\n<li>compile a single file for multiple languages</li>\n</ul>\n"
  },
  {
    "title": "Rosid",
    "repo": "electerious/Rosid",
    "homepage": "http://rosid.electerious.com/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Any JS"],
    "description": "Just-in-time development server and static site exporter.",
    "bodyContent": "Just-in-time development server and static site exporter written in Node.js. Rosid invokes functions before serving files to the browser. This allows you to pre-process anything on-the-fly, without saving it.\n\n### What is Rosid?\n\nRosid is a framework that focus on two features:\n\n1. A **development server with live-reloading**, which transforms files as soon as you request them.\n2. A **static site generator**, which transforms files using defined transform-functions.\n\n### Why Rosid?\n\n- It doesn't force you to use a defined directory structure\n- It's build on popular modules like [Browsersync](https://www.browsersync.io)\n- It integrates nicely with tools you are are already using to transform your files (e.g. [Gulp](http://gulpjs.com), [Grunt](http://gruntjs.com) or Vanilla JS)\n- It's lightweight and only includes what it really needs\n- Transformed files don't need to be saved along their source files\n- It lets you compile code to static files to host them anywhere\n\n### How does it work?\n\nRosid starts a server and compares requested URLs with user-defined patterns. A associated file handler will be executed when a pattern matches. The handler receives information about the request and can transform the file, which will be send to the browser.",
    "bodyHtml": "<p>Just-in-time development server and static site exporter written in Node.js. Rosid invokes functions before serving files to the browser. This allows you to pre-process anything on-the-fly, without saving it.</p>\n<h3>What is Rosid?</h3>\n<p>Rosid is a framework that focus on two features:</p>\n<ol>\n<li>A <strong>development server with live-reloading</strong>, which transforms files as soon as you request them.</li>\n<li>A <strong>static site generator</strong>, which transforms files using defined transform-functions.</li>\n</ol>\n<h3>Why Rosid?</h3>\n<ul>\n<li>It doesn't force you to use a defined directory structure</li>\n<li>It's build on popular modules like <a href=\"https://www.browsersync.io\">Browsersync</a></li>\n<li>It integrates nicely with tools you are are already using to transform your files (e.g. <a href=\"http://gulpjs.com\">Gulp</a>, <a href=\"http://gruntjs.com\">Grunt</a> or Vanilla JS)</li>\n<li>It's lightweight and only includes what it really needs</li>\n<li>Transformed files don't need to be saved along their source files</li>\n<li>It lets you compile code to static files to host them anywhere</li>\n</ul>\n<h3>How does it work?</h3>\n<p>Rosid starts a server and compares requested URLs with user-defined patterns. A associated file handler will be executed when a pattern matches. The handler receives information about the request and can transform the file, which will be send to the browser.</p>\n"
  },
  {
    "title": "Ruhoh",
    "repo": "ruhoh/ruhoh.rb",
    "homepage": "http://ruhoh.com/",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Mustache"],
    "description": "The Universal Static Blog API.",
    "bodyContent": "Ruhoh is a static site generator made for publishing content on the Internet. It's similar to jekyll, nanoc, and others.\n\nA static site is a website with no moving parts: no dependencies, no database, no code execution, no admin panel. This is different from a \"web application\" which requires many layers of software.\n\nCreating a static site in ruhoh is done by creating standard HTML, CSS, and javascript files on your local computer as you would normally. Ruhoh does magic based on the way you organize your files and settings. Ruhoh offers baked-in automation, templating, and bindings for powerful features but you don't have to know or touch the underlying programming logic if you don't want to.\n\nPublish anywhere by \"compiling\" your website and hosting the contents on nearly any web-host on the planet. Ruhoh also supports automatic hosting so you don't have to worry about finding or setting up a web-host.",
    "bodyHtml": "<p>Ruhoh is a static site generator made for publishing content on the Internet. It's similar to jekyll, nanoc, and others.</p>\n<p>A static site is a website with no moving parts: no dependencies, no database, no code execution, no admin panel. This is different from a &quot;web application&quot; which requires many layers of software.</p>\n<p>Creating a static site in ruhoh is done by creating standard HTML, CSS, and javascript files on your local computer as you would normally. Ruhoh does magic based on the way you organize your files and settings. Ruhoh offers baked-in automation, templating, and bindings for powerful features but you don't have to know or touch the underlying programming logic if you don't want to.</p>\n<p>Publish anywhere by &quot;compiling&quot; your website and hosting the contents on nearly any web-host on the planet. Ruhoh also supports automatic hosting so you don't have to worry about finding or setting up a web-host.</p>\n"
  },
  {
    "title": "s2gen",
    "repo": "denisftw/s2gen",
    "homepage": "http://appliedscala.com/s2gen/",
    "language": ["Scala"],
    "license": ["MIT"],
    "templates": ["Freemarker"],
    "description": "A dead-simple Scala-based site generator",
    "bodyContent": "**s2gen** is a simple static site generator written in Scala. It assumes that you write the content in Markdown and use Freemarker as a template engine. The generator supports watching for file changes and is completely unopinionated about organizing front-end assets.\n\nCheck out [the home page](http://appliedscala.com/s2gen/) for more information about the project including the motivation behind it. You can find the latest documentation [on GitHub](https://github.com/denisftw/s2gen).\n\n### Features\n\n**s2gen** currently supports:\n\n* Parsing content from Markdown files\n* Rendering HTML using Freemarker templates\n* Project skeleton generation\n* Monitoring for file changes\n* Adding `target=\"_blank\"` to external links\n* Generating post URLs without html extensions\n\nThe latest version is available on GitHub [release page](https://github.com/denisftw/s2gen/releases/latest).",
    "bodyHtml": "<p><strong>s2gen</strong> is a simple static site generator written in Scala. It assumes that you write the content in Markdown and use Freemarker as a template engine. The generator supports watching for file changes and is completely unopinionated about organizing front-end assets.</p>\n<p>Check out <a href=\"http://appliedscala.com/s2gen/\">the home page</a> for more information about the project including the motivation behind it. You can find the latest documentation <a href=\"https://github.com/denisftw/s2gen\">on GitHub</a>.</p>\n<h3>Features</h3>\n<p><strong>s2gen</strong> currently supports:</p>\n<ul>\n<li>Parsing content from Markdown files</li>\n<li>Rendering HTML using Freemarker templates</li>\n<li>Project skeleton generation</li>\n<li>Monitoring for file changes</li>\n<li>Adding <code>target=&quot;_blank&quot;</code> to external links</li>\n<li>Generating post URLs without html extensions</li>\n</ul>\n<p>The latest version is available on GitHub <a href=\"https://github.com/denisftw/s2gen/releases/latest\">release page</a>.</p>\n"
  },
  {
    "title": "Sapper.js",
    "repo": "sveltejs/sapper",
    "homepage": "https://sapper.svelte.technology",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Svelte"],
    "description": "Sapper is a framework for building high-performance universal web apps.",
    "startertemplaterepo": "sveltejs/sapper-template",
    "bodyContent": "Sapper is a framework for building high-performance universal web apps. [Read the guide](https://sapper.svelte.technology/guide) or the [introductory blog post](https://svelte.technology/blog/sapper-towards-the-ideal-web-app-framework) to learn more.\n\nIt's like Next.js and Nuxt.js, but faster and smaller because it's powered by [Svelte](https://svelte.technology).",
    "bodyHtml": "<p>Sapper is a framework for building high-performance universal web apps. <a href=\"https://sapper.svelte.technology/guide\">Read the guide</a> or the <a href=\"https://svelte.technology/blog/sapper-towards-the-ideal-web-app-framework\">introductory blog post</a> to learn more.</p>\n<p>It's like Next.js and Nuxt.js, but faster and smaller because it's powered by <a href=\"https://svelte.technology\">Svelte</a>.</p>\n"
  },
  {
    "title": "Sasige",
    "repo": "brainfoolong/sasige",
    "homepage": "http://sasige.0x.at",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["PHP"],
    "description": "One word, TextToWebsite. Sasige will generate static html files and a combination of these is your website.",
    "startertemplaterepo": "brainfoolong/sasige-starter",
    "bodyContent": "In one word: `TextToWebsite`. Sasige will generate static html files and a combination of these is your website. We give you the tools to make a blog alike website, to make a documentation website, to make what every you can imagine. This documentation website you currently read is, for sure, generated with Sasige.\n\n## Why Sasige?\nWe know that we are not the only one that give you such tool. But, we are the one (the only?) that use `PHP` is the script language. You probably know PHP. It's an easy to use and even easier to learn script language. It has the power to do everything. PHP was always designed to use it in combination with websites, so why not using it to generate a static website? If it's not enough, here some more advantages:\n\n* Static sites - Can be hosted everywhere without security concerns\n* Themeable - With SCSS support\n* Markdown / Html / PHP to website for most flexible content\n* Both windows and linux support for the generator\n* Multilanguage - Yes, every page could be written in multiple languages if required\n* Multiple Pagination - You are not limited to have a single pagination method\n* Pagesets - Group pages in custom list's with different filters and sorting\n* Continuous integration - Automatic generation when you update your repository, as we do with [Sasige Docs](https://travis-ci.org/brainfoolong/sasige-docs)\n* Fully batchable\n* Minimum system requirements - Exactly one dependency: PHP, available for every OS",
    "bodyHtml": "<p>In one word: <code>TextToWebsite</code>. Sasige will generate static html files and a combination of these is your website. We give you the tools to make a blog alike website, to make a documentation website, to make what every you can imagine. This documentation website you currently read is, for sure, generated with Sasige.</p>\n<h2>Why Sasige?</h2>\n<p>We know that we are not the only one that give you such tool. But, we are the one (the only?) that use <code>PHP</code> is the script language. You probably know PHP. It's an easy to use and even easier to learn script language. It has the power to do everything. PHP was always designed to use it in combination with websites, so why not using it to generate a static website? If it's not enough, here some more advantages:</p>\n<ul>\n<li>Static sites - Can be hosted everywhere without security concerns</li>\n<li>Themeable - With SCSS support</li>\n<li>Markdown / Html / PHP to website for most flexible content</li>\n<li>Both windows and linux support for the generator</li>\n<li>Multilanguage - Yes, every page could be written in multiple languages if required</li>\n<li>Multiple Pagination - You are not limited to have a single pagination method</li>\n<li>Pagesets - Group pages in custom list's with different filters and sorting</li>\n<li>Continuous integration - Automatic generation when you update your repository, as we do with <a href=\"https://travis-ci.org/brainfoolong/sasige-docs\">Sasige Docs</a></li>\n<li>Fully batchable</li>\n<li>Minimum system requirements - Exactly one dependency: PHP, available for every OS</li>\n</ul>\n"
  },
  {
    "title": "sblg",
    "repo": "kristapsdz/sblg",
    "homepage": "http://kristaps.bsd.lv/sblg",
    "language": ["C"],
    "license": ["ISC"],
    "templates": ["None"],
    "description": "simple off-line blog utility",
    "bodyContent": "sblg is a blog tool for UNIX users. \nIt uses [libexpat](http://expat.sourceforge.net/) to merge content and\ntemplates, both usually in HTML, into formatted HTML articles or Atom\nfeeds.\nThere are no other dependencies.\n\nsblg is built to be driven by a Makefile just like any other development\ntool: articles are like sources compiled into standalone pages, then\nlinked into blog pages.\nSee [sblg(1)](http://kristaps.bsd.lv/sblg/sblg.1.html) for details.",
    "bodyHtml": "<p>sblg is a blog tool for UNIX users.\nIt uses <a href=\"http://expat.sourceforge.net/\">libexpat</a> to merge content and\ntemplates, both usually in HTML, into formatted HTML articles or Atom\nfeeds.\nThere are no other dependencies.</p>\n<p>sblg is built to be driven by a Makefile just like any other development\ntool: articles are like sources compiled into standalone pages, then\nlinked into blog pages.\nSee <a href=\"http://kristaps.bsd.lv/sblg/sblg.1.html\">sblg(1)</a> for details.</p>\n"
  },
  {
    "title": "Scalatic",
    "repo": "padurean/scalatic",
    "homepage": "http://functionalprogramming.ro/scalatic",
    "language": ["Scala"],
    "license": ["MIT"],
    "templates": [],
    "description": "Dead simple static blog generator written in Scala.",
    "bodyContent": "Scalatic is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Scalatic takes your content, renders GitHub flavored Markdown templates using the GitHub API, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. A typical usage of Scalatic is to host blogs using [GitHub Pages](http://pages.github.com), which you can use to host sites right from your GitHub repositories.\n\n### Philosophy\n\nScalatic has been created with simplicity in mind: all you need to do is get the [executable .JAR](https://github.com/padurean/scalatic/releases) and run it using `java -jar scalatic-X.X.X.jar /path/to/your/blog`. The only parameter required is the path to your blog source files. Scalatic gets out of your way and allows you to concentrate on what truly matters: your content.",
    "bodyHtml": "<p>Scalatic is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Scalatic takes your content, renders GitHub flavored Markdown templates using the GitHub API, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. A typical usage of Scalatic is to host blogs using <a href=\"http://pages.github.com\">GitHub Pages</a>, which you can use to host sites right from your GitHub repositories.</p>\n<h3>Philosophy</h3>\n<p>Scalatic has been created with simplicity in mind: all you need to do is get the <a href=\"https://github.com/padurean/scalatic/releases\">executable .JAR</a> and run it using <code>java -jar scalatic-X.X.X.jar /path/to/your/blog</code>. The only parameter required is the path to your blog source files. Scalatic gets out of your way and allows you to concentrate on what truly matters: your content.</p>\n"
  },
  {
    "title": "Scribing",
    "repo": "elazar/scribing",
    "homepage": "https://github.com/elazar/scribing",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Plates"],
    "description": "Scribing is a static site generator written in PHP",
    "bodyContent": "Scribing is a static site generator written in PHP that favors convention over configuration and is designed for blogs and other simple sites. It converts CommonMark content and Plates templates into a static HTML site that can be easily deployed.\n\n### Why Scribing?\n\nSimple well-documented PHP static site generator. Fast and easy to get a simple static blog or other site built with content written in Markdown.\n\nSupports installation and updates using Composer.\n\n[Plates](http://platesphp.com/) templates. Plates is a full-featured modern PHP template engine inspired by Twig that is simple to learn, well-documented, flexible, and extensible.",
    "bodyHtml": "<p>Scribing is a static site generator written in PHP that favors convention over configuration and is designed for blogs and other simple sites. It converts CommonMark content and Plates templates into a static HTML site that can be easily deployed.</p>\n<h3>Why Scribing?</h3>\n<p>Simple well-documented PHP static site generator. Fast and easy to get a simple static blog or other site built with content written in Markdown.</p>\n<p>Supports installation and updates using Composer.</p>\n<p><a href=\"http://platesphp.com/\">Plates</a> templates. Plates is a full-featured modern PHP template engine inspired by Twig that is simple to learn, well-documented, flexible, and extensible.</p>\n"
  },
  {
    "title": "Sculpin",
    "repo": "sculpin/sculpin",
    "homepage": "https://sculpin.io",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig"],
    "description": "Sculpin is a static site generator written in PHP",
    "bodyContent": "Sculpin is a static site generator written in PHP. It converts Markdown files, Twig templates or standard HTML into a static HTML site that can be easily deployed.\n\n### Why Sculpin?\n\nPHP static site generator. Fast and easy to get started. If your language of choice is PHP, you'll feel right at home if you need to extend Sculpin.\n\nEmbedded Composer. Forget about managing library versions manually! Sculpin embeds Composer to keep your source control focused and projects consistent.\n\nTwig templates. Twig is a full-featured modern template engine. It's simple to learn and it is extendable, documented, concise and flexible.\n\nSymfony's HTTP Kernel. Sculpin is built on it. This lets you use Symfony Bundles to extend Sculpin for any advanced functionality you need without extending Sculpin directly.",
    "bodyHtml": "<p>Sculpin is a static site generator written in PHP. It converts Markdown files, Twig templates or standard HTML into a static HTML site that can be easily deployed.</p>\n<h3>Why Sculpin?</h3>\n<p>PHP static site generator. Fast and easy to get started. If your language of choice is PHP, you'll feel right at home if you need to extend Sculpin.</p>\n<p>Embedded Composer. Forget about managing library versions manually! Sculpin embeds Composer to keep your source control focused and projects consistent.</p>\n<p>Twig templates. Twig is a full-featured modern template engine. It's simple to learn and it is extendable, documented, concise and flexible.</p>\n<p>Symfony's HTTP Kernel. Sculpin is built on it. This lets you use Symfony Bundles to extend Sculpin for any advanced functionality you need without extending Sculpin directly.</p>\n"
  },
  {
    "title": "Serif",
    "repo": "aprescott/serif",
    "homepage": "https://aprescott.com/posts/serif",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Liquid"],
    "description": "Serif is a static site generator and an optional admin interface",
    "bodyContent": "Serif is a static site generator and blogging system powered by markdown files and an optional admin interface complete with drag-and-drop image uploading. ([Check out the simple video demo](https://docs.google.com/open?id=0BxPQpxGSOOyKS1J4MmlnM3JIaXM).)\n\nSerif releases you from managing a file system so you can focus on writing content.\n\nHaving problems with Serif? [Open an issue on GitHub](https://github.com/aprescott/serif/issues), use the [Serif Google Group](https://groups.google.com/forum/#!forum/serif-rb), or join the Freenode#serif IRC channel at irc://irc.freenode.net/serif.\n\n### Intro\n\nSerif is a lot like Jekyll with a few extra moving parts. Its main aim is to provide two things:\n\n1. Simplicity: the source and generated content are just files that can be served by any web server.\n2. Ease of publishing, wherever you are.\n\nSerif is sort of a blend between Jekyll, [Second Crack](https://github.com/marcoarment/secondcrack) and ideas from [Svbtle](http://dcurt.is/codename-svbtle). There should be flexibility with writing content, such as using the web interface, `rsync`ing from a remote machine, or editing a draft file on the remote server and having everything happen for you.",
    "bodyHtml": "<p>Serif is a static site generator and blogging system powered by markdown files and an optional admin interface complete with drag-and-drop image uploading. (<a href=\"https://docs.google.com/open?id=0BxPQpxGSOOyKS1J4MmlnM3JIaXM\">Check out the simple video demo</a>.)</p>\n<p>Serif releases you from managing a file system so you can focus on writing content.</p>\n<p>Having problems with Serif? <a href=\"https://github.com/aprescott/serif/issues\">Open an issue on GitHub</a>, use the <a href=\"https://groups.google.com/forum/#!forum/serif-rb\">Serif Google Group</a>, or join the Freenode#serif IRC channel at irc://irc.freenode.net/serif.</p>\n<h3>Intro</h3>\n<p>Serif is a lot like Jekyll with a few extra moving parts. Its main aim is to provide two things:</p>\n<ol>\n<li>Simplicity: the source and generated content are just files that can be served by any web server.</li>\n<li>Ease of publishing, wherever you are.</li>\n</ol>\n<p>Serif is sort of a blend between Jekyll, <a href=\"https://github.com/marcoarment/secondcrack\">Second Crack</a> and ideas from <a href=\"http://dcurt.is/codename-svbtle\">Svbtle</a>. There should be flexibility with writing content, such as using the web interface, <code>rsync</code>ing from a remote machine, or editing a draft file on the remote server and having everything happen for you.</p>\n"
  },
  {
    "title": "Serum",
    "repo": "Dalgona/Serum",
    "homepage": "https://github.com/Dalgona/Serum",
    "language": ["Elixir"],
    "license": ["MIT"],
    "templates": ["EEx"],
    "description": "A simple static website generator written in Elixir.",
    "bodyContent": "Serum is yet another static website generator written in [Elixir Programming Language](http://elixir-lang.org). The goal of this project is to provide the way to create awesome static websites with little effort. Powered by super-lightweight Erlang processes, Serum can build hundreds of pages simultaneously, enabling fast live tests (using Serum development server) and fast deployment of your website.\n\nCheck [the sample website](http://include.iostream.kr/serum-sample) to see what Serum can do! The official website of Serum is under construction and will take position of the sample site.",
    "bodyHtml": "<p>Serum is yet another static website generator written in <a href=\"http://elixir-lang.org\">Elixir Programming Language</a>. The goal of this project is to provide the way to create awesome static websites with little effort. Powered by super-lightweight Erlang processes, Serum can build hundreds of pages simultaneously, enabling fast live tests (using Serum development server) and fast deployment of your website.</p>\n<p>Check <a href=\"http://include.iostream.kr/serum-sample\">the sample website</a> to see what Serum can do! The official website of Serum is under construction and will take position of the sample site.</p>\n"
  },
  {
    "title": "Silex",
    "repo": "silexlabs/Silex",
    "homepage": "http://www.silex.me",
    "language": ["JavaScript"],
    "license": ["GNU GPL v3.0"],
    "templates": ["HTML"],
    "description": "A drag and drop editor mixed with an online CSS editor",
    "bodyContent": "With [Silex website builder](http://www.silex.me), web designers create static HTML websites online. \n\nOnly the common settings are available in the visual editor, so that when you will need more, Silex helps you write CSS without leaving the browser. No complex dialogs and menus, just the open web standards. What you learn here will be useful to you.\n\n\n\n\nFeatures\n========\n* Combine drag and drop and CSS editor\n* Built-in page system, rich text editor, sync with Dropbox and FTP, SEO\n* Available [online](http://editor.silex.me) or [host it yourself on heroku or other node.js hosts](https://github.com/silexlabs/Silex#host-an-instance-of-silex)\n* Maintained by [Silex Labs non-profit organization](http://www.silexlabs.org/silexlabs/#about-silex-labs), we’re free to innovate without any pressure to compromise\n* Loaded with a growing number of [templates (free or paid)](https://github.com/silexlabs/Silex/labels/template)",
    "bodyHtml": "<p>With <a href=\"http://www.silex.me\">Silex website builder</a>, web designers create static HTML websites online.</p>\n<p>Only the common settings are available in the visual editor, so that when you will need more, Silex helps you write CSS without leaving the browser. No complex dialogs and menus, just the open web standards. What you learn here will be useful to you.</p>\n<h1>Features</h1>\n<ul>\n<li>Combine drag and drop and CSS editor</li>\n<li>Built-in page system, rich text editor, sync with Dropbox and FTP, SEO</li>\n<li>Available <a href=\"http://editor.silex.me\">online</a> or <a href=\"https://github.com/silexlabs/Silex#host-an-instance-of-silex\">host it yourself on heroku or other node.js hosts</a></li>\n<li>Maintained by <a href=\"http://www.silexlabs.org/silexlabs/#about-silex-labs\">Silex Labs non-profit organization</a>, we’re free to innovate without any pressure to compromise</li>\n<li>Loaded with a growing number of <a href=\"https://github.com/silexlabs/Silex/labels/template\">templates (free or paid)</a></li>\n</ul>\n"
  },
  {
    "title": "simple-website",
    "repo": "alexanderte/simple-website",
    "homepage": "https://github.com/alexanderte/simple-website",
    "language": ["Go"],
    "license": ["MIT"],
    "templates": ["Markdown"],
    "description": "simple-website is a static site generator written in Go",
    "bodyContent": "simple-website is a static site generator written in Go. It takes Markdown as input, and gives you a static, simple, and responsive website as output. Posts and pages are supported.\n\nsimple-website has been designed with technical simplicity and readability in mind – there are no configuration options and no themes to choose from. The workflow is simple – initialize a website using `simple-website`, create and/or edit Markdown files, run `simple-website` again – and publish.\n\n## Get it\n\n    go get github.com/alexanderte/simple-website\n\n## Initialize website\n\n    mkdir title-of-website\n    cd title-of-website\n    $GOPATH/bin/simple-website\n\n## Create content\n\n    $EDITOR _sections/header.md\n    $EDITOR _posts/YYYY-MM-DD-title-of-post.md\n    $EDITOR _pages/title-of-page.md\n\n## Regenerate\n\n    $GOPATH/bin/simple-website\n\n## MIT License\n\nCopyright © 2018 Alexander Teinum\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "bodyHtml": "<p>simple-website is a static site generator written in Go. It takes Markdown as input, and gives you a static, simple, and responsive website as output. Posts and pages are supported.</p>\n<p>simple-website has been designed with technical simplicity and readability in mind – there are no configuration options and no themes to choose from. The workflow is simple – initialize a website using <code>simple-website</code>, create and/or edit Markdown files, run <code>simple-website</code> again – and publish.</p>\n<h2>Get it</h2>\n<pre><code>go get github.com/alexanderte/simple-website\n</code></pre>\n<h2>Initialize website</h2>\n<pre><code>mkdir title-of-website\ncd title-of-website\n$GOPATH/bin/simple-website\n</code></pre>\n<h2>Create content</h2>\n<pre><code>$EDITOR _sections/header.md\n$EDITOR _posts/YYYY-MM-DD-title-of-post.md\n$EDITOR _pages/title-of-page.md\n</code></pre>\n<h2>Regenerate</h2>\n<pre><code>$GOPATH/bin/simple-website\n</code></pre>\n<h2>MIT License</h2>\n<p>Copyright © 2018 Alexander Teinum</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n"
  },
  {
    "title": "simple",
    "repo": "isnowfy/simple",
    "homepage": "http://isnowfy.github.io/simple/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Markdown"],
    "description": "Simple is a pure static static blog generator.",
    "bodyContent": "#Simple\n\nSimple is a static blog generator with a single static page. You can write you blog online, and it will generate static html files at your repo named `username.github.io` which is supported by [github pages](https://pages.github.com)\n\n##Demo\n\n[Simple](http://isnowfy.github.io/simple)\n\n[Blog demo](http://isnowfy.github.io/)\n\n[Lightweight markdown editor](http://isnowfy.github.io/simple/editor.html)\n\n##Usage\n\nWith Simple and github pages you can easily create your static blog. Here is what you need to do.\n\n1. Create a github account.\n2. Create a repo named `your_user_name.github.io` (remember to check `Initilize and create README`).\n3. Sign in [Simple](http://isnowfy.github.io/simple) with your github account.\n4. Click `Initilize` to set up basic files for your static blog site.(maybe a little slow)\n5. Click `Go` and start writing.\n6. Click `New post` to create a new post and when finish writing click `save` to generate the static page.\n7. Now you can browse the `your_user_name.github.io` site and enjoy it!\n\n![simple](https://isnowfy.github.io/img/Simple.png)\n\n* You can use your own blog name, just modify the `main.json` file, and change `name=\"username\"`.\n\n* You can use disqus comment system, just modify the `main.json` file, and change `disqus_shortname=\"\"` to `disqus_shortname=\"your_shortname\"`.\n\n* You can use your own custom domain, just modify the `CNAME` file.(see [also](https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages))\n\n##Features\n\n* Simple, no backend need\n* Static blog\n* Markdown editor\n* Code highlight support\n* Tex formula support\n* Responsive html\n\n##Custom\n\nThe template files are at `/src/template`, so you can modify the template files and css files. If you want use your own theme you can clone the project, modify the template files and push the entire `src` folder in your `gh-pages` branch which will allow you generate your own static blog.\n\n##Todo\n\nEnhance error display, Search, Sitemap, Rss\n\n##License\n\nMIT licensed.",
    "bodyHtml": "<p>#Simple</p>\n<p>Simple is a static blog generator with a single static page. You can write you blog online, and it will generate static html files at your repo named <code>username.github.io</code> which is supported by <a href=\"https://pages.github.com\">github pages</a></p>\n<p>##Demo</p>\n<p><a href=\"http://isnowfy.github.io/simple\">Simple</a></p>\n<p><a href=\"http://isnowfy.github.io/\">Blog demo</a></p>\n<p><a href=\"http://isnowfy.github.io/simple/editor.html\">Lightweight markdown editor</a></p>\n<p>##Usage</p>\n<p>With Simple and github pages you can easily create your static blog. Here is what you need to do.</p>\n<ol>\n<li>Create a github account.</li>\n<li>Create a repo named <code>your_user_name.github.io</code> (remember to check <code>Initilize and create README</code>).</li>\n<li>Sign in <a href=\"http://isnowfy.github.io/simple\">Simple</a> with your github account.</li>\n<li>Click <code>Initilize</code> to set up basic files for your static blog site.(maybe a little slow)</li>\n<li>Click <code>Go</code> and start writing.</li>\n<li>Click <code>New post</code> to create a new post and when finish writing click <code>save</code> to generate the static page.</li>\n<li>Now you can browse the <code>your_user_name.github.io</code> site and enjoy it!</li>\n</ol>\n<p><img src=\"https://isnowfy.github.io/img/Simple.png\" alt=\"simple\"></p>\n<ul>\n<li>\n<p>You can use your own blog name, just modify the <code>main.json</code> file, and change <code>name=&quot;username&quot;</code>.</p>\n</li>\n<li>\n<p>You can use disqus comment system, just modify the <code>main.json</code> file, and change <code>disqus_shortname=&quot;&quot;</code> to <code>disqus_shortname=&quot;your_shortname&quot;</code>.</p>\n</li>\n<li>\n<p>You can use your own custom domain, just modify the <code>CNAME</code> file.(see <a href=\"https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages\">also</a>)</p>\n</li>\n</ul>\n<p>##Features</p>\n<ul>\n<li>Simple, no backend need</li>\n<li>Static blog</li>\n<li>Markdown editor</li>\n<li>Code highlight support</li>\n<li>Tex formula support</li>\n<li>Responsive html</li>\n</ul>\n<p>##Custom</p>\n<p>The template files are at <code>/src/template</code>, so you can modify the template files and css files. If you want use your own theme you can clone the project, modify the template files and push the entire <code>src</code> folder in your <code>gh-pages</code> branch which will allow you generate your own static blog.</p>\n<p>##Todo</p>\n<p>Enhance error display, Search, Sitemap, Rss</p>\n<p>##License</p>\n<p>MIT licensed.</p>\n"
  },
  {
    "title": "SitePipe",
    "repo": "ChrisPenner/SitePipe",
    "homepage": "https://github.com/ChrisPenner/SitePipe",
    "language": ["Haskell"],
    "license": ["BSD 3-Clause"],
    "templates": ["Mustache"],
    "description": "Yet another static site generator - non-opinionated, value-level. Less magic == easier to understand",
    "bodyContent": "It's a simple to understand static site generator for making blogs, personal\nwebsites, etc.\n\nInstead of dealing with complex contexts SitePipe works with *values*. Values\nare loaded from files and can be rendered into html. What happens to the values\nin-between is up to you!\n\nSitePipe provides a bunch of helpers for you, but at the end of the day you can\nfit the pipes together however you like.",
    "bodyHtml": "<p>It's a simple to understand static site generator for making blogs, personal\nwebsites, etc.</p>\n<p>Instead of dealing with complex contexts SitePipe works with <em>values</em>. Values\nare loaded from files and can be rendered into html. What happens to the values\nin-between is up to you!</p>\n<p>SitePipe provides a bunch of helpers for you, but at the end of the day you can\nfit the pipes together however you like.</p>\n"
  },
  {
    "title": "Sitio",
    "repo": "fiatjaf/sitio",
    "homepage": "https://github.com/fiatjaf/sitio",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["React"],
    "description": "An imperative static site generator built with React and browserify",
    "bodyContent": "Take any sources -- Markdown or other documents, API calls, databases, headless CMSs --, process them using **sitio** helpers or on your own way, then render pages. No need to adjust your files to some predefined pattern or tree structure, place them wherever you want and write your own code that finds them (although some helpers are provided).\n\nYou can write dynamic components and embed them in the pages, like placing SPA-like functionality in a section of your site, or embedding maps, pickers, dynamic forms or other kinds of functionality in the middle of a blog article.\n\nSince everythings is statically rendered, the generated site works on environments without JavaScript (except, of course, dynamic components), but if JavaScript is present the browsing experience will be super smooth and fast, without full page reloads.\n\nAlso, only the skeleton (basic components and code) of the site/app is loaded statically, all the data specific for each page is loaded asynchronously and dinamically while the visitor is browsing.",
    "bodyHtml": "<p>Take any sources -- Markdown or other documents, API calls, databases, headless CMSs --, process them using <strong>sitio</strong> helpers or on your own way, then render pages. No need to adjust your files to some predefined pattern or tree structure, place them wherever you want and write your own code that finds them (although some helpers are provided).</p>\n<p>You can write dynamic components and embed them in the pages, like placing SPA-like functionality in a section of your site, or embedding maps, pickers, dynamic forms or other kinds of functionality in the middle of a blog article.</p>\n<p>Since everythings is statically rendered, the generated site works on environments without JavaScript (except, of course, dynamic components), but if JavaScript is present the browsing experience will be super smooth and fast, without full page reloads.</p>\n<p>Also, only the skeleton (basic components and code) of the site/app is loaded statically, all the data specific for each page is loaded asynchronously and dinamically while the visitor is browsing.</p>\n"
  },
  {
    "title": "SKF",
    "repo": "moebiuseye/skf",
    "homepage": "http://skf.jeannedhack.org/",
    "language": ["Bash"],
    "license": ["GNU GPL v3.0"],
    "templates": ["Custom"],
    "description": "Plugin-based static website generator inspired by Suckless Web Framework.",
    "bodyContent": "## Goal\n\nStatiKiss Framework concentrates on performance and simplicity. \nPlugins can be created very easily. \n\nThe three themes (Default, Redish and Split) are responsive and \ntry to be as small as possible.",
    "bodyHtml": "<h2>Goal</h2>\n<p>StatiKiss Framework concentrates on performance and simplicity.\nPlugins can be created very easily.</p>\n<p>The three themes (Default, Redish and Split) are responsive and\ntry to be as small as possible.</p>\n"
  },
  {
    "title": "SkyDocs",
    "repo": "Skyost/SkyDocs",
    "homepage": "https://skyost.github.io/SkyDocs/",
    "language": ["Java"],
    "license": ["GNU GPL v3.0"],
    "templates": ["Jtwig"],
    "description": "SkyDocs is a lightweight static documentation builder with MarkDown.",
    "bodyContent": "## Overview\n\nSkyDocs is a software that takes your [MarkDown files](https://blog.ghost.org/markdown/) and build a complete website with some magic tricks !    \nYou can configure everything you want : themes, pages, menus, ...\n\n## Features\n\n* Lightweight\n* Cross-system (you need [Java](https://java.com/download))\n* Write your documentation in MarkDown\n* Use [jtwig](http://jtwig.org/documentation/reference/functions) template engine\n* Host it anywhere : it's static !\n* Responsive and HTML5 valid theme provided\n* Generate a multi-language documentation\n* Fast building\n* Automatically minifies CSS and JS files in production mode.\n* A lot more !\n\n## Documentation\n\nEverything you need to know is available on [the website](https://skyost.github.io/SkyDocs/).",
    "bodyHtml": "<h2>Overview</h2>\n<p>SkyDocs is a software that takes your <a href=\"https://blog.ghost.org/markdown/\">MarkDown files</a> and build a complete website with some magic tricks !<br>\nYou can configure everything you want : themes, pages, menus, ...</p>\n<h2>Features</h2>\n<ul>\n<li>Lightweight</li>\n<li>Cross-system (you need <a href=\"https://java.com/download\">Java</a>)</li>\n<li>Write your documentation in MarkDown</li>\n<li>Use <a href=\"http://jtwig.org/documentation/reference/functions\">jtwig</a> template engine</li>\n<li>Host it anywhere : it's static !</li>\n<li>Responsive and HTML5 valid theme provided</li>\n<li>Generate a multi-language documentation</li>\n<li>Fast building</li>\n<li>Automatically minifies CSS and JS files in production mode.</li>\n<li>A lot more !</li>\n</ul>\n<h2>Documentation</h2>\n<p>Everything you need to know is available on <a href=\"https://skyost.github.io/SkyDocs/\">the website</a>.</p>\n"
  },
  {
    "title": "Spelt",
    "repo": "njdehoog/Spelt",
    "homepage": "https://github.com/njdehoog/Spelt",
    "language": ["Swift"],
    "license": ["MIT"],
    "templates": ["Stencil"],
    "description": "Delightfully simple static site generator written in Swift.",
    "bodyContent": "Spelt is a blog-aware static site generator written in Swift.",
    "bodyHtml": "<p>Spelt is a blog-aware static site generator written in Swift.</p>\n"
  },
  {
    "title": "Sphido",
    "repo": "sphido/sphido",
    "homepage": "https://sphido.org/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Nunjucks"],
    "description": "A rocket fast, lightweight, static site generator.",
    "twitter": "ozzyczech",
    "bodyContent": "Sphido is pure **static site generator** written with speed, simplicity and flexibility in mind.\n\n## Installation\n\n```bash \n$ npm i sphido\n```\n\n## Usage\n\n```javascript\nconst globby = require('globby');\nconst Sphido = require('sphido');\n\n(async () => {\n\n  // 1. get list of pages...\n  const pages = await Sphido.getPages(\n    await globby('content/**/*.{md,html}'), ...Sphido.extenders //, custom extenders...\n  );\n  // 2. save them... with default HTML template\n  for await (const page of pages)    \n    await page.save(page.dir.replace('content', 'public'));\n  }\n})();\n```\n\n[See more examples](https://github.com/sphido/sphido/tree/master/examples) on GitHub.\n\n## Supports\n\n* YAML front-matter\n* html/markdown source\n* custom extenders\n* Nunjucks templates",
    "bodyHtml": "<p>Sphido is pure <strong>static site generator</strong> written with speed, simplicity and flexibility in mind.</p>\n<h2>Installation</h2>\n<pre><code class=\"hljs\">$ npm i sphido</code></pre><h2>Usage</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> globby = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'globby'</span>);\n<span class=\"hljs-keyword\">const</span> Sphido = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'sphido'</span>);\n\n<span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-keyword\">async</span> (</span>) =&gt;</span> {\n\n  <span class=\"hljs-comment\">// 1. get list of pages...</span>\n  <span class=\"hljs-keyword\">const</span> pages = <span class=\"hljs-keyword\">await</span> Sphido.getPages(\n    <span class=\"hljs-keyword\">await</span> globby(<span class=\"hljs-string\">'content/**/*.{md,html}'</span>), ...Sphido.extenders <span class=\"hljs-comment\">//, custom extenders...</span>\n  );\n  <span class=\"hljs-comment\">// 2. save them... with default HTML template</span>\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> page <span class=\"hljs-keyword\">of</span> pages)    \n    <span class=\"hljs-keyword\">await</span> page.save(page.dir.replace(<span class=\"hljs-string\">'content'</span>, <span class=\"hljs-string\">'public'</span>));\n  }\n})();</code></pre><p><a href=\"https://github.com/sphido/sphido/tree/master/examples\">See more examples</a> on GitHub.</p>\n<h2>Supports</h2>\n<ul>\n<li>YAML front-matter</li>\n<li>html/markdown source</li>\n<li>custom extenders</li>\n<li>Nunjucks templates</li>\n</ul>\n"
  },
  {
    "title": "Sphinx",
    "repo": "sphinx-doc/sphinx",
    "homepage": "http://www.sphinx-doc.org/",
    "language": ["Python"],
    "license": ["BSD 2-Clause"],
    "templates": ["Jinja2"],
    "description": "A tool that makes it easy to create intelligent and beautiful documentation, written by Georg Brandl.",
    "bodyContent": "Sphinx is a tool that makes it easy to create intelligent and beautiful documentation, written by Georg Brandl and\nlicensed under the BSD license.\n\nIt was originally created for the new Python documentation, and it has excellent facilities for the documentation of\nPython projects, but C/C++ is already supported as well, and it is planned to add special support for other languages as\nwell. Of course, this site is also created from reStructuredText sources using Sphinx! The following features should be highlighted:\n\n- **Output formats**: HTML (including Windows HTML Help), LaTeX (for printable PDF versions), ePub, Texinfo, manual pages, plain text\n- **Extensive cross-references**: semantic markup and automatic links for functions, classes, citations, glossary terms and similar pieces of information\n- **Hierarchical structure**: easy definition of a document tree, with automatic links to siblings, parents and children\n- **Automatic indices**: general index as well as a language-specific module indices\n- **Code handling**: automatic highlighting using the Pygments highlighter\n- **Extensions**: automatic testing of code snippets, inclusion of docstrings from Python modules (API docs), and more\n- **Contributed extensions**: more than 50 extensions contributed by users in a second repository; most of them installable from PyPI\n\nSphinx uses reStructuredText as its markup language, and many of its strengths come from the power and straightforwardness of reStructuredText and its parsing and translating suite, the Docutils.",
    "bodyHtml": "<p>Sphinx is a tool that makes it easy to create intelligent and beautiful documentation, written by Georg Brandl and\nlicensed under the BSD license.</p>\n<p>It was originally created for the new Python documentation, and it has excellent facilities for the documentation of\nPython projects, but C/C++ is already supported as well, and it is planned to add special support for other languages as\nwell. Of course, this site is also created from reStructuredText sources using Sphinx! The following features should be highlighted:</p>\n<ul>\n<li><strong>Output formats</strong>: HTML (including Windows HTML Help), LaTeX (for printable PDF versions), ePub, Texinfo, manual pages, plain text</li>\n<li><strong>Extensive cross-references</strong>: semantic markup and automatic links for functions, classes, citations, glossary terms and similar pieces of information</li>\n<li><strong>Hierarchical structure</strong>: easy definition of a document tree, with automatic links to siblings, parents and children</li>\n<li><strong>Automatic indices</strong>: general index as well as a language-specific module indices</li>\n<li><strong>Code handling</strong>: automatic highlighting using the Pygments highlighter</li>\n<li><strong>Extensions</strong>: automatic testing of code snippets, inclusion of docstrings from Python modules (API docs), and more</li>\n<li><strong>Contributed extensions</strong>: more than 50 extensions contributed by users in a second repository; most of them installable from PyPI</li>\n</ul>\n<p>Sphinx uses reStructuredText as its markup language, and many of its strengths come from the power and straightforwardness of reStructuredText and its parsing and translating suite, the Docutils.</p>\n"
  },
  {
    "title": "Spike",
    "repo": "static-dev/spike",
    "homepage": "https://spike.js.org/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Reshape"],
    "description": "An opinionated static build tool, powered by webpack",
    "bodyContent": "## Why should you care?\n\n[We](https://github.com/carrot) [❤](http://giphy.com/gifs/steve-carell-cute-the-office-Yb8ebQV8Ua2Y0/tile) [static](https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/).\n\nIf you're building a website or client-side app – then :cactus: spike is probably for you. Spike aims to be simple, efficient, and a pleasure to use.\n\nSpike certainly is not the only [static site generator](https://www.staticgen.com/) out there, but in our opinion, it's the most powerful and easiest to use.\n\n> Spike is from the same [team](https://github.com/carrot) that brought you [Roots](http://roots.cx). The thinking behind moving past Roots is explained in [this article](https://medium.com/@jescalan/eaa10c75eb22). Please feel free to comment and contribute.\n\n### The Stack\n\nSpike is fairly strict in enforcing a default stack. However, the stack allows for quite a large amount of flexibility as both the css and js parsers are able to accept plugins. Also spike's core compiler is [Webpack](https://github.com/webpack/webpack), so you can customize your project with [loaders](https://webpack.github.io/docs/loaders.html) and [plugins](https://webpack.github.io/docs/plugins.html). The inflexibility of the stack means faster compiles and better stability. We use...\n\n- [Webpack](https://webpack.github.io/) as the core compiler and javascript bundler\n- [Postcss](http://postcss.org/) for css\n- [Reshape](https://github.com/reshape/reshape) for html\n- [Babel](http://babeljs.io/) for javascript",
    "bodyHtml": "<h2>Why should you care?</h2>\n<p><a href=\"https://github.com/carrot\">We</a> <a href=\"http://giphy.com/gifs/steve-carell-cute-the-office-Yb8ebQV8Ua2Y0/tile\">❤</a> <a href=\"https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/\">static</a>.</p>\n<p>If you're building a website or client-side app – then :cactus: spike is probably for you. Spike aims to be simple, efficient, and a pleasure to use.</p>\n<p>Spike certainly is not the only <a href=\"https://www.staticgen.com/\">static site generator</a> out there, but in our opinion, it's the most powerful and easiest to use.</p>\n<blockquote>\n<p>Spike is from the same <a href=\"https://github.com/carrot\">team</a> that brought you <a href=\"http://roots.cx\">Roots</a>. The thinking behind moving past Roots is explained in <a href=\"https://medium.com/@jescalan/eaa10c75eb22\">this article</a>. Please feel free to comment and contribute.</p>\n</blockquote>\n<h3>The Stack</h3>\n<p>Spike is fairly strict in enforcing a default stack. However, the stack allows for quite a large amount of flexibility as both the css and js parsers are able to accept plugins. Also spike's core compiler is <a href=\"https://github.com/webpack/webpack\">Webpack</a>, so you can customize your project with <a href=\"https://webpack.github.io/docs/loaders.html\">loaders</a> and <a href=\"https://webpack.github.io/docs/plugins.html\">plugins</a>. The inflexibility of the stack means faster compiles and better stability. We use...</p>\n<ul>\n<li><a href=\"https://webpack.github.io/\">Webpack</a> as the core compiler and javascript bundler</li>\n<li><a href=\"http://postcss.org/\">Postcss</a> for css</li>\n<li><a href=\"https://github.com/reshape/reshape\">Reshape</a> for html</li>\n<li><a href=\"http://babeljs.io/\">Babel</a> for javascript</li>\n</ul>\n"
  },
  {
    "title": "Spress",
    "repo": "spress/spress",
    "homepage": "http://spress.yosymfony.com",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig"],
    "description": "Spress is a static site generator and blog engine written in PHP",
    "bodyContent": "Spress is a static site generator built with Symfony components. Spress allows you write a blog and create site for \npublish events, information about your product or create landing pages.\n\n* Create your blog or web site with your favorite text editor in Markdown.\n* You can write themes and plugins to make it more awesome.\n* Create amazing templates powered by Twig template engine.\n* Completely static output.\n* Easy deploy.\n\n### How does it work?\nSpress works in few simple steps:\n\n* Read all files in your site directory.\n* Converts Markdown files, Twig templates or standard HTML into a static HTML site.\n* Write the results to a destination directory.",
    "bodyHtml": "<p>Spress is a static site generator built with Symfony components. Spress allows you write a blog and create site for\npublish events, information about your product or create landing pages.</p>\n<ul>\n<li>Create your blog or web site with your favorite text editor in Markdown.</li>\n<li>You can write themes and plugins to make it more awesome.</li>\n<li>Create amazing templates powered by Twig template engine.</li>\n<li>Completely static output.</li>\n<li>Easy deploy.</li>\n</ul>\n<h3>How does it work?</h3>\n<p>Spress works in few simple steps:</p>\n<ul>\n<li>Read all files in your site directory.</li>\n<li>Converts Markdown files, Twig templates or standard HTML into a static HTML site.</li>\n<li>Write the results to a destination directory.</li>\n</ul>\n"
  },
  {
    "title": "StaGen",
    "repo": "wiztools/stagen",
    "homepage": "https://github.com/wiztools/stagen",
    "language": ["Java"],
    "license": ["Apache 2.0"],
    "templates": ["StringTemplate"],
    "description": "StaGen is the static site generator behind WizTools.org",
    "bodyContent": "StaGen is the static site generator behind [WizTools.org](http://www.wiztools.org/).\n\nStaGen is written in Java 8, and supports:\n\n* [Markdown](https://daringfireball.net/projects/markdown/) for content.\n* [StringTemplate 4](http://www.stringtemplate.org/) for templating.\n* [JSON](http://www.json.org/) for storing configuration.\n\nRead the [tutorial](https://github.com/wiztools/stagen/wiki/Tutorial).\n\n### Extensible\n\nAt the core of StaGen engine, Guice is used for wiring the implementations with the interfaces. StaGen can be easily extended to support any new format.\n\n### Deliberately Minimalist\n\nThis static site generator was developed for maintaining a site like [WizTools.org](http://www.wiztools.org/). This is best suited for sites that have few pages generated out of few templates. We do not support themes or blog-like-static-pages. Of course, by nature of flexibility of StaGen, support for themes and blogs can be easily hacked into a StaGen site.\n\nRead the [tutorial](https://github.com/wiztools/stagen/wiki/Tutorial) to get started.",
    "bodyHtml": "<p>StaGen is the static site generator behind <a href=\"http://www.wiztools.org/\">WizTools.org</a>.</p>\n<p>StaGen is written in Java 8, and supports:</p>\n<ul>\n<li><a href=\"https://daringfireball.net/projects/markdown/\">Markdown</a> for content.</li>\n<li><a href=\"http://www.stringtemplate.org/\">StringTemplate 4</a> for templating.</li>\n<li><a href=\"http://www.json.org/\">JSON</a> for storing configuration.</li>\n</ul>\n<p>Read the <a href=\"https://github.com/wiztools/stagen/wiki/Tutorial\">tutorial</a>.</p>\n<h3>Extensible</h3>\n<p>At the core of StaGen engine, Guice is used for wiring the implementations with the interfaces. StaGen can be easily extended to support any new format.</p>\n<h3>Deliberately Minimalist</h3>\n<p>This static site generator was developed for maintaining a site like <a href=\"http://www.wiztools.org/\">WizTools.org</a>. This is best suited for sites that have few pages generated out of few templates. We do not support themes or blog-like-static-pages. Of course, by nature of flexibility of StaGen, support for themes and blogs can be easily hacked into a StaGen site.</p>\n<p>Read the <a href=\"https://github.com/wiztools/stagen/wiki/Tutorial\">tutorial</a> to get started.</p>\n"
  },
  {
    "title": "Stasis",
    "repo": "winton/stasis",
    "homepage": "http://stasis.me/",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Tilt", "ERB", "Haml"],
    "description": "Static Sites Made Powerful with Ruby gems.",
    "bodyContent": "Stasis is a dynamic framework for static sites.\n\nAt its most essential, Stasis takes a directory tree with [supported template files](#supported_markup_languages) and renders them.\n\nExample directory structure:\n\n<!-- language:console -->\n\n    project/\n        index.html.haml\n        images/\n            image.png",
    "bodyHtml": "<p>Stasis is a dynamic framework for static sites.</p>\n<p>At its most essential, Stasis takes a directory tree with <a href=\"#supported_markup_languages\">supported template files</a> and renders them.</p>\n<p>Example directory structure:</p>\n<p>&lt;!-- language:console --&gt;</p>\n<pre><code>project/\n    index.html.haml\n    images/\n        image.png</code></pre>\n"
  },
  {
    "title": "Stati",
    "repo": "jfoucher/stati",
    "homepage": "https://stati.jfoucher.com",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Liquid"],
    "description": "Stati is an extensible PHP static site generator that can work with existing Jekyll sites.",
    "bodyContent": "Stati is an extensible PHP static site generator that can generate your existing Jekyll sites.\n\nJekyll is one of the most popular static site generator, but unfortunately for those of\nus not proficient in ruby, it cannot be extended that easily.\n\nStati solves that, with it's clear plugin architecture based on the Symfony Event Dispatcher component, your plugin can hook\nat various points in the site generation lifecycle to modify the output any way you can dream of.\n\nBuilt on Symfony components, it is robust, and while not as fast as Jekyll, it should be bearable for most purposes.\n\nThis is still at an early stage of develompent, but it should already be able to build most Jekyll sites.",
    "bodyHtml": "<p>Stati is an extensible PHP static site generator that can generate your existing Jekyll sites.</p>\n<p>Jekyll is one of the most popular static site generator, but unfortunately for those of\nus not proficient in ruby, it cannot be extended that easily.</p>\n<p>Stati solves that, with it's clear plugin architecture based on the Symfony Event Dispatcher component, your plugin can hook\nat various points in the site generation lifecycle to modify the output any way you can dream of.</p>\n<p>Built on Symfony components, it is robust, and while not as fast as Jekyll, it should be bearable for most purposes.</p>\n<p>This is still at an early stage of develompent, but it should already be able to build most Jekyll sites.</p>\n"
  },
  {
    "title": "Static Lite",
    "repo": "BrandonRomano/static-lite",
    "homepage": "https://github.com/BrandonRomano/static-lite",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Jade"],
    "description": "A minimalist configuration for generating static sites, powered entirely by NPM scripts.",
    "bodyContent": "Static Lite is a minimalist configuration for generating static sites, powered entirely by NPM scripts.  Static Lite is less of a framework and more of an ideology suggesting that developers should take control of their build process.  This configuration comes with a default stack to get up and running, but the framework suggests developers update it to match their unique needs.\n\nThere is no external build tool for this static site generator, so duplicate the Static Lite repo to get started.",
    "bodyHtml": "<p>Static Lite is a minimalist configuration for generating static sites, powered entirely by NPM scripts.  Static Lite is less of a framework and more of an ideology suggesting that developers should take control of their build process.  This configuration comes with a default stack to get up and running, but the framework suggests developers update it to match their unique needs.</p>\n<p>There is no external build tool for this static site generator, so duplicate the Static Lite repo to get started.</p>\n"
  },
  {
    "title": "Static Site Boilerplate",
    "repo": "ericalli/static-site-boilerplate",
    "homepage": "http://staticsiteboilerplate.com",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["HTML"],
    "description": "A modern static site generator.",
    "bodyContent": "Static Site Boilerplate is a better workflow for building modern static websites. Automated build processes, a local development server, production minification and optimizations, and the latest standards for static websites.\n\n## Philosophy\n\nWe keep our opinions to ourselves. Write your code however you’d like, then generate a ready to deploy website with a single command.",
    "bodyHtml": "<p>Static Site Boilerplate is a better workflow for building modern static websites. Automated build processes, a local development server, production minification and optimizations, and the latest standards for static websites.</p>\n<h2>Philosophy</h2>\n<p>We keep our opinions to ourselves. Write your code however you’d like, then generate a ready to deploy website with a single command.</p>\n"
  },
  {
    "title": "static-site-express",
    "repo": "SalsaBoy990/static-site-express",
    "homepage": "https://github.com/SalsaBoy990/static-site-express",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["EJS"],
    "description": "A simple Node.js based static site generator that uses EJS and Markdown.",
    "startertemplaterepo": "SalsaBoy990/static-site-express",
    "bodyContent": "static-site-express is a simple Node.js based static site generator that uses EJS and Markdown. I created a complete [website/blog](https://static-site-express.netlify.com/) that you can easily and quickly customise, and publish it on Netlify.",
    "bodyHtml": "<p>static-site-express is a simple Node.js based static site generator that uses EJS and Markdown. I created a complete <a href=\"https://static-site-express.netlify.com/\">website/blog</a> that you can easily and quickly customise, and publish it on Netlify.</p>\n"
  },
  {
    "title": "staticjinja",
    "repo": "Ceasar/staticjinja",
    "homepage": "http://staticjinja.readthedocs.org/en/latest/",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "Effortlessly deploy static sites with Jinja2.",
    "bodyContent": "staticjinja is a library for easily deploying static sites using the jinja2 templating language.\n\nMost static site generators are cumbersome to use. Nevertheless, when deploying a static website that could benefit from factored out data or modular html pages (especially convenient when prototyping), a templating engine can be invaluable. (jinja2 is an extremely powerful tool in this regard.)\n\nstaticjinja is designed to be lightweight, easy-to-use, and highly extensible, enabling you to focus on simply making your site.\n\n```sh\n$ mkdir templates\n$ vim templates/index.html\n$ python -m staticjinja\nBuilding index.html...\nTemplates built.\nWatching 'templates' for changes...\nPress Ctrl+C to stop.\n```",
    "bodyHtml": "<p>staticjinja is a library for easily deploying static sites using the jinja2 templating language.</p>\n<p>Most static site generators are cumbersome to use. Nevertheless, when deploying a static website that could benefit from factored out data or modular html pages (especially convenient when prototyping), a templating engine can be invaluable. (jinja2 is an extremely powerful tool in this regard.)</p>\n<p>staticjinja is designed to be lightweight, easy-to-use, and highly extensible, enabling you to focus on simply making your site.</p>\n<pre><code class=\"hljs\">$ mkdir templates\n$ vim templates/index.html\n$ python -m staticjinja\nBuilding index.html...\nTemplates built.\nWatching <span class=\"hljs-string\">'templates'</span> <span class=\"hljs-keyword\">for</span> changes...\nPress Ctrl+C to stop.</code></pre>"
  },
  {
    "title": "ARFR",
    "repo": "javimosch/staticstuff",
    "homepage": "https://github.com/javimosch/arfr",
    "language": ["JavaScript"],
    "license": ["Apache 2.0"],
    "templates": ["Handlebars"],
    "description": "Generates simple static web content blazing fast using handlebars templates.",
    "bodyContent": "## ARFR\n\nARFR let you develop static web sites faster.\n\n### Features\n\n - Watch and Compiles a folder tree recursively preserving the structure using handlebars.\n - Handlebars support\n - ftp deploy\n - live preview sync (firebase)\n\n### How it works\n\n - Compiles in memory handlebars partials files from partials folder. (Use the partial with name of the file without ext. Ex: partials/myproject1/sections/prj1-head.html becomes {{> prj1-head}} )\n\n - Copy (compiles) handlebars files from templates folder. (preserves the folder structure). Ex: If you have templates/index.html and templates/aboutus/index.html (both using handlebars syntax), the output will be the same, it only compiles the content.\n\n - Handlebars compilation errors do not break the node proccess.\n\n - Copies css from css folder to the output folder slash css. (preserves structure)\n\n - Custom json or js handlebars data load for using as context.\n\n - Every time a watch (on scripts, styles and templates) emits a build success event, a signal is sent to a firebase database. If your has the firebase reloading snippet (a handlebars partial), your browser will reload automatically.",
    "bodyHtml": "<h2>ARFR</h2>\n<p>ARFR let you develop static web sites faster.</p>\n<h3>Features</h3>\n<ul>\n<li>Watch and Compiles a folder tree recursively preserving the structure using handlebars.</li>\n<li>Handlebars support</li>\n<li>ftp deploy</li>\n<li>live preview sync (firebase)</li>\n</ul>\n<h3>How it works</h3>\n<ul>\n<li>\n<p>Compiles in memory handlebars partials files from partials folder. (Use the partial with name of the file without ext. Ex: partials/myproject1/sections/prj1-head.html becomes {{&gt; prj1-head}} )</p>\n</li>\n<li>\n<p>Copy (compiles) handlebars files from templates folder. (preserves the folder structure). Ex: If you have templates/index.html and templates/aboutus/index.html (both using handlebars syntax), the output will be the same, it only compiles the content.</p>\n</li>\n<li>\n<p>Handlebars compilation errors do not break the node proccess.</p>\n</li>\n<li>\n<p>Copies css from css folder to the output folder slash css. (preserves structure)</p>\n</li>\n<li>\n<p>Custom json or js handlebars data load for using as context.</p>\n</li>\n<li>\n<p>Every time a watch (on scripts, styles and templates) emits a build success event, a signal is sent to a firebase database. If your has the firebase reloading snippet (a handlebars partial), your browser will reload automatically.</p>\n</li>\n</ul>\n"
  },
  {
    "title": "Statie",
    "repo": "Symplify/Statie",
    "homepage": "https://www.statie.org",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig", "Latte"],
    "description": "Modern and Simple Static Site Generator in PHP",
    "bodyContent": "Modern and Simple Static Site Generator in PHP\n\nStatie takes HTML, Markdown and Twig or Latte files and generates static HTML page.",
    "bodyHtml": "<p>Modern and Simple Static Site Generator in PHP</p>\n<p>Statie takes HTML, Markdown and Twig or Latte files and generates static HTML page.</p>\n"
  },
  {
    "title": "Statify",
    "repo": "NBens/Statify",
    "language": ["Python"],
    "homepage": "https://github.com/NBens/Statify",
    "license": ["BSD 2-Clause"],
    "templates": ["Jinja2"],
    "description": "Simple, lightweight, one file static site generator, Powered by Python 3 & Jninja2.",
    "bodyContent": "Statify is a simple tool for creating static websites using Python 3 & Jinja2 Templates\nYou can create a blog, company website, portfolio or even a CMS!\nIs is as simple as:\nEdit markdown files, statify.py and everything is ready!",
    "bodyHtml": "<p>Statify is a simple tool for creating static websites using Python 3 &amp; Jinja2 Templates\nYou can create a blog, company website, portfolio or even a CMS!\nIs is as simple as:\nEdit markdown files, statify.py and everything is ready!</p>\n"
  },
  {
    "title": "Statik",
    "repo": "thanethomson/statik",
    "homepage": "https://getstatik.com/",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2", "Mustache"],
    "description": "A simple, generic, static web site generator for developers.",
    "bodyContent": "Statik aims to be a simple, generic, static web site generator for developers.\nIt has been born out of a need for something more generic than most other\nstatic web site generators, which mostly cater for building blogs. It allows\nfor a generic data model, and provides a SQLite interface for you to be able to\nperform relatively complex queries from your views. Its templating engine is\nbased on the popular Jinja2, so if you come from a Django background, it is\nvery easy to pick up. Alternatively, you could opt for Mustache templating.\n\nUltimately, it generates a set of flat HTML files that should be able to be\nserved directly by your web server.",
    "bodyHtml": "<p>Statik aims to be a simple, generic, static web site generator for developers.\nIt has been born out of a need for something more generic than most other\nstatic web site generators, which mostly cater for building blogs. It allows\nfor a generic data model, and provides a SQLite interface for you to be able to\nperform relatively complex queries from your views. Its templating engine is\nbased on the popular Jinja2, so if you come from a Django background, it is\nvery easy to pick up. Alternatively, you could opt for Mustache templating.</p>\n<p>Ultimately, it generates a set of flat HTML files that should be able to be\nserved directly by your web server.</p>\n"
  },
  {
    "title": "Stitcher",
    "repo": "pageon/stitcher-core",
    "homepage": "https://github.com/pageon/stitcher-core",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig", "Smarty"],
    "description": "Static websites for PHP developers",
    "bodyContent": "Stitcher is a **PHP tool** for **developers** to create **high performant websites**. At its core, Stitcher is a \n**static site generator** capable to work with popular **template engines**, and many data formats like \n**MarkDown, YAML, JSON** and more. \n\nBesides generating static sites, Stitcher has built-in support for **minification**, **image optimisation**, \nand **CSS precompiling**.\n\nIt supports more advanced features than normal web pages, like **overview** and **detail** pages and **pagination**. \nIn the near future, Stitcher will also be able to handle **filtering** and **form submissions**.",
    "bodyHtml": "<p>Stitcher is a <strong>PHP tool</strong> for <strong>developers</strong> to create <strong>high performant websites</strong>. At its core, Stitcher is a\n<strong>static site generator</strong> capable to work with popular <strong>template engines</strong>, and many data formats like\n<strong>MarkDown, YAML, JSON</strong> and more.</p>\n<p>Besides generating static sites, Stitcher has built-in support for <strong>minification</strong>, <strong>image optimisation</strong>,\nand <strong>CSS precompiling</strong>.</p>\n<p>It supports more advanced features than normal web pages, like <strong>overview</strong> and <strong>detail</strong> pages and <strong>pagination</strong>.\nIn the near future, Stitcher will also be able to handle <strong>filtering</strong> and <strong>form submissions</strong>.</p>\n"
  },
  {
    "title": "Stog",
    "repo": "zoggy/stog",
    "homepage": "http://zoggy.github.io/stog/",
    "language": ["OCaml"],
    "license": ["GNU GPL v3.0"],
    "templates": ["XML"],
    "description": "Stog is a static blog and website generator, like Jekyll but in OCaml.",
    "bodyContent": "Stog is a static web site compiler. It is able to handle blog posts as well are regular pages. It can be seen as a kind of Jekyll developed in OCaml.\n\nThe main features are:\n\n* It is developed in OCaml and can be extended with OCaml plugins,\n* It is based on a XML engine allowing to apply substitutions (rewrite rules) on some tags. Some substitutions are pre-defined, and others can be défined in your documents or added by plugins,\n* It easily supports multi-language sites,\n* It features an online-editor, to be integrated with git,\n* It has an online previewer,\n* A lot of functions can be used to handle sectionning, table of contents, verified cross-references, ...,\n* OCaml code can be interpreted at compilation time and the result included in the generated documents,\n* Some plugins ease the inclusion of graphviz graphs, and pictures generated by Aysmptote or LaTeX,\n* A markdown plugin converts markdown sources.",
    "bodyHtml": "<p>Stog is a static web site compiler. It is able to handle blog posts as well are regular pages. It can be seen as a kind of Jekyll developed in OCaml.</p>\n<p>The main features are:</p>\n<ul>\n<li>It is developed in OCaml and can be extended with OCaml plugins,</li>\n<li>It is based on a XML engine allowing to apply substitutions (rewrite rules) on some tags. Some substitutions are pre-defined, and others can be défined in your documents or added by plugins,</li>\n<li>It easily supports multi-language sites,</li>\n<li>It features an online-editor, to be integrated with git,</li>\n<li>It has an online previewer,</li>\n<li>A lot of functions can be used to handle sectionning, table of contents, verified cross-references, ...,</li>\n<li>OCaml code can be interpreted at compilation time and the result included in the generated documents,</li>\n<li>Some plugins ease the inclusion of graphviz graphs, and pictures generated by Aysmptote or LaTeX,</li>\n<li>A markdown plugin converts markdown sources.</li>\n</ul>\n"
  },
  {
    "title": "Styx",
    "repo": "styx-static/styx",
    "homepage": "https://styx-static.github.io/styx-site/",
    "language": ["Nix"],
    "license": ["MIT"],
    "templates": ["Nix"],
    "description": "Nix based static site generator.",
    "bodyContent": "Styx is a static site generator based on the [Nix package manager](https://nixos.org/nix/). It aims to be lightweight and flexible.",
    "bodyHtml": "<p>Styx is a static site generator based on the <a href=\"https://nixos.org/nix/\">Nix package manager</a>. It aims to be lightweight and flexible.</p>\n"
  },
  {
    "title": "SuSi",
    "repo": "AVGP/susi",
    "homepage": "https://github.com/AVGP/susi",
    "language": ["JavaScript"],
    "license": ["ISC"],
    "templates": ["HTML"],
    "description": "The SUper SImple site generator.",
    "bodyContent": "This is the Su​per Si​mple Si​te generator.  \nYou give it markdown files and (if you fancy) an HTML layout to render them into - and it gives you static HTML.\n\nThat's it. No magic, no fancy build tools - Markdown and HTML. Now go and make that website!\n\n### Philosophy\n\nStatic site generation shouldn't be rocket science.\n\nThis is the **Su**&#8203;per **Si**&#8203;mple **Si**&#8203;te generator.\n\nYou give it markdown files and (if you fancy) an HTML layout to render them into - and it gives you static HTML.\n\nThat's it. No magic, no fancy build tools - Markdown and HTML. Now go and make that website!",
    "bodyHtml": "<p>This is the Su​per Si​mple Si​te generator.<br>\nYou give it markdown files and (if you fancy) an HTML layout to render them into - and it gives you static HTML.</p>\n<p>That's it. No magic, no fancy build tools - Markdown and HTML. Now go and make that website!</p>\n<h3>Philosophy</h3>\n<p>Static site generation shouldn't be rocket science.</p>\n<p>This is the <strong>Su</strong>​per <strong>Si</strong>​mple <strong>Si</strong>​te generator.</p>\n<p>You give it markdown files and (if you fancy) an HTML layout to render them into - and it gives you static HTML.</p>\n<p>That's it. No magic, no fancy build tools - Markdown and HTML. Now go and make that website!</p>\n"
  },
  {
    "title": "Taft",
    "repo": "fitnr/taft",
    "homepage": "https://github.com/fitnr/taft",
    "language": ["JavaScript"],
    "license": ["GNU GPL v3.0"],
    "templates": ["Handlebars"],
    "description": "Static site generator for the command line",
    "bodyContent": "Taft's goal is to allow building static sites from the command line, without extra config files. It's ideal for a workflow based around a Makefile. It does away with config files or init commands - the command used to build the site tells the story. Taft is lightning fast at the cost of doing away with some bells and whistles.",
    "bodyHtml": "<p>Taft's goal is to allow building static sites from the command line, without extra config files. It's ideal for a workflow based around a Makefile. It does away with config files or init commands - the command used to build the site tells the story. Taft is lightning fast at the cost of doing away with some bells and whistles.</p>\n"
  },
  {
    "title": "Tags",
    "repo": "braceio/tags",
    "homepage": "http://tags.brace.io/",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Tags"],
    "description": "The simplest static site generator",
    "bodyContent": "Brace Tags is a static site generator focused on simplicity. It does one thing:\nsolves the problem of having to repeat the same HTML code on several web pages.\n(In other words, it provides \"partials\")\n\nThe template language provided by Brace Tags has only two tags, `include` and\n`is`.\n\n\n### Static site generation 101\n\nYou can use Brace Tags to build a multi-page static website without\nduplicating navigation or footer code. Here's generally how it works:\n\n1. Find duplicated code snippets in your HTML files. Extract them into separate\nfiles called \"partials\".\n\n2. Replace each duplicated code snippet with a special placeholder tag. The tag\nlooks like: `{% include mypartial.html %}`. This is where the content from a\npartial will be injected.\n\n3. Run the `tags build` command to assemble the website from your source code.\nYou can put the generated site online using any static site hosting provider.",
    "bodyHtml": "<p>Brace Tags is a static site generator focused on simplicity. It does one thing:\nsolves the problem of having to repeat the same HTML code on several web pages.\n(In other words, it provides &quot;partials&quot;)</p>\n<p>The template language provided by Brace Tags has only two tags, <code>include</code> and\n<code>is</code>.</p>\n<h3>Static site generation 101</h3>\n<p>You can use Brace Tags to build a multi-page static website without\nduplicating navigation or footer code. Here's generally how it works:</p>\n<ol>\n<li>\n<p>Find duplicated code snippets in your HTML files. Extract them into separate\nfiles called &quot;partials&quot;.</p>\n</li>\n<li>\n<p>Replace each duplicated code snippet with a special placeholder tag. The tag\nlooks like: <code>{% include mypartial.html %}</code>. This is where the content from a\npartial will be injected.</p>\n</li>\n<li>\n<p>Run the <code>tags build</code> command to assemble the website from your source code.\nYou can put the generated site online using any static site hosting provider.</p>\n</li>\n</ol>\n"
  },
  {
    "title": "Tapestry",
    "repo": "tapestry-cloud/tapestry",
    "homepage": "https://www.tapestry.cloud/",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Plates"],
    "description": "Static sites for PHP developers",
    "bodyContent": "## About Tapestry\nTapestry is a static site generator that uses the [plates](http://platesphp.com/) template system by the league of extraordinary packages. Tapestry aims to be fast, easy to use and easy to extend. It has been inspired by similar generators [Sculpin](https://sculpin.io/) and [Jigsaw](http://jigsaw.tighten.co/). Tapestry is designed for developers who prefer to use native PHP templates over compiled template languages such as Twig or Blade. \n\n### Highlights\n* Native PHP templates with the use of the [plates](http://platesphp.com/) template system\n* [Blog aware](https://www.tapestry.cloud/documentation/your-content/) out of the box\n* Built to be extendable with [plugins](https://www.tapestry.cloud/documentation/working-examples/#plugins)\n\n## Learning Tapestry\nThe [Tapestry documentation](https://www.tapestry.cloud/documentation/) provides a thorough insight into the inner workings of Tapestry. Making it as easy as possible to get started generating your sites.\n\n## Installing Tapestry\nThe recommended method for installing Tapestry is to grab the latest [zipped release here](https://github.com/carbontwelve/tapestry/releases) and unzip the contents into your `$PATH` to make it globally available from your command line.\n\nFor Windows environments a `.bat` file is included so that you do not have to type `php tapestry.phar` to run Tapestry; for it to work ensure it is kept in the same folder as the `.phar`.\n\nFor alternative methods of installing Tapestry see the [install documentation here](https://www.tapestry.cloud/documentation/installation).",
    "bodyHtml": "<h2>About Tapestry</h2>\n<p>Tapestry is a static site generator that uses the <a href=\"http://platesphp.com/\">plates</a> template system by the league of extraordinary packages. Tapestry aims to be fast, easy to use and easy to extend. It has been inspired by similar generators <a href=\"https://sculpin.io/\">Sculpin</a> and <a href=\"http://jigsaw.tighten.co/\">Jigsaw</a>. Tapestry is designed for developers who prefer to use native PHP templates over compiled template languages such as Twig or Blade.</p>\n<h3>Highlights</h3>\n<ul>\n<li>Native PHP templates with the use of the <a href=\"http://platesphp.com/\">plates</a> template system</li>\n<li><a href=\"https://www.tapestry.cloud/documentation/your-content/\">Blog aware</a> out of the box</li>\n<li>Built to be extendable with <a href=\"https://www.tapestry.cloud/documentation/working-examples/#plugins\">plugins</a></li>\n</ul>\n<h2>Learning Tapestry</h2>\n<p>The <a href=\"https://www.tapestry.cloud/documentation/\">Tapestry documentation</a> provides a thorough insight into the inner workings of Tapestry. Making it as easy as possible to get started generating your sites.</p>\n<h2>Installing Tapestry</h2>\n<p>The recommended method for installing Tapestry is to grab the latest <a href=\"https://github.com/carbontwelve/tapestry/releases\">zipped release here</a> and unzip the contents into your <code>$PATH</code> to make it globally available from your command line.</p>\n<p>For Windows environments a <code>.bat</code> file is included so that you do not have to type <code>php tapestry.phar</code> to run Tapestry; for it to work ensure it is kept in the same folder as the <code>.phar</code>.</p>\n<p>For alternative methods of installing Tapestry see the <a href=\"https://www.tapestry.cloud/documentation/installation\">install documentation here</a>.</p>\n"
  },
  {
    "title": "Tarbell",
    "repo": "tarbell-project/tarbell",
    "homepage": "http://tarbell.io",
    "language": ["Python"],
    "license": ["BSD 3-Clause"],
    "templates": ["Jinja"],
    "description": "Simple static sites for storytellers.",
    "bodyContent": "**Tarbell** makes use of familiar, flexible tools to take the magic (and frustration) out of publishing to the web. Google spreadsheets handle content management, so changes to your pages are easy to make without touching a line of code. Step-by-step prompts help you set up and configure your project, so that publishing it is a breeze.\n\nRead more about [how to install Tarbell](http://tarbell.readthedocs.org/en/latest/install.html), or follow along with our [tutorial](http://tarbell.readthedocs.org/en/latest/tutorial.html). You can also [follow updates on Twitter](https://twitter.com/tarbellproject).\n\nTarbell is named after celebrated journalist Ida Tarbell, who was all about making information more accessible.",
    "bodyHtml": "<p><strong>Tarbell</strong> makes use of familiar, flexible tools to take the magic (and frustration) out of publishing to the web. Google spreadsheets handle content management, so changes to your pages are easy to make without touching a line of code. Step-by-step prompts help you set up and configure your project, so that publishing it is a breeze.</p>\n<p>Read more about <a href=\"http://tarbell.readthedocs.org/en/latest/install.html\">how to install Tarbell</a>, or follow along with our <a href=\"http://tarbell.readthedocs.org/en/latest/tutorial.html\">tutorial</a>. You can also <a href=\"https://twitter.com/tarbellproject\">follow updates on Twitter</a>.</p>\n<p>Tarbell is named after celebrated journalist Ida Tarbell, who was all about making information more accessible.</p>\n"
  },
  {
    "title": "Tclssg",
    "repo": "tclssg/tclssg",
    "homepage": "https://github.com/tclssg/tclssg",
    "language": ["Tcl"],
    "license": ["MIT"],
    "templates": ["Custom"],
    "description": "A static site generator that uses Tcl for both code and templates.",
    "bodyContent": "Tclssg is a static site generator written in Tcl that uses Markdown for content markup, Bootstrap for layout (with Bootstrap theme support) and Tcl code embedded in HTML for templating.\n\n### Features\n\n* Markdown, Bootstrap themes, Tcl templates;\n* Distinguishes between plain old pages and blog posts;\n* RSS feeds;\n* SEO and usability features: sitemaps, canonical and previous/next links, `noindex` where appropriate.\n* Valid HTML5 and CSS level 3 output;\n* Deployment over FTP;\n* Deployment over SCP and other protocols with a custom deployment command;\n* Support for external comment engines;\n* Relative links in the HTML output that make it suitable for viewing over *file://*;\n* Reasonably fast (can process 500 input pages into 650 HTML files in about 35 seconds on a laptop with an SSD);\n* Few dependencies.\n* Can be used as a library from Tcl.\n\n### Page example\n\n```markdown\n{\n    title {Test page}\n    blogPost 1\n    tags {test {a long tag with spaces}}\n    date 2014-01-02\n    hideDate 1\n}\n**Lorem ipsum** reprehenderit _ullamco deserunt sit eiusmod_ ut minim in id\nvoluptate proident enim eu aliqua sit.\n\n<!-- more -->\n\nMollit ex cillum pariatur anim [exemplum](http://example.com) tempor\nexercitation sed eu Excepteur dolore deserunt cupidatat aliquip irure in\nfugiat eu laborum est.\n```",
    "bodyHtml": "<p>Tclssg is a static site generator written in Tcl that uses Markdown for content markup, Bootstrap for layout (with Bootstrap theme support) and Tcl code embedded in HTML for templating.</p>\n<h3>Features</h3>\n<ul>\n<li>Markdown, Bootstrap themes, Tcl templates;</li>\n<li>Distinguishes between plain old pages and blog posts;</li>\n<li>RSS feeds;</li>\n<li>SEO and usability features: sitemaps, canonical and previous/next links, <code>noindex</code> where appropriate.</li>\n<li>Valid HTML5 and CSS level 3 output;</li>\n<li>Deployment over FTP;</li>\n<li>Deployment over SCP and other protocols with a custom deployment command;</li>\n<li>Support for external comment engines;</li>\n<li>Relative links in the HTML output that make it suitable for viewing over <em>file://</em>;</li>\n<li>Reasonably fast (can process 500 input pages into 650 HTML files in about 35 seconds on a laptop with an SSD);</li>\n<li>Few dependencies.</li>\n<li>Can be used as a library from Tcl.</li>\n</ul>\n<h3>Page example</h3>\n<pre><code class=\"hljs\">{\n<span class=\"hljs-code\">    title {Test page}</span>\n<span class=\"hljs-code\">    blogPost 1</span>\n<span class=\"hljs-code\">    tags {test {a long tag with spaces}}</span>\n<span class=\"hljs-code\">    date 2014-01-02</span>\n<span class=\"hljs-code\">    hideDate 1</span>\n}\n<span class=\"hljs-strong\">**Lorem ipsum**</span> reprehenderit <span class=\"hljs-emphasis\">_ullamco deserunt sit eiusmod_</span> ut minim in id\nvoluptate proident enim eu aliqua sit.\n\n<span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- more --&gt;</span></span>\n\nMollit ex cillum pariatur anim [<span class=\"hljs-string\">exemplum</span>](<span class=\"hljs-link\">http://example.com</span>) tempor\nexercitation sed eu Excepteur dolore deserunt cupidatat aliquip irure in\nfugiat eu laborum est.</code></pre>"
  },
  {
    "title": "Techy",
    "repo": "krasimir/techy",
    "homepage": "http://krasimir.github.io/techy/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Custom"],
    "description": "The geeky way of writing",
    "bodyContent": "I love Markdown and I can turn it to a beautifully looking HTML layouts. I'm built and distributed as a Node.js module. Gulp.js is the base that I'm staying on. If you do not want to use a database to store your content, I can help you. Write everything in Markdown format, and I'll convert it to HTML.\n\n### Philosophy\n\nIn the content driven website (like a blog for example), the writing should be easy and fluent. Markdown language gives us the simplicity that we need. However, sometimes converting .md files to .html files is not enough. Techy is an instrument that uses Markdown as a base, but also makes your pages programmable.\n\nTechy is not only generating HTML markup. It puts your writings into a nicely formatted layout.",
    "bodyHtml": "<p>I love Markdown and I can turn it to a beautifully looking HTML layouts. I'm built and distributed as a Node.js module. Gulp.js is the base that I'm staying on. If you do not want to use a database to store your content, I can help you. Write everything in Markdown format, and I'll convert it to HTML.</p>\n<h3>Philosophy</h3>\n<p>In the content driven website (like a blog for example), the writing should be easy and fluent. Markdown language gives us the simplicity that we need. However, sometimes converting .md files to .html files is not enough. Techy is an instrument that uses Markdown as a base, but also makes your pages programmable.</p>\n<p>Techy is not only generating HTML markup. It puts your writings into a nicely formatted layout.</p>\n"
  },
  {
    "title": "Templer",
    "repo": "skx/templer",
    "homepage": "http://steve.org.uk/Software/templer/",
    "language": ["Perl"],
    "license": ["GNU GPL v2.0", "GNU GPL v3.0", "Artistic 2.0"],
    "templates": ["HTML::Template"],
    "description": "Templer is a modular extensible static-site-generator written in perl.",
    "bodyContent": "Templer is a modular extensible static-site-generator written in perl.\n\n### Templer\n\nTempler is an extensible static-site-generator which is written in Perl,\nand may be extended via plugins.\n\nBy default it will render HTML, but if you have the appropriate modules\ninstalled you can write your input pages in Markdown or Textile.\n\nVariables may be defined on a per-page or per-site basis, and may include:\n\n* The output of shell commands.\n* The output of various local files.\n* Loops refering to filenames.\n    * Allowing simple galleries to be made, for example.\n\nFinally you may define a layout on a per-page basis, allowing you to give\ndifferent areas of your site an entirely different look and feel.",
    "bodyHtml": "<p>Templer is a modular extensible static-site-generator written in perl.</p>\n<h3>Templer</h3>\n<p>Templer is an extensible static-site-generator which is written in Perl,\nand may be extended via plugins.</p>\n<p>By default it will render HTML, but if you have the appropriate modules\ninstalled you can write your input pages in Markdown or Textile.</p>\n<p>Variables may be defined on a per-page or per-site basis, and may include:</p>\n<ul>\n<li>The output of shell commands.</li>\n<li>The output of various local files.</li>\n<li>Loops refering to filenames.\n<ul>\n<li>Allowing simple galleries to be made, for example.</li>\n</ul>\n</li>\n</ul>\n<p>Finally you may define a layout on a per-page basis, allowing you to give\ndifferent areas of your site an entirely different look and feel.</p>\n"
  },
  {
    "title": "thumbsup",
    "repo": "thumbsup/thumbsup",
    "homepage": "https://thumbsup.github.io",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["None"],
    "description": "Static photo &amp; video gallery generator",
    "bodyContent": "## Static web galleries for all your photos and videos\n\nGive `thumbsup` a folder full of photos and videos, and it will build HTML galleries to view them.\nIt takes care of resizing photos, creating thumbnails, re-encoding videos to a web-friendly format, and more...\n\n## Highlights\n\n- Get started in seconds\n\nCreate a whole gallery from a single command.\nIf you have more time, pick a theme, configure your styles, or change the config settings to control how albums are created.\n\n- Fast\n\nThumbsup keeps track of which photos are new and only rebuilds what's necessary.\nIf everything is up to date, running thumbsup on a 50GB folder only takes a few seconds.\n\n- Mobile friendly\n\nThe generated website can be viewed on any device - including videos.\nHave a look for yourself at the demo site.\n\n- Cross-platform\n\nAvailable as an npm module or a Docker image, it works on macOS, Linux and Windows.\nThumbsup it built upon well established tools like ffmpeg.\n\n- Deploy anywhere\n\nThe generated galleries are fully static and self contained.\nBrowse them from your computer, or upload them to AWS S3 for the world to see.\n\n## Examples\n\n![Mosaic albums](https://thumbsup.github.io/public/images/theme-mosaic-albums.png)\n![Mosaic media](https://thumbsup.github.io/public/images/theme-mosaic-media.png)",
    "bodyHtml": "<h2>Static web galleries for all your photos and videos</h2>\n<p>Give <code>thumbsup</code> a folder full of photos and videos, and it will build HTML galleries to view them.\nIt takes care of resizing photos, creating thumbnails, re-encoding videos to a web-friendly format, and more...</p>\n<h2>Highlights</h2>\n<ul>\n<li>Get started in seconds</li>\n</ul>\n<p>Create a whole gallery from a single command.\nIf you have more time, pick a theme, configure your styles, or change the config settings to control how albums are created.</p>\n<ul>\n<li>Fast</li>\n</ul>\n<p>Thumbsup keeps track of which photos are new and only rebuilds what's necessary.\nIf everything is up to date, running thumbsup on a 50GB folder only takes a few seconds.</p>\n<ul>\n<li>Mobile friendly</li>\n</ul>\n<p>The generated website can be viewed on any device - including videos.\nHave a look for yourself at the demo site.</p>\n<ul>\n<li>Cross-platform</li>\n</ul>\n<p>Available as an npm module or a Docker image, it works on macOS, Linux and Windows.\nThumbsup it built upon well established tools like ffmpeg.</p>\n<ul>\n<li>Deploy anywhere</li>\n</ul>\n<p>The generated galleries are fully static and self contained.\nBrowse them from your computer, or upload them to AWS S3 for the world to see.</p>\n<h2>Examples</h2>\n<p><img src=\"https://thumbsup.github.io/public/images/theme-mosaic-albums.png\" alt=\"Mosaic albums\">\n<img src=\"https://thumbsup.github.io/public/images/theme-mosaic-media.png\" alt=\"Mosaic media\"></p>\n"
  },
  {
    "title": "Thunderbird",
    "repo": "damcclean/thunderbird",
    "homepage": "https://github.com/damcclean/thunderbird",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["PHP"],
    "description": "Static Site Generator written in PHP",
    "bodyContent": "Thunderbird is a simple static site generator. All you need to do is plop in some markdown content, hit a command and you're good to go! It's really that easy to whip up a static site.",
    "bodyHtml": "<p>Thunderbird is a simple static site generator. All you need to do is plop in some markdown content, hit a command and you're good to go! It's really that easy to whip up a static site.</p>\n"
  },
  {
    "title": "Tinkerer",
    "repo": "vladris/tinkerer",
    "homepage": "http://tinkerer.me",
    "language": ["Python"],
    "license": ["BSD 2-Clause"],
    "templates": ["Jinja2"],
    "description": "Tinkerer is a blogging engine/static website generator powered by Sphinx",
    "bodyContent": "Tinkerer is a blogging engine/static website generator powered by Sphinx.\n\nIt allows blogging in reStructuredText format, comes with out-of-the-box \nsupport for post publishing dates, authors, categories, tags, post archive,\nRSS feed generation, comments powered by Disqus and more.\n\nTinkerer is also highly customizable through Sphinx extensions.",
    "bodyHtml": "<p>Tinkerer is a blogging engine/static website generator powered by Sphinx.</p>\n<p>It allows blogging in reStructuredText format, comes with out-of-the-box\nsupport for post publishing dates, authors, categories, tags, post archive,\nRSS feed generation, comments powered by Disqus and more.</p>\n<p>Tinkerer is also highly customizable through Sphinx extensions.</p>\n"
  },
  {
    "title": "Tiny SSG",
    "repo": "Herve07h22/staticgen",
    "homepage": "https://github.com/Herve07h22/tinySSG",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "static site generator built with Python, with some interesting features for pre-processing the images.",
    "twitter": "07h22news",
    "bodyContent": "Tiny SSG is a static site generator built with Python. \nIt can read markdown files, but it has also some interesting features for pre-processing the images.\n\nI made this tool for a client who wanted to turn his website into a static one, in order to improve the security and the performances.\nAs the original site included more than 300 images, I needed to code something to process all of them in various sizes, \nand to implement a lazy loading. \n\nSee the demo [here](https://tinyssg.netlify.com)",
    "bodyHtml": "<p>Tiny SSG is a static site generator built with Python.\nIt can read markdown files, but it has also some interesting features for pre-processing the images.</p>\n<p>I made this tool for a client who wanted to turn his website into a static one, in order to improve the security and the performances.\nAs the original site included more than 300 images, I needed to code something to process all of them in various sizes,\nand to implement a lazy loading.</p>\n<p>See the demo <a href=\"https://tinyssg.netlify.com\">here</a></p>\n"
  },
  {
    "title": "Tome",
    "repo": "drupal-tome/tome-project",
    "homepage": "https://tome.fyi",
    "language": ["PHP"],
    "license": ["MIT"],
    "templates": ["Twig"],
    "description": "A static site generator lovingly crafted with Drupal 8.",
    "startertemplaterepo": "drupal-tome/netlify-template",
    "bodyContent": "Tome is a static site generator built in Drupal 8. If you're a fan of Drupal,\nor are interested in working with structured content instead of flat Markdown\nfiles, you should try Tome!\n\n### Features\n\n* Take advantage of a mature content management system to build static sites.\n* Re-use structured JSON exports in other static site generators like\n[GatsbyJS](https://github.com/drupal-tome/tome-gatsby).\n* Use Drupal without security or performance concerns.\n* Choose from a large library of Drupal 8 themes and modules.\n* Join one of the largest open source communities in the world and use Drupal\nin a new, fun way!",
    "bodyHtml": "<p>Tome is a static site generator built in Drupal 8. If you're a fan of Drupal,\nor are interested in working with structured content instead of flat Markdown\nfiles, you should try Tome!</p>\n<h3>Features</h3>\n<ul>\n<li>Take advantage of a mature content management system to build static sites.</li>\n<li>Re-use structured JSON exports in other static site generators like\n<a href=\"https://github.com/drupal-tome/tome-gatsby\">GatsbyJS</a>.</li>\n<li>Use Drupal without security or performance concerns.</li>\n<li>Choose from a large library of Drupal 8 themes and modules.</li>\n<li>Join one of the largest open source communities in the world and use Drupal\nin a new, fun way!</li>\n</ul>\n"
  },
  {
    "title": "Urubu",
    "repo": "jandecaluwe/urubu",
    "homepage": "http://urubu.jandecaluwe.com",
    "language": ["Python"],
    "license": ["AGPL v3.0"],
    "templates": ["Jinja2"],
    "description": "A micro CMS for static websites",
    "bodyContent": "Urubu is a micro CMS for static websites, with a focus on good navigation\npractices.\n\n* For websites, not just blogs\n* Focus on navigation\n* Ready for Bootstrap\n* Markdown content\n* Support for wiki links\n* Powerful templating with Jinja2\n* Sophisticated control\n* Built with Python\n* Ideal with git or mercurial",
    "bodyHtml": "<p>Urubu is a micro CMS for static websites, with a focus on good navigation\npractices.</p>\n<ul>\n<li>For websites, not just blogs</li>\n<li>Focus on navigation</li>\n<li>Ready for Bootstrap</li>\n<li>Markdown content</li>\n<li>Support for wiki links</li>\n<li>Powerful templating with Jinja2</li>\n<li>Sophisticated control</li>\n<li>Built with Python</li>\n<li>Ideal with git or mercurial</li>\n</ul>\n"
  },
  {
    "title": "Usmu",
    "repo": "usmu/usmu",
    "homepage": "http://usmu.io",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["Slim", "Markdown"],
    "description": "A small, extensible, static site generator.",
    "bodyContent": "Usmu is a small, simple but extensible static site generator. It takes your input files in Markdown and Slim and translates them to HTML files suitable for hosting virtually anywhere with built-in support for S3 or Github Pages.\n\n### Philosophy\n\nUsmu Core is designed to be small and do the bare minimum possible - turn your files into HTML. Everything else is provided by plugins that are typically small and incredibly easy to implement. Various deployment options are available as well as other plugins that add other features to your website like automatically generated sitemaps. Plugins are easy to install - just install the gem.\n\n### Templates\n\nUsmu makes use of the Tilt templating API to provide as many options as possible as easily as possible. All you need to do to use a different language is install the relevant gem and then it is immediately available. Want to use Sass or LESS to write your CSS? Coffeescript? No problem. Tilt are open to community-managed interfaces for supporting template languages they don't yet officially support so nothing is impossible.",
    "bodyHtml": "<p>Usmu is a small, simple but extensible static site generator. It takes your input files in Markdown and Slim and translates them to HTML files suitable for hosting virtually anywhere with built-in support for S3 or Github Pages.</p>\n<h3>Philosophy</h3>\n<p>Usmu Core is designed to be small and do the bare minimum possible - turn your files into HTML. Everything else is provided by plugins that are typically small and incredibly easy to implement. Various deployment options are available as well as other plugins that add other features to your website like automatically generated sitemaps. Plugins are easy to install - just install the gem.</p>\n<h3>Templates</h3>\n<p>Usmu makes use of the Tilt templating API to provide as many options as possible as easily as possible. All you need to do to use a different language is install the relevant gem and then it is immediately available. Want to use Sass or LESS to write your CSS? Coffeescript? No problem. Tilt are open to community-managed interfaces for supporting template languages they don't yet officially support so nothing is impossible.</p>\n"
  },
  {
    "title": "Vite",
    "repo": "icyphox/vite",
    "homepage": "https://github.com/icyphox/vite",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "A simple and minimal static site generator",
    "bodyContent": "A simple and minimal static site generator that *just works*™.\n> Sometimes, less is more\n\n## Installation\n`pip install vite`\n\n## Usage\n`vite new [path]`  \n`vite build`  \n`vite serve`  \n\nThat's it, no nonsense.",
    "bodyHtml": "<p>A simple and minimal static site generator that <em>just works</em>™.</p>\n<blockquote>\n<p>Sometimes, less is more</p>\n</blockquote>\n<h2>Installation</h2>\n<p><code>pip install vite</code></p>\n<h2>Usage</h2>\n<p><code>vite new [path]</code><br>\n<code>vite build</code><br>\n<code>vite serve</code></p>\n<p>That's it, no nonsense.</p>\n"
  },
  {
    "title": "VuePress",
    "repo": "vuejs/vuepress",
    "homepage": "https://vuepress.vuejs.org",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Vue"],
    "description": "Vue-powered Static Site Generator",
    "startertemplaterepo": "capriosa/vuepress-deploy",
    "twitter": "vuepress",
    "bodyContent": "# Simplicity First\n\nMinimal setup with markdown-centered project structure helps you focus on writing.\n\n# Vue-Powered\n\nEnjoy the dev experience of Vue + webpack, use Vue components in markdown, and develop custom themes with Vue.\n\n# Performant\n\nVuePress generates pre-rendered static HTML for each page, and runs as an SPA once a page is loaded.\n\n# As Easy as 1, 2, 3\n\n```bash\n# install\nnpm install -g vuepress\n\n# create a markdown file\necho \"# Hello VuePress\" > README.md\n\n# start writing\nvuepress dev\n\n# build to static files\nvuepress build\n```",
    "bodyHtml": "<h1>Simplicity First</h1>\n<p>Minimal setup with markdown-centered project structure helps you focus on writing.</p>\n<h1>Vue-Powered</h1>\n<p>Enjoy the dev experience of Vue + webpack, use Vue components in markdown, and develop custom themes with Vue.</p>\n<h1>Performant</h1>\n<p>VuePress generates pre-rendered static HTML for each page, and runs as an SPA once a page is loaded.</p>\n<h1>As Easy as 1, 2, 3</h1>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\"># install</span>\nnpm install -g vuepress\n\n<span class=\"hljs-comment\"># create a markdown file</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"# Hello VuePress\"</span> &gt; README.md\n\n<span class=\"hljs-comment\"># start writing</span>\nvuepress dev\n\n<span class=\"hljs-comment\"># build to static files</span>\nvuepress build</code></pre>"
  },
  {
    "title": "VueWebsite",
    "repo": "code-forefront/vue-website-cli",
    "homepage": "https://vue-website.io",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Vue"],
    "description": "Vue website - code your static website with VueJS components 😎",
    "bodyContent": "This tool allows you to put in place a static website powered by [VueJS](https://vuejs.org/).\n\nIf you are a VueJS developer, you can develop a static website in no time with the tools you love. Read the [Github Page](https://github.com/code-forefront/vue-website-cli) to know more and get what you need from this project.\n\nIf you are integrator or website developer using static site generators like Jekyll, and or handle user actions with tools like jQuery and manipulate much DOM, you will be able to code your website as simple components (html, css). Just add some js implementing VueJS component module and you will add reactivity to your page.\n\nMore information about the underlying plugin, the convention to follow and a simple example can be found [here](https://github.com/code-forefront/vue-website-plugins/)\n\n# installation\n\n`npm i -g vue-website-cli`\n\n# how to use\n\nJust generate a new website and you're done!\n\n`vue-website generate my-website`\n\nA `npm run dev` will live reload your site, a `npm run build` will generate your static pages, embedding VueJS anyway for reactivity and user interaction.",
    "bodyHtml": "<p>This tool allows you to put in place a static website powered by <a href=\"https://vuejs.org/\">VueJS</a>.</p>\n<p>If you are a VueJS developer, you can develop a static website in no time with the tools you love. Read the <a href=\"https://github.com/code-forefront/vue-website-cli\">Github Page</a> to know more and get what you need from this project.</p>\n<p>If you are integrator or website developer using static site generators like Jekyll, and or handle user actions with tools like jQuery and manipulate much DOM, you will be able to code your website as simple components (html, css). Just add some js implementing VueJS component module and you will add reactivity to your page.</p>\n<p>More information about the underlying plugin, the convention to follow and a simple example can be found <a href=\"https://github.com/code-forefront/vue-website-plugins/\">here</a></p>\n<h1>installation</h1>\n<p><code>npm i -g vue-website-cli</code></p>\n<h1>how to use</h1>\n<p>Just generate a new website and you're done!</p>\n<p><code>vue-website generate my-website</code></p>\n<p>A <code>npm run dev</code> will live reload your site, a <code>npm run build</code> will generate your static pages, embedding VueJS anyway for reactivity and user interaction.</p>\n"
  },
  {
    "title": "Waffel",
    "repo": "moonwave99/waffel",
    "homepage": "http://moonwave99.github.io/waffel/",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Nunjucks"],
    "description": "Static site generation done tasty.",
    "bodyContent": "![Waffel](https://moonwave99.github.io/waffel/images/waffel.svg)\n\nI built Waffel because I missed a JavaScript static generator that featured:\n\n- content localisation for different languages;\n- grouping of entities by properties (categories/tags);\n- pagination of collections;\n- ease of writing custom template filters/helpers.\n\nCheck the [brunch-with-waffel](https://github.com/moonwave99/brunch-with-waffel) skeleton in order to run a local example.\n\n## Philosophy\n\n**Waffel** was born as a simple script to generate [my website](http://www.diegocaponera.com/) and a couple of [other](http://www.shoegaze.it/) [pages](http://www.dreampop.it/), and eventually my company's homepage. I thought it was worth releasing, basically because I plan to reuse it a lot in the close future, best as a companion to a content management tool I hope to release very soon.\n\nI think that having a full web stack for a blog/portfolio/small business showcase site is really an overkill today: you need a lot of services running in order to serve content, you will be the very only one to change in a deterministic way.\nNow that all our pathetic `comments.php` efforts have been teared apart by Disqus/social commenting facilities, why should we store our thoughts in a database, instead of on good ol' text files, editable in the way we find more comfortable?",
    "bodyHtml": "<p><img src=\"https://moonwave99.github.io/waffel/images/waffel.svg\" alt=\"Waffel\"></p>\n<p>I built Waffel because I missed a JavaScript static generator that featured:</p>\n<ul>\n<li>content localisation for different languages;</li>\n<li>grouping of entities by properties (categories/tags);</li>\n<li>pagination of collections;</li>\n<li>ease of writing custom template filters/helpers.</li>\n</ul>\n<p>Check the <a href=\"https://github.com/moonwave99/brunch-with-waffel\">brunch-with-waffel</a> skeleton in order to run a local example.</p>\n<h2>Philosophy</h2>\n<p><strong>Waffel</strong> was born as a simple script to generate <a href=\"http://www.diegocaponera.com/\">my website</a> and a couple of <a href=\"http://www.shoegaze.it/\">other</a> <a href=\"http://www.dreampop.it/\">pages</a>, and eventually my company's homepage. I thought it was worth releasing, basically because I plan to reuse it a lot in the close future, best as a companion to a content management tool I hope to release very soon.</p>\n<p>I think that having a full web stack for a blog/portfolio/small business showcase site is really an overkill today: you need a lot of services running in order to serve content, you will be the very only one to change in a deterministic way.\nNow that all our pathetic <code>comments.php</code> efforts have been teared apart by Disqus/social commenting facilities, why should we store our thoughts in a database, instead of on good ol' text files, editable in the way we find more comfortable?</p>\n"
  },
  {
    "title": "Wainwright",
    "repo": "wprl/wainwright",
    "homepage": "https://github.com/wprl/wainwright",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Consolidate.js"],
    "description": "A streaming static site generator for Gulp",
    "bodyContent": "A tool for building static sites with Gulp. Inspired by wintersmith.\n\nWritten by [William Riley-Land](http://kun.io/wprl).\n\n### About\n\n * Parse files with or without YAML headers\n * Apply template using engine(s) of your choice\n * Supports generators (for things like pagination and A/B testing)\n * Supports parsing Polymer/htmling templates",
    "bodyHtml": "<p>A tool for building static sites with Gulp. Inspired by wintersmith.</p>\n<p>Written by <a href=\"http://kun.io/wprl\">William Riley-Land</a>.</p>\n<h3>About</h3>\n<ul>\n<li>Parse files with or without YAML headers</li>\n<li>Apply template using engine(s) of your choice</li>\n<li>Supports generators (for things like pagination and A/B testing)</li>\n<li>Supports parsing Polymer/htmling templates</li>\n</ul>\n"
  },
  {
    "title": "Weaver",
    "repo": "davidsiaw/weaver",
    "homepage": "http://davidsiaw.github.io/weaver-docs",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["None"],
    "description": "A simple DSL-based web generator",
    "bodyContent": "## About\n\nWeaver is a simple Ruby-based DSL that allows you to create a static website using Ruby code and has shortcuts for many bootstrap idioms and jquery plugins.\n\nIt uses Sinatra to allow you to preview your site as you change it, and then lets you build it for deploying.\n\nTake advantage of being able to use Ruby to generate your blog, search page, listing, basically anything you would do in a static website!\n\n## How to use\n\nSimply install weaver using `gem install weaver`\n\nThen, `weaver create my-site`\n\nThen, `cd my-site && bundle install && bundle exec weaver`\n\nAnd then view your site at `http://localhost:4567`\n\nOnce you are done, `bundle exec weaver build` to generate your website's code into the `build` directory and copy it to your static host or CDN!\n\n## Philosophy\n\nWeaver tries to make writing rich static websites as easy and predictably possible by using a DSL. Images are stored in a special images folder because images are quite special, freeing you from constantly copy pasting the directory structure. Generating code should be as painless as possible, and even making forms should be easy. The weaver documentation is written in weaver itself.",
    "bodyHtml": "<h2>About</h2>\n<p>Weaver is a simple Ruby-based DSL that allows you to create a static website using Ruby code and has shortcuts for many bootstrap idioms and jquery plugins.</p>\n<p>It uses Sinatra to allow you to preview your site as you change it, and then lets you build it for deploying.</p>\n<p>Take advantage of being able to use Ruby to generate your blog, search page, listing, basically anything you would do in a static website!</p>\n<h2>How to use</h2>\n<p>Simply install weaver using <code>gem install weaver</code></p>\n<p>Then, <code>weaver create my-site</code></p>\n<p>Then, <code>cd my-site &amp;&amp; bundle install &amp;&amp; bundle exec weaver</code></p>\n<p>And then view your site at <code>http://localhost:4567</code></p>\n<p>Once you are done, <code>bundle exec weaver build</code> to generate your website's code into the <code>build</code> directory and copy it to your static host or CDN!</p>\n<h2>Philosophy</h2>\n<p>Weaver tries to make writing rich static websites as easy and predictably possible by using a DSL. Images are stored in a special images folder because images are quite special, freeing you from constantly copy pasting the directory structure. Generating code should be as painless as possible, and even making forms should be easy. The weaver documentation is written in weaver itself.</p>\n"
  },
  {
    "title": "Webby",
    "repo": "TwP/webby",
    "homepage": "http://webby.rubyforge.org/",
    "language": ["Ruby"],
    "license": ["MIT"],
    "templates": ["ERB"],
    "description": "Webby is a fantastic little website management system.",
    "bodyContent": "Webby is a fantastic little website management system. It would be called a content management system if it were a bigger kid. But, it’s just a runt with a special knack for transforming text. And that’s really all it does – manages the legwork of turning text into something else, an ASCII Alchemist if you will.\n\nWebby works by combining the contents of a page with a layout to produce HTML. The layout contains everything common to all the pages – HTML headers, navigation menu, footer, etc. – and the page contains just the information for that page. You can use your favorite markup language to write your pages; Webby supports quite a few.\n\n### NO LONGER UNDER ACTIVE DEVELOPMENT",
    "bodyHtml": "<p>Webby is a fantastic little website management system. It would be called a content management system if it were a bigger kid. But, it’s just a runt with a special knack for transforming text. And that’s really all it does – manages the legwork of turning text into something else, an ASCII Alchemist if you will.</p>\n<p>Webby works by combining the contents of a page with a layout to produce HTML. The layout contains everything common to all the pages – HTML headers, navigation menu, footer, etc. – and the page contains just the information for that page. You can use your favorite markup language to write your pages; Webby supports quite a few.</p>\n<h3>NO LONGER UNDER ACTIVE DEVELOPMENT</h3>\n"
  },
  {
    "title": "Webgen",
    "repo": "gettalong/webgen",
    "homepage": "http://webgen.gettalong.org/",
    "language": ["Ruby"],
    "license": ["GNU GPL v3.0"],
    "templates": ["ERB"],
    "description": "Static website generation made easy",
    "bodyContent": "A free, fast, powerful and extensible static website generator. Create a (or re-use an existing) website template, add a bunch of content files (in plain HTML or any markup language), throw in some assets and let webgen do the rest!\n\n\nWebgen is used for generating static websites from templates and content files (which can be written in any markup language). It can generate dynamic content like menus on the fly and comes with many powerful extensions.\n\nApart from this basic functionality, webgen offers many features that makes authoring websites easier:\n\n* Multiple markup languages to choose from for writing HTML and CSS files (Markdown, Textile, RDoc, Haml, Sass, ...)\n* Automatic generation of menus, breadcrumb trails, ... and more!\n* Partial website regeneration (only modified items get re-generated) which reduces website generation time enormously\n* Self-contained website (all generated links are relative, so one can view the website without a web server)\n* Easily extendable (all major components can be extended with new functionality or existing functionality can be replaced)\n* No need to know the Ruby language for basic websites",
    "bodyHtml": "<p>A free, fast, powerful and extensible static website generator. Create a (or re-use an existing) website template, add a bunch of content files (in plain HTML or any markup language), throw in some assets and let webgen do the rest!</p>\n<p>Webgen is used for generating static websites from templates and content files (which can be written in any markup language). It can generate dynamic content like menus on the fly and comes with many powerful extensions.</p>\n<p>Apart from this basic functionality, webgen offers many features that makes authoring websites easier:</p>\n<ul>\n<li>Multiple markup languages to choose from for writing HTML and CSS files (Markdown, Textile, RDoc, Haml, Sass, ...)</li>\n<li>Automatic generation of menus, breadcrumb trails, ... and more!</li>\n<li>Partial website regeneration (only modified items get re-generated) which reduces website generation time enormously</li>\n<li>Self-contained website (all generated links are relative, so one can view the website without a web server)</li>\n<li>Easily extendable (all major components can be extended with new functionality or existing functionality can be replaced)</li>\n<li>No need to know the Ruby language for basic websites</li>\n</ul>\n"
  },
  {
    "title": "Wheat",
    "repo": "creationix/wheat",
    "homepage": "https://github.com/creationix/wheat",
    "language": ["JavaScript"],
    "license": ["MIT"],
    "templates": ["Custom"],
    "description": "A blog engine for coders written in node.JS",
    "bodyContent": "Wheat is a blogging engine that reads a git repo full of markdown articles and presents them as a website.\n\nCheckout the wheat branch of howtonode.org for an example of how to use the library.\n\nhttp://github.com/creationix/howtonode.org",
    "bodyHtml": "<p>Wheat is a blogging engine that reads a git repo full of markdown articles and presents them as a website.</p>\n<p>Checkout the wheat branch of howtonode.org for an example of how to use the library.</p>\n<p>http://github.com/creationix/howtonode.org</p>\n"
  },
  {
    "title": "Wintersmith",
    "repo": "jnordberg/wintersmith",
    "homepage": "http://wintersmith.io/",
    "language": ["CoffeeScript"],
    "license": ["MIT"],
    "templates": ["Jade"],
    "description": "A flexible static site generator with awesome plugins.",
    "bodyContent": "Wintersmith is a simple yet flexible static site generator. It takes contents (markdown, less, scripts, etc), transforms them using plugins and outputs a static website (html, css, images, etc) that you can host anywhere.\n\nIt ships with plugins for [markdown](http://daringfireball.net/projects/markdown/) and [jade templates](https://github.com/visionmedia/jade), if you need something else check the [plugin listing](https://github.com/jnordberg/wintersmith/wiki/Plugins) or [write your own](https://github.com/jnordberg/wintersmith/wiki/Writing-plugins)\n\n### About\n\nWintersmith is written by [Johan Nordberg](http://johan-nordberg.com) using [CoffeeScript](http://coffeescript.org/) and licensed under the [MIT-license](http://en.wikipedia.org/wiki/MIT_License).\n\nThe name is a nod to [blacksmith](/blacksmith.html) which inspired this project.",
    "bodyHtml": "<p>Wintersmith is a simple yet flexible static site generator. It takes contents (markdown, less, scripts, etc), transforms them using plugins and outputs a static website (html, css, images, etc) that you can host anywhere.</p>\n<p>It ships with plugins for <a href=\"http://daringfireball.net/projects/markdown/\">markdown</a> and <a href=\"https://github.com/visionmedia/jade\">jade templates</a>, if you need something else check the <a href=\"https://github.com/jnordberg/wintersmith/wiki/Plugins\">plugin listing</a> or <a href=\"https://github.com/jnordberg/wintersmith/wiki/Writing-plugins\">write your own</a></p>\n<h3>About</h3>\n<p>Wintersmith is written by <a href=\"http://johan-nordberg.com\">Johan Nordberg</a> using <a href=\"http://coffeescript.org/\">CoffeeScript</a> and licensed under the <a href=\"http://en.wikipedia.org/wiki/MIT_License\">MIT-license</a>.</p>\n<p>The name is a nod to <a href=\"/blacksmith.html\">blacksmith</a> which inspired this project.</p>\n"
  },
  {
    "title": "wok",
    "repo": "mythmon/wok",
    "homepage": "http://wok.mythmon.com/",
    "language": ["Python"],
    "license": ["MIT"],
    "templates": ["Jinja2"],
    "description": "Toss some content, templates, and media in a pan and fry it up!",
    "bodyContent": "Wok is similar in concept to other static site generators, like Jekyll, Hyde,\nand nanoc, but different in a few ways, like a page/subpage category system,\nand a restricted focus of features. For example, instead of providing tools to\ngenerate RSS feeds directly, the tools that are needed to build a generic XML\ndocument are provided.\n\nWok offers: \n\n* Content and presentation are separated\n* Markdown, reStructuredText, and plain text renders\n* Jinja2-based templating system\n* Optional syntax highlighting via Pygments\n* Tagging and a hierarchical category system\n* Simple development server\n* Pagination support\n* Custom Python hooks that run during site generation",
    "bodyHtml": "<p>Wok is similar in concept to other static site generators, like Jekyll, Hyde,\nand nanoc, but different in a few ways, like a page/subpage category system,\nand a restricted focus of features. For example, instead of providing tools to\ngenerate RSS feeds directly, the tools that are needed to build a generic XML\ndocument are provided.</p>\n<p>Wok offers:</p>\n<ul>\n<li>Content and presentation are separated</li>\n<li>Markdown, reStructuredText, and plain text renders</li>\n<li>Jinja2-based templating system</li>\n<li>Optional syntax highlighting via Pygments</li>\n<li>Tagging and a hierarchical category system</li>\n<li>Simple development server</li>\n<li>Pagination support</li>\n<li>Custom Python hooks that run during site generation</li>\n</ul>\n"
  },
  {
    "title": "WP2Static",
    "repo": "leonstafford/wp2static",
    "homepage": "https://wp2static.com",
    "language": ["PHP"],
    "license": ["Unlicense"],
    "templates": [],
    "description": "Leverage WordPress as a great CMS, but benefit from the speed, security and portability that a static website provides",
    "twitter": "wp2static",
    "bodyContent": "WordPress plugin to publish a static copy of your site to GitHub Pages, S3, Netlify or anywhere else you can pipe into your CI/CD workflow.\n\nFormerly, \"WP Static Site Generator\"\n\nFor all the reasons why to use it and the benefits of going static, visit [https://wp2static.com](https://wp2static.com). For documentation, there's a [site for that](https://docs.wp2static.com), too.",
    "bodyHtml": "<p>WordPress plugin to publish a static copy of your site to GitHub Pages, S3, Netlify or anywhere else you can pipe into your CI/CD workflow.</p>\n<p>Formerly, &quot;WP Static Site Generator&quot;</p>\n<p>For all the reasons why to use it and the benefits of going static, visit <a href=\"https://wp2static.com\">https://wp2static.com</a>. For documentation, there's a <a href=\"https://docs.wp2static.com\">site for that</a>, too.</p>\n"
  },
  {
    "title": "WPWMM4",
    "repo": "uzsolt/wpwmm4",
    "homepage": "http://git.uzsolt.hu/wpwmm4/",
    "language": ["M4", "Make"],
    "license": ["BSD 2-Clause"],
    "templates": [],
    "description": "Web Page With Make and M4",
    "bodyContent": "With wpwmm4 can create web pages with simply 'make' and 'm4'.\n\nRequirements:\n- make (BSD's make, use bmake package of your distro)\n- m4 (compatible with BSD's m4 and GNU's m4 too)\n- some knowledge about HTML and programming\n\nFeatures:\n- incremental build (with make)\n- automatically generated pages (similar webpage with different content)\n- layouts\n- expandable, programmable via m4 or can insert output of any program\n\nNutshell:\n- convert items of ${TARGETS}: ${SRC_DIR}/*.m4 -> ${DEST_DIR}/*.html\n- create items of ${TARGETS_MANUAL}: use own programs, scripts\n- create items of ${VIRTUALS}: use templates from ${VIRT_DIR}\n- can call scripts from scripts/ directory and use their outputs\n\nExample web page is [uzsolt.hu](http://uzsolt.hu/) (only hungarian language). It has multi-level menu (without Javascript,\nonly pure HTML), automatically generated pages (for example [galleries](http://uzsolt.hu/pict/personal/summer2014/)\nwith `next` and `prev` buttons). Its source is available at [github](https://github.com/uzsolt/wpwmm4-uzsolt.hu)\nor [own git repo](http://git.uzsolt.hu/wpwmm4-uzsolt.hu/).",
    "bodyHtml": "<p>With wpwmm4 can create web pages with simply 'make' and 'm4'.</p>\n<p>Requirements:</p>\n<ul>\n<li>make (BSD's make, use bmake package of your distro)</li>\n<li>m4 (compatible with BSD's m4 and GNU's m4 too)</li>\n<li>some knowledge about HTML and programming</li>\n</ul>\n<p>Features:</p>\n<ul>\n<li>incremental build (with make)</li>\n<li>automatically generated pages (similar webpage with different content)</li>\n<li>layouts</li>\n<li>expandable, programmable via m4 or can insert output of any program</li>\n</ul>\n<p>Nutshell:</p>\n<ul>\n<li>convert items of ${TARGETS}: ${SRC_DIR}/<em>.m4 -&gt; ${DEST_DIR}/</em>.html</li>\n<li>create items of ${TARGETS_MANUAL}: use own programs, scripts</li>\n<li>create items of ${VIRTUALS}: use templates from ${VIRT_DIR}</li>\n<li>can call scripts from scripts/ directory and use their outputs</li>\n</ul>\n<p>Example web page is <a href=\"http://uzsolt.hu/\">uzsolt.hu</a> (only hungarian language). It has multi-level menu (without Javascript,\nonly pure HTML), automatically generated pages (for example <a href=\"http://uzsolt.hu/pict/personal/summer2014/\">galleries</a>\nwith <code>next</code> and <code>prev</code> buttons). Its source is available at <a href=\"https://github.com/uzsolt/wpwmm4-uzsolt.hu\">github</a>\nor <a href=\"http://git.uzsolt.hu/wpwmm4-uzsolt.hu/\">own git repo</a>.</p>\n"
  },
  {
    "title": "Wyam",
    "repo": "Wyamio/Wyam",
    "homepage": "http://wyam.io",
    "language": [".Net"],
    "license": ["MIT"],
    "templates": ["Razor", "Markdown"],
    "description": "A simple to use, highly modular, and extremely configurable static content generator.",
    "bodyContent": "Wyam is a static content generator and can be used to generate web sites, produce documentation, create ebooks, and much more. Since everything is configured by chaining together flexible modules (that you can even write yourself), the only limits to what it can create are your imagination.\n\n### Features\n\n  - Written in .NET and [easily extensible](http://wyam.io/knowledgebase/writing-a-module)\n  - [Low ceremony](http://wyam.io/getting-started/installation) - download a zip file, unzip, and run\n  - Flexible [script-based configuration](http://wyam.io/getting-started/configuration) using the power of the .NET Compiler Platform (Roslyn)\n  - Lots of [modules](http://wyam.io/modules) for things like [reading](http://wyam.io/modules/readfiles) and [writing](http://wyam.io/modules/writefiles) files, handling [frontmatter](http://wyam.io/modules/frontmatter), and manipulating [metadata](http://wyam.io/modules/metadata)\n  - [YAML parser](http://wyam.io/modules/yaml)\n  - [Less CSS compiler](http://wyam.io/modules/less)\n  - Support for multiple templating languages including [Razor](http://wyam.io/modules/razor)\n  - Integrated [web server](http://wyam.io/getting-started/usage) for previewing output\n  - Integrated [file watching](http://wyam.io/getting-started/usage) and regeneration\n  - Full [NuGet support](http://wyam.io/getting-started/configuration#nuget)\n  - [Embeddable engine](http://wyam.io/knowledgebase/embedded-use)",
    "bodyHtml": "<p>Wyam is a static content generator and can be used to generate web sites, produce documentation, create ebooks, and much more. Since everything is configured by chaining together flexible modules (that you can even write yourself), the only limits to what it can create are your imagination.</p>\n<h3>Features</h3>\n<ul>\n<li>Written in .NET and <a href=\"http://wyam.io/knowledgebase/writing-a-module\">easily extensible</a></li>\n<li><a href=\"http://wyam.io/getting-started/installation\">Low ceremony</a> - download a zip file, unzip, and run</li>\n<li>Flexible <a href=\"http://wyam.io/getting-started/configuration\">script-based configuration</a> using the power of the .NET Compiler Platform (Roslyn)</li>\n<li>Lots of <a href=\"http://wyam.io/modules\">modules</a> for things like <a href=\"http://wyam.io/modules/readfiles\">reading</a> and <a href=\"http://wyam.io/modules/writefiles\">writing</a> files, handling <a href=\"http://wyam.io/modules/frontmatter\">frontmatter</a>, and manipulating <a href=\"http://wyam.io/modules/metadata\">metadata</a></li>\n<li><a href=\"http://wyam.io/modules/yaml\">YAML parser</a></li>\n<li><a href=\"http://wyam.io/modules/less\">Less CSS compiler</a></li>\n<li>Support for multiple templating languages including <a href=\"http://wyam.io/modules/razor\">Razor</a></li>\n<li>Integrated <a href=\"http://wyam.io/getting-started/usage\">web server</a> for previewing output</li>\n<li>Integrated <a href=\"http://wyam.io/getting-started/usage\">file watching</a> and regeneration</li>\n<li>Full <a href=\"http://wyam.io/getting-started/configuration#nuget\">NuGet support</a></li>\n<li><a href=\"http://wyam.io/knowledgebase/embedded-use\">Embeddable engine</a></li>\n</ul>\n"
  },
  {
    "title": "YASBE",
    "repo": "underr/yasbe",
    "homepage": "http://github.com/underr/yasbe",
    "language": ["Python"],
    "license": ["WTFPL"],
    "templates": ["Mako"],
    "description": "Yet Another Static Blog Engine",
    "bodyContent": "[(Demo)](http://yasbe.surge.sh/)\n\nUnlike others Static Blogs Generators like Pelican or Jekyll, this one was made to be modified, \nso don't expect to get cool themes, ready \"plugins\" or anything.",
    "bodyHtml": "<p><a href=\"http://yasbe.surge.sh/\">(Demo)</a></p>\n<p>Unlike others Static Blogs Generators like Pelican or Jekyll, this one was made to be modified,\nso don't expect to get cool themes, ready &quot;plugins&quot; or anything.</p>\n"
  },
  {
    "title": "Yellow",
    "repo": "datenstrom/yellow",
    "startertemplaterepo": "datenstrom/yellow",
    "homepage": "https://datenstrom.se/yellow/",
    "twitter": "datenstromse",
    "language": ["PHP"],
    "license": ["GNU GPL v2.0"],
    "templates": ["PHP"],
    "description": "Datenstrom Yellow is for people who make websites.",
    "bodyContent": "Datenstrom Yellow is for people who make websites.\n\n1. [Download Datenstrom Yellow and unzip it](https://github.com/datenstrom/yellow/archive/master.zip).\n2. Go to your installation folder, where the `yellow.php` is.\n3. Enter the following command: `php yellow.php build`\n\nThis will build a static website in folder `public`. [Learn more](https://developers.datenstrom.se/help/server-configuration#static-website).",
    "bodyHtml": "<p>Datenstrom Yellow is for people who make websites.</p>\n<ol>\n<li><a href=\"https://github.com/datenstrom/yellow/archive/master.zip\">Download Datenstrom Yellow and unzip it</a>.</li>\n<li>Go to your installation folder, where the <code>yellow.php</code> is.</li>\n<li>Enter the following command: <code>php yellow.php build</code></li>\n</ol>\n<p>This will build a static website in folder <code>public</code>. <a href=\"https://developers.datenstrom.se/help/server-configuration#static-website\">Learn more</a>.</p>\n"
  },
  {
    "title": "yst",
    "repo": "jgm/yst",
    "homepage": "https://github.com/jgm/yst",
    "language": ["Haskell"],
    "license": ["GNU GPL v2.0"],
    "templates": ["StringTemplate"],
    "description": "Static websites from YAML and string templates",
    "bodyContent": "`yst` is a tool for generating a static website by filling [string\ntemplate](http://www.stringtemplate.org/)s with data taken from [YAML](http://www.yaml.org/) or [CSV](http://en.wikipedia.org/wiki/Comma-separated_values) text files or\n[SQLite3](http://www.sqlite.org/) file based databases. This approach\ncombines the speed, security, and ease of deployment of a static\nwebsite with the flexibility and maintainability of a dynamic site that\nseparates presentation and data.",
    "bodyHtml": "<p><code>yst</code> is a tool for generating a static website by filling <a href=\"http://www.stringtemplate.org/\">string\ntemplate</a>s with data taken from <a href=\"http://www.yaml.org/\">YAML</a> or <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">CSV</a> text files or\n<a href=\"http://www.sqlite.org/\">SQLite3</a> file based databases. This approach\ncombines the speed, security, and ease of deployment of a static\nwebsite with the flexibility and maintainability of a dynamic site that\nseparates presentation and data.</p>\n"
  },
  {
    "title": "Zas",
    "repo": "imdario/zas",
    "homepage": "http://github.com/imdario/zas",
    "language": ["Go"],
    "license": ["AGPL v3.0"],
    "templates": ["Go"],
    "description": "Most zen static website generator in Golang.",
    "bodyContent": "# ![Zas](https://i.imgur.com/e9abWRX.png)\n\nMost. Zen. Static. Website. Generator. Ever.\n\n## Why another one? C'mon, you must be kidding...\n\nI just wanted to set up a very simple website (just a few pages) with Jekyll and it didn't feel right. I didn't want a blog.\n\nI checked other projects but they were incomplete, cumbersome or solved the wrong problem (blogs, blogs everywhere). I wanted a zen-like experience. Just a layout and some Markdown files as pages with unobstrusive structure and configuration.\n\nYes, it is another NIH but... I think Zas is a different kind of beast. I admit that I probably overlooked some projects.\n\n### Where is the difference?\n\n1. Gophers. Yes, there is [Hugo](http://gohugo.io/) (kudos!) but... Who wants to learn another directory layout? There is also [Hastie](https://github.com/mkaz/hastie) too. If you want a blog.\n2. Markdown only. And HTML, if you want.\n3. Just a loop. Zas just loops over all .md and .html files in current directory (and subdirectories), ignoring all any other file (including dot-files).\n4. Your imagination as limit. Zas has a simple extension mechanism based in subcommands. Do you really need to handle a blog with Zas? Install/create a new extension and do it!\n5. Unobstrutive structure, no '_' files. More in [Usage](#usage) section.\n\n## Usage\n\nInstall:\n\n    $ go get github.com/imdario/zas\n\nGo to your site's directory and do:\n\n    $ zas init\n\nA .zas directory will be created with sane defaults. Put your layout in .zas/layout.html and you are ready.\n\n    $ zas\n\nYes. Enough. Your delightful site is on .zas/deploy. Enjoy.\n\nWhat is happening here? Well, \"generate\" subcommand is called by default. This subcommand accepts the following flags:\n\n* -verbose: print ALL the things!\n* -full: generates all the input files. By default, zas has an incremental mode which keeps source and deploy directories in sync.\n\nMore at [Zas repository](https://github.com/imdario/zas/blob/master/README.md).",
    "bodyHtml": "<h1><img src=\"https://i.imgur.com/e9abWRX.png\" alt=\"Zas\"></h1>\n<p>Most. Zen. Static. Website. Generator. Ever.</p>\n<h2>Why another one? C'mon, you must be kidding...</h2>\n<p>I just wanted to set up a very simple website (just a few pages) with Jekyll and it didn't feel right. I didn't want a blog.</p>\n<p>I checked other projects but they were incomplete, cumbersome or solved the wrong problem (blogs, blogs everywhere). I wanted a zen-like experience. Just a layout and some Markdown files as pages with unobstrusive structure and configuration.</p>\n<p>Yes, it is another NIH but... I think Zas is a different kind of beast. I admit that I probably overlooked some projects.</p>\n<h3>Where is the difference?</h3>\n<ol>\n<li>Gophers. Yes, there is <a href=\"http://gohugo.io/\">Hugo</a> (kudos!) but... Who wants to learn another directory layout? There is also <a href=\"https://github.com/mkaz/hastie\">Hastie</a> too. If you want a blog.</li>\n<li>Markdown only. And HTML, if you want.</li>\n<li>Just a loop. Zas just loops over all .md and .html files in current directory (and subdirectories), ignoring all any other file (including dot-files).</li>\n<li>Your imagination as limit. Zas has a simple extension mechanism based in subcommands. Do you really need to handle a blog with Zas? Install/create a new extension and do it!</li>\n<li>Unobstrutive structure, no '_' files. More in <a href=\"#usage\">Usage</a> section.</li>\n</ol>\n<h2>Usage</h2>\n<p>Install:</p>\n<pre><code>$ go get github.com/imdario/zas\n</code></pre>\n<p>Go to your site's directory and do:</p>\n<pre><code>$ zas init\n</code></pre>\n<p>A .zas directory will be created with sane defaults. Put your layout in .zas/layout.html and you are ready.</p>\n<pre><code>$ zas\n</code></pre>\n<p>Yes. Enough. Your delightful site is on .zas/deploy. Enjoy.</p>\n<p>What is happening here? Well, &quot;generate&quot; subcommand is called by default. This subcommand accepts the following flags:</p>\n<ul>\n<li>-verbose: print ALL the things!</li>\n<li>-full: generates all the input files. By default, zas has an incremental mode which keeps source and deploy directories in sync.</li>\n</ul>\n<p>More at <a href=\"https://github.com/imdario/zas/blob/master/README.md\">Zas repository</a>.</p>\n"
  },
  {
    "title": "Zodiac",
    "repo": "nuex/zodiac",
    "homepage": "http://github.com/nuex/zodiac",
    "language": ["Awk"],
    "license": ["MIT"],
    "templates": ["Custom"],
    "description": "A static site generator powered by awk and sh.",
    "bodyContent": "Zodiac is a static website generator that uses existing tools like awk, sh, find, cp, etc., to generate a static website. Zodiac is small, fast and sports a simple templating system and the ability to customize output using helpers written in awk.",
    "bodyHtml": "<p>Zodiac is a static website generator that uses existing tools like awk, sh, find, cp, etc., to generate a static website. Zodiac is small, fast and sports a simple templating system and the ability to customize output using helpers written in awk.</p>\n"
  },
  {
    "title": "Zola",
    "repo": "getzola/zola",
    "homepage": "https://www.getzola.org/",
    "language": ["Rust"],
    "license": ["MIT"],
    "templates": ["Tera"],
    "description": "A fast static site generator in a single binary with everything built-in.",
    "bodyContent": "Static site generator built using the modern Rust programming language.\n\n### Features\n\n* Taxonomies: tags and categories\n* Sass compilation\n* Built-in support for themes\n* Code highlighting themes\n* Tera template engine, and built-in shortcodes",
    "bodyHtml": "<p>Static site generator built using the modern Rust programming language.</p>\n<h3>Features</h3>\n<ul>\n<li>Taxonomies: tags and categories</li>\n<li>Sass compilation</li>\n<li>Built-in support for themes</li>\n<li>Code highlighting themes</li>\n<li>Tera template engine, and built-in shortcodes</li>\n</ul>\n"
  }
]
